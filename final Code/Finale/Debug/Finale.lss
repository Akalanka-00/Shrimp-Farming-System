
Finale.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002438  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001e6  00800060  00002438  000024cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002e  00800246  00800246  000026b2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000026b2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002710  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c8  00000000  00000000  00002750  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000024a9  00000000  00000000  00002918  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000099b  00000000  00000000  00004dc1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001352  00000000  00000000  0000575c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003d4  00000000  00000000  00006ab0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000681  00000000  00000000  00006e84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000012b5  00000000  00000000  00007505  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  000087ba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ab 00 	jmp	0x156	; 0x156 <__ctors_end>
       4:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
       8:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
       c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      10:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      14:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      18:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      1c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      20:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      24:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      28:	0c 94 8e 06 	jmp	0xd1c	; 0xd1c <__vector_10>
      2c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      30:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      34:	0c 94 e3 01 	jmp	0x3c6	; 0x3c6 <__vector_13>
      38:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      3c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      40:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      44:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      48:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      4c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      50:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>

00000054 <__trampolines_end>:
      54:	6e 61       	ori	r22, 0x1E	; 30
      56:	6e 00       	.word	0x006e	; ????

00000058 <__c.2332>:
      58:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      68:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      78:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      88:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      98:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      a8:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      b8:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
      c8:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
      d8:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
      e8:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
      f8:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     108:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     118:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     128:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     138:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     148:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000156 <__ctors_end>:
     156:	11 24       	eor	r1, r1
     158:	1f be       	out	0x3f, r1	; 63
     15a:	cf e5       	ldi	r28, 0x5F	; 95
     15c:	d8 e0       	ldi	r29, 0x08	; 8
     15e:	de bf       	out	0x3e, r29	; 62
     160:	cd bf       	out	0x3d, r28	; 61

00000162 <__do_copy_data>:
     162:	12 e0       	ldi	r17, 0x02	; 2
     164:	a0 e6       	ldi	r26, 0x60	; 96
     166:	b0 e0       	ldi	r27, 0x00	; 0
     168:	e8 e3       	ldi	r30, 0x38	; 56
     16a:	f4 e2       	ldi	r31, 0x24	; 36
     16c:	02 c0       	rjmp	.+4      	; 0x172 <__do_copy_data+0x10>
     16e:	05 90       	lpm	r0, Z+
     170:	0d 92       	st	X+, r0
     172:	a6 34       	cpi	r26, 0x46	; 70
     174:	b1 07       	cpc	r27, r17
     176:	d9 f7       	brne	.-10     	; 0x16e <__do_copy_data+0xc>

00000178 <__do_clear_bss>:
     178:	22 e0       	ldi	r18, 0x02	; 2
     17a:	a6 e4       	ldi	r26, 0x46	; 70
     17c:	b2 e0       	ldi	r27, 0x02	; 2
     17e:	01 c0       	rjmp	.+2      	; 0x182 <.do_clear_bss_start>

00000180 <.do_clear_bss_loop>:
     180:	1d 92       	st	X+, r1

00000182 <.do_clear_bss_start>:
     182:	a4 37       	cpi	r26, 0x74	; 116
     184:	b2 07       	cpc	r27, r18
     186:	e1 f7       	brne	.-8      	; 0x180 <.do_clear_bss_loop>
     188:	0e 94 66 07 	call	0xecc	; 0xecc <main>
     18c:	0c 94 1a 12 	jmp	0x2434	; 0x2434 <_exit>

00000190 <__bad_interrupt>:
     190:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000194 <TWIInit>:
}

void USART_TxNumber(int32_t number,uint8_t dtype){
	
	itoa(number,num,dtype);
	USART_TxString(num);
     194:	11 b8       	out	0x01, r1	; 1
     196:	88 e4       	ldi	r24, 0x48	; 72
     198:	80 b9       	out	0x00, r24	; 0
     19a:	84 e0       	ldi	r24, 0x04	; 4
     19c:	86 bf       	out	0x36, r24	; 54
     19e:	08 95       	ret

000001a0 <TWIStart>:
     1a0:	84 ea       	ldi	r24, 0xA4	; 164
     1a2:	86 bf       	out	0x36, r24	; 54
     1a4:	06 b6       	in	r0, 0x36	; 54
     1a6:	07 fe       	sbrs	r0, 7
     1a8:	fd cf       	rjmp	.-6      	; 0x1a4 <TWIStart+0x4>
     1aa:	08 95       	ret

000001ac <TWIStop>:
     1ac:	84 e9       	ldi	r24, 0x94	; 148
     1ae:	86 bf       	out	0x36, r24	; 54
     1b0:	06 b6       	in	r0, 0x36	; 54
     1b2:	04 fc       	sbrc	r0, 4
     1b4:	fd cf       	rjmp	.-6      	; 0x1b0 <TWIStop+0x4>
     1b6:	08 95       	ret

000001b8 <TWIWriteAddrs>:
     1b8:	90 e0       	ldi	r25, 0x00	; 0
     1ba:	88 0f       	add	r24, r24
     1bc:	99 1f       	adc	r25, r25
     1be:	86 2b       	or	r24, r22
     1c0:	83 b9       	out	0x03, r24	; 3
     1c2:	84 e8       	ldi	r24, 0x84	; 132
     1c4:	86 bf       	out	0x36, r24	; 54
     1c6:	06 b6       	in	r0, 0x36	; 54
     1c8:	07 fe       	sbrs	r0, 7
     1ca:	fd cf       	rjmp	.-6      	; 0x1c6 <TWIWriteAddrs+0xe>
     1cc:	81 b1       	in	r24, 0x01	; 1
     1ce:	88 7f       	andi	r24, 0xF8	; 248
     1d0:	08 95       	ret

000001d2 <TWIWriteData>:
     1d2:	83 b9       	out	0x03, r24	; 3
     1d4:	84 e8       	ldi	r24, 0x84	; 132
     1d6:	86 bf       	out	0x36, r24	; 54
     1d8:	06 b6       	in	r0, 0x36	; 54
     1da:	07 fe       	sbrs	r0, 7
     1dc:	fd cf       	rjmp	.-6      	; 0x1d8 <TWIWriteData+0x6>
     1de:	81 b1       	in	r24, 0x01	; 1
     1e0:	88 7f       	andi	r24, 0xF8	; 248
     1e2:	08 95       	ret

000001e4 <TWIReadACK>:
     1e4:	84 ec       	ldi	r24, 0xC4	; 196
     1e6:	86 bf       	out	0x36, r24	; 54
     1e8:	06 b6       	in	r0, 0x36	; 54
     1ea:	07 fe       	sbrs	r0, 7
     1ec:	fd cf       	rjmp	.-6      	; 0x1e8 <TWIReadACK+0x4>
     1ee:	83 b1       	in	r24, 0x03	; 3
     1f0:	08 95       	ret

000001f2 <TWIReadNACK>:
     1f2:	84 e8       	ldi	r24, 0x84	; 132
     1f4:	86 bf       	out	0x36, r24	; 54
     1f6:	06 b6       	in	r0, 0x36	; 54
     1f8:	07 fe       	sbrs	r0, 7
     1fa:	fd cf       	rjmp	.-6      	; 0x1f6 <TWIReadNACK+0x4>
     1fc:	83 b1       	in	r24, 0x03	; 3
     1fe:	08 95       	ret

00000200 <LcdBacklight>:
     200:	81 30       	cpi	r24, 0x01	; 1
     202:	21 f4       	brne	.+8      	; 0x20c <LcdBacklight+0xc>
     204:	88 e0       	ldi	r24, 0x08	; 8
     206:	80 93 5b 02 	sts	0x025B, r24	; 0x80025b <Backlight>
     20a:	08 95       	ret
     20c:	10 92 5b 02 	sts	0x025B, r1	; 0x80025b <Backlight>
     210:	08 95       	ret

00000212 <Lcd4bitdata>:
     212:	1f 93       	push	r17
     214:	cf 93       	push	r28
     216:	df 93       	push	r29
     218:	d8 2f       	mov	r29, r24
     21a:	c6 2f       	mov	r28, r22
     21c:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <TWIStart>
     220:	60 e0       	ldi	r22, 0x00	; 0
     222:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <deviceAdress>
     226:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <TWIWriteAddrs>
     22a:	1d 2f       	mov	r17, r29
     22c:	1c 2b       	or	r17, r28
     22e:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <Backlight>
     232:	81 2b       	or	r24, r17
     234:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <TWIWriteData>
     238:	0e 94 d6 00 	call	0x1ac	; 0x1ac <TWIStop>
     23c:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <TWIStart>
     240:	60 e0       	ldi	r22, 0x00	; 0
     242:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <deviceAdress>
     246:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <TWIWriteAddrs>
     24a:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <Backlight>
     24e:	81 2b       	or	r24, r17
     250:	84 60       	ori	r24, 0x04	; 4
     252:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <TWIWriteData>
     256:	0e 94 d6 00 	call	0x1ac	; 0x1ac <TWIStop>
     25a:	8f e8       	ldi	r24, 0x8F	; 143
     25c:	91 e0       	ldi	r25, 0x01	; 1
     25e:	01 97       	sbiw	r24, 0x01	; 1
     260:	f1 f7       	brne	.-4      	; 0x25e <Lcd4bitdata+0x4c>
     262:	00 c0       	rjmp	.+0      	; 0x264 <Lcd4bitdata+0x52>
     264:	00 00       	nop
     266:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <TWIStart>
     26a:	60 e0       	ldi	r22, 0x00	; 0
     26c:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <deviceAdress>
     270:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <TWIWriteAddrs>
     274:	db 7f       	andi	r29, 0xFB	; 251
     276:	cd 2b       	or	r28, r29
     278:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <Backlight>
     27c:	8c 2b       	or	r24, r28
     27e:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <TWIWriteData>
     282:	0e 94 d6 00 	call	0x1ac	; 0x1ac <TWIStop>
     286:	8f e9       	ldi	r24, 0x9F	; 159
     288:	9f e0       	ldi	r25, 0x0F	; 15
     28a:	01 97       	sbiw	r24, 0x01	; 1
     28c:	f1 f7       	brne	.-4      	; 0x28a <Lcd4bitdata+0x78>
     28e:	00 c0       	rjmp	.+0      	; 0x290 <Lcd4bitdata+0x7e>
     290:	00 00       	nop
     292:	df 91       	pop	r29
     294:	cf 91       	pop	r28
     296:	1f 91       	pop	r17
     298:	08 95       	ret

0000029a <LcdCommand>:
     29a:	cf 93       	push	r28
     29c:	c8 2f       	mov	r28, r24
     29e:	60 e0       	ldi	r22, 0x00	; 0
     2a0:	80 7f       	andi	r24, 0xF0	; 240
     2a2:	0e 94 09 01 	call	0x212	; 0x212 <Lcd4bitdata>
     2a6:	60 e0       	ldi	r22, 0x00	; 0
     2a8:	8c 2f       	mov	r24, r28
     2aa:	82 95       	swap	r24
     2ac:	80 7f       	andi	r24, 0xF0	; 240
     2ae:	0e 94 09 01 	call	0x212	; 0x212 <Lcd4bitdata>
     2b2:	cf 91       	pop	r28
     2b4:	08 95       	ret

000002b6 <LcdInit>:
     2b6:	0e 94 ca 00 	call	0x194	; 0x194 <TWIInit>
     2ba:	81 e0       	ldi	r24, 0x01	; 1
     2bc:	0e 94 00 01 	call	0x200	; 0x200 <LcdBacklight>
     2c0:	8f e3       	ldi	r24, 0x3F	; 63
     2c2:	9c e9       	ldi	r25, 0x9C	; 156
     2c4:	01 97       	sbiw	r24, 0x01	; 1
     2c6:	f1 f7       	brne	.-4      	; 0x2c4 <LcdInit+0xe>
     2c8:	00 c0       	rjmp	.+0      	; 0x2ca <LcdInit+0x14>
     2ca:	00 00       	nop
     2cc:	87 e2       	ldi	r24, 0x27	; 39
     2ce:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <deviceAdress>
     2d2:	82 e0       	ldi	r24, 0x02	; 2
     2d4:	0e 94 4d 01 	call	0x29a	; 0x29a <LcdCommand>
     2d8:	88 e2       	ldi	r24, 0x28	; 40
     2da:	0e 94 4d 01 	call	0x29a	; 0x29a <LcdCommand>
     2de:	8c e0       	ldi	r24, 0x0C	; 12
     2e0:	0e 94 4d 01 	call	0x29a	; 0x29a <LcdCommand>
     2e4:	86 e0       	ldi	r24, 0x06	; 6
     2e6:	0e 94 4d 01 	call	0x29a	; 0x29a <LcdCommand>
     2ea:	81 e0       	ldi	r24, 0x01	; 1
     2ec:	0e 94 4d 01 	call	0x29a	; 0x29a <LcdCommand>
     2f0:	08 95       	ret

000002f2 <LcdChar>:
     2f2:	cf 93       	push	r28
     2f4:	c8 2f       	mov	r28, r24
     2f6:	61 e0       	ldi	r22, 0x01	; 1
     2f8:	80 7f       	andi	r24, 0xF0	; 240
     2fa:	0e 94 09 01 	call	0x212	; 0x212 <Lcd4bitdata>
     2fe:	61 e0       	ldi	r22, 0x01	; 1
     300:	8c 2f       	mov	r24, r28
     302:	82 95       	swap	r24
     304:	80 7f       	andi	r24, 0xF0	; 240
     306:	0e 94 09 01 	call	0x212	; 0x212 <Lcd4bitdata>
     30a:	cf 91       	pop	r28
     30c:	08 95       	ret

0000030e <LcdString>:
     30e:	0f 93       	push	r16
     310:	1f 93       	push	r17
     312:	cf 93       	push	r28
     314:	df 93       	push	r29
     316:	8c 01       	movw	r16, r24
     318:	c0 e0       	ldi	r28, 0x00	; 0
     31a:	d0 e0       	ldi	r29, 0x00	; 0
     31c:	03 c0       	rjmp	.+6      	; 0x324 <LcdString+0x16>
     31e:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LcdChar>
     322:	21 96       	adiw	r28, 0x01	; 1
     324:	f8 01       	movw	r30, r16
     326:	ec 0f       	add	r30, r28
     328:	fd 1f       	adc	r31, r29
     32a:	80 81       	ld	r24, Z
     32c:	81 11       	cpse	r24, r1
     32e:	f7 cf       	rjmp	.-18     	; 0x31e <LcdString+0x10>
     330:	df 91       	pop	r29
     332:	cf 91       	pop	r28
     334:	1f 91       	pop	r17
     336:	0f 91       	pop	r16
     338:	08 95       	ret

0000033a <LcdSetCursor>:
     33a:	cf 93       	push	r28
     33c:	df 93       	push	r29
     33e:	ea 01       	movw	r28, r20
     340:	61 30       	cpi	r22, 0x01	; 1
     342:	31 f0       	breq	.+12     	; 0x350 <LcdSetCursor+0x16>
     344:	58 f0       	brcs	.+22     	; 0x35c <LcdSetCursor+0x22>
     346:	62 30       	cpi	r22, 0x02	; 2
     348:	29 f0       	breq	.+10     	; 0x354 <LcdSetCursor+0x1a>
     34a:	63 30       	cpi	r22, 0x03	; 3
     34c:	29 f0       	breq	.+10     	; 0x358 <LcdSetCursor+0x1e>
     34e:	07 c0       	rjmp	.+14     	; 0x35e <LcdSetCursor+0x24>
     350:	90 ec       	ldi	r25, 0xC0	; 192
     352:	05 c0       	rjmp	.+10     	; 0x35e <LcdSetCursor+0x24>
     354:	94 e9       	ldi	r25, 0x94	; 148
     356:	03 c0       	rjmp	.+6      	; 0x35e <LcdSetCursor+0x24>
     358:	94 ed       	ldi	r25, 0xD4	; 212
     35a:	01 c0       	rjmp	.+2      	; 0x35e <LcdSetCursor+0x24>
     35c:	90 e8       	ldi	r25, 0x80	; 128
     35e:	8f 70       	andi	r24, 0x0F	; 15
     360:	89 2b       	or	r24, r25
     362:	0e 94 4d 01 	call	0x29a	; 0x29a <LcdCommand>
     366:	ce 01       	movw	r24, r28
     368:	0e 94 87 01 	call	0x30e	; 0x30e <LcdString>
     36c:	df 91       	pop	r29
     36e:	cf 91       	pop	r28
     370:	08 95       	ret

00000372 <USART_Init>:
     372:	9c 01       	movw	r18, r24
     374:	40 e0       	ldi	r20, 0x00	; 0
     376:	50 e0       	ldi	r21, 0x00	; 0
     378:	60 e2       	ldi	r22, 0x20	; 32
     37a:	71 ea       	ldi	r23, 0xA1	; 161
     37c:	87 e0       	ldi	r24, 0x07	; 7
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <__divmodsi4>
     384:	21 50       	subi	r18, 0x01	; 1
     386:	31 09       	sbc	r19, r1
     388:	30 bd       	out	0x20, r19	; 32
     38a:	29 b9       	out	0x09, r18	; 9
     38c:	88 e1       	ldi	r24, 0x18	; 24
     38e:	8a b9       	out	0x0a, r24	; 10
     390:	8e e8       	ldi	r24, 0x8E	; 142
     392:	80 bd       	out	0x20, r24	; 32
     394:	78 94       	sei
     396:	08 95       	ret

00000398 <USART_Transmit>:
     398:	5d 9b       	sbis	0x0b, 5	; 11
     39a:	fe cf       	rjmp	.-4      	; 0x398 <USART_Transmit>
     39c:	8c b9       	out	0x0c, r24	; 12
     39e:	08 95       	ret

000003a0 <USART_TxStringln>:
     3a0:	cf 93       	push	r28
     3a2:	df 93       	push	r29
     3a4:	ec 01       	movw	r28, r24
     3a6:	03 c0       	rjmp	.+6      	; 0x3ae <USART_TxStringln+0xe>
     3a8:	21 96       	adiw	r28, 0x01	; 1
     3aa:	0e 94 cc 01 	call	0x398	; 0x398 <USART_Transmit>
     3ae:	88 81       	ld	r24, Y
     3b0:	81 11       	cpse	r24, r1
     3b2:	fa cf       	rjmp	.-12     	; 0x3a8 <USART_TxStringln+0x8>
     3b4:	8d e0       	ldi	r24, 0x0D	; 13
     3b6:	0e 94 cc 01 	call	0x398	; 0x398 <USART_Transmit>
     3ba:	8a e0       	ldi	r24, 0x0A	; 10
     3bc:	0e 94 cc 01 	call	0x398	; 0x398 <USART_Transmit>
     3c0:	df 91       	pop	r29
     3c2:	cf 91       	pop	r28
     3c4:	08 95       	ret

000003c6 <__vector_13>:
	
}



ISR(USART_RXC_vect){//A,B,C,D ???
     3c6:	1f 92       	push	r1
     3c8:	0f 92       	push	r0
     3ca:	0f b6       	in	r0, 0x3f	; 63
     3cc:	0f 92       	push	r0
     3ce:	11 24       	eor	r1, r1
     3d0:	8f 93       	push	r24
	
 rchar=UDR;
     3d2:	8c b1       	in	r24, 0x0c	; 12
     3d4:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <rchar>
	

	
		
}
     3d8:	8f 91       	pop	r24
     3da:	0f 90       	pop	r0
     3dc:	0f be       	out	0x3f, r0	; 63
     3de:	0f 90       	pop	r0
     3e0:	1f 90       	pop	r1
     3e2:	18 95       	reti

000003e4 <ReadADC>:


uint16_t ReadADC(uint8_t ADCchannel)
{
	//select ADC channel with safety mask
	ADMUX = (ADMUX & 0xF0) | (ADCchannel & 0x0F);
     3e4:	97 b1       	in	r25, 0x07	; 7
     3e6:	90 7f       	andi	r25, 0xF0	; 240
     3e8:	8f 70       	andi	r24, 0x0F	; 15
     3ea:	89 2b       	or	r24, r25
     3ec:	87 b9       	out	0x07, r24	; 7
	//single conversion mode
	ADCSRA |= (1<<ADSC);
     3ee:	86 b1       	in	r24, 0x06	; 6
     3f0:	80 64       	ori	r24, 0x40	; 64
     3f2:	86 b9       	out	0x06, r24	; 6
	// wait until ADC conversion is complete
	while( ADCSRA & (1<<ADSC) );
     3f4:	36 99       	sbic	0x06, 6	; 6
     3f6:	fe cf       	rjmp	.-4      	; 0x3f4 <ReadADC+0x10>
	return ADCW;
     3f8:	84 b1       	in	r24, 0x04	; 4
     3fa:	95 b1       	in	r25, 0x05	; 5
}
     3fc:	08 95       	ret

000003fe <getkeyNum>:

uint8_t getkeyNum(){
	DDRB=0b00001111;
     3fe:	8f e0       	ldi	r24, 0x0F	; 15
     400:	87 bb       	out	0x17, r24	; 23
	PORTB=0b11110000;
     402:	80 ef       	ldi	r24, 0xF0	; 240
     404:	88 bb       	out	0x18, r24	; 24
	uint8_t getx;
	uint8_t gety;
	while(1){
		
		uint8_t pin=(~(PINB|0x0F));
     406:	86 b3       	in	r24, 0x16	; 22
     408:	8f 60       	ori	r24, 0x0F	; 15
     40a:	80 95       	com	r24
		if (pin)
     40c:	e1 f3       	breq	.-8      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
		{
			
			
			switch(pin){
     40e:	80 32       	cpi	r24, 0x20	; 32
     410:	49 f0       	breq	.+18     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
     412:	18 f4       	brcc	.+6      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
     414:	80 31       	cpi	r24, 0x10	; 16
     416:	61 f0       	breq	.+24     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
     418:	0c c0       	rjmp	.+24     	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
     41a:	80 34       	cpi	r24, 0x40	; 64
     41c:	29 f0       	breq	.+10     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
     41e:	80 38       	cpi	r24, 0x80	; 128
     420:	29 f0       	breq	.+10     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
     422:	07 c0       	rjmp	.+14     	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
				
				
				case (1<<4) :getx=0; break;
				case (1<<5) :getx=1;break;
     424:	91 e0       	ldi	r25, 0x01	; 1
     426:	05 c0       	rjmp	.+10     	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
				case (1<<6) :getx=2;break;
     428:	92 e0       	ldi	r25, 0x02	; 2
     42a:	03 c0       	rjmp	.+6      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
				case (1<<7) :getx=3;break;
     42c:	93 e0       	ldi	r25, 0x03	; 3
     42e:	01 c0       	rjmp	.+2      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
			
			
			switch(pin){
				
				
				case (1<<4) :getx=0; break;
     430:	90 e0       	ldi	r25, 0x00	; 0
				case (1<<6) :getx=2;break;
				case (1<<7) :getx=3;break;
				
				
			} //switch
			DDRB=0b0;
     432:	17 ba       	out	0x17, r1	; 23
			PORTB=0b0;
     434:	18 ba       	out	0x18, r1	; 24
			
			DDRB=0b11110000;
     436:	80 ef       	ldi	r24, 0xF0	; 240
     438:	87 bb       	out	0x17, r24	; 23
			PORTB=0b00001111;
     43a:	8f e0       	ldi	r24, 0x0F	; 15
     43c:	88 bb       	out	0x18, r24	; 24
			
			pin=~(PINB|0xF0);
     43e:	86 b3       	in	r24, 0x16	; 22
     440:	80 6f       	ori	r24, 0xF0	; 240
     442:	80 95       	com	r24
			
			switch(pin){
     444:	82 30       	cpi	r24, 0x02	; 2
     446:	49 f0       	breq	.+18     	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
     448:	18 f4       	brcc	.+6      	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
     44a:	81 30       	cpi	r24, 0x01	; 1
     44c:	61 f0       	breq	.+24     	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
     44e:	0c c0       	rjmp	.+24     	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
     450:	84 30       	cpi	r24, 0x04	; 4
     452:	29 f0       	breq	.+10     	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
     454:	88 30       	cpi	r24, 0x08	; 8
     456:	29 f0       	breq	.+10     	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
     458:	07 c0       	rjmp	.+14     	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
				case (1<<0) :gety=0;break;
				case (1<<1) :gety=1;break;
     45a:	e1 e0       	ldi	r30, 0x01	; 1
     45c:	05 c0       	rjmp	.+10     	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
				case (1<<2) :gety=2;break;
     45e:	e2 e0       	ldi	r30, 0x02	; 2
     460:	03 c0       	rjmp	.+6      	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
				case (1<<3) :gety=3;break;
     462:	e3 e0       	ldi	r30, 0x03	; 3
     464:	01 c0       	rjmp	.+2      	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
			PORTB=0b00001111;
			
			pin=~(PINB|0xF0);
			
			switch(pin){
				case (1<<0) :gety=0;break;
     466:	e0 e0       	ldi	r30, 0x00	; 0
				case (1<<2) :gety=2;break;
				case (1<<3) :gety=3;break;
				
			} //switch
			
			DDRB=0b00001111;
     468:	8f e0       	ldi	r24, 0x0F	; 15
     46a:	87 bb       	out	0x17, r24	; 23
			PORTB=0b11110000;
     46c:	80 ef       	ldi	r24, 0xF0	; 240
     46e:	88 bb       	out	0x18, r24	; 24
			
			
			return kaypad[gety][getx];
     470:	f0 e0       	ldi	r31, 0x00	; 0
     472:	ee 0f       	add	r30, r30
     474:	ff 1f       	adc	r31, r31
     476:	ee 0f       	add	r30, r30
     478:	ff 1f       	adc	r31, r31
     47a:	eb 5c       	subi	r30, 0xCB	; 203
     47c:	fd 4f       	sbci	r31, 0xFD	; 253
     47e:	e9 0f       	add	r30, r25
     480:	f1 1d       	adc	r31, r1
		}//if
		
		
		
	}//while 1
}
     482:	80 81       	ld	r24, Z
     484:	08 95       	ret

00000486 <Addtime>:
	{AddWeight(pos);
	}
	
}

void Addtime(uint8_t val){
     486:	ef 92       	push	r14
     488:	ff 92       	push	r15
     48a:	0f 93       	push	r16
     48c:	1f 93       	push	r17
     48e:	cf 93       	push	r28
     490:	df 93       	push	r29
     492:	cd b7       	in	r28, 0x3d	; 61
     494:	de b7       	in	r29, 0x3e	; 62
     496:	2c 97       	sbiw	r28, 0x0c	; 12
     498:	0f b6       	in	r0, 0x3f	; 63
     49a:	f8 94       	cli
     49c:	de bf       	out	0x3e, r29	; 62
     49e:	0f be       	out	0x3f, r0	; 63
     4a0:	cd bf       	out	0x3d, r28	; 61
     4a2:	08 2f       	mov	r16, r24
	LcdCommand(LCD_CLEARDISPLAY);
     4a4:	81 e0       	ldi	r24, 0x01	; 1
     4a6:	0e 94 4d 01 	call	0x29a	; 0x29a <LcdCommand>
	LcdSetCursor(0,0,"Enter time");
     4aa:	47 e9       	ldi	r20, 0x97	; 151
     4ac:	50 e0       	ldi	r21, 0x00	; 0
     4ae:	60 e0       	ldi	r22, 0x00	; 0
     4b0:	80 e0       	ldi	r24, 0x00	; 0
     4b2:	0e 94 9d 01 	call	0x33a	; 0x33a <LcdSetCursor>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4b6:	2f ef       	ldi	r18, 0xFF	; 255
     4b8:	34 e3       	ldi	r19, 0x34	; 52
     4ba:	4c e0       	ldi	r20, 0x0C	; 12
     4bc:	21 50       	subi	r18, 0x01	; 1
     4be:	30 40       	sbci	r19, 0x00	; 0
     4c0:	40 40       	sbci	r20, 0x00	; 0
     4c2:	e1 f7       	brne	.-8      	; 0x4bc <Addtime+0x36>
     4c4:	00 c0       	rjmp	.+0      	; 0x4c6 <Addtime+0x40>
     4c6:	00 00       	nop
	_delay_ms(500);
	uint8_t pos=0;
	uint8_t numbers[4]={0,0,0,0};
     4c8:	19 82       	std	Y+1, r1	; 0x01
     4ca:	1a 82       	std	Y+2, r1	; 0x02
     4cc:	1b 82       	std	Y+3, r1	; 0x03
     4ce:	1c 82       	std	Y+4, r1	; 0x04
	uint8_t posData[4][2]={{0,2},{1,9},{3,5},{4,9}};
     4d0:	88 e0       	ldi	r24, 0x08	; 8
     4d2:	e3 e7       	ldi	r30, 0x73	; 115
     4d4:	f0 e0       	ldi	r31, 0x00	; 0
     4d6:	de 01       	movw	r26, r28
     4d8:	15 96       	adiw	r26, 0x05	; 5
     4da:	01 90       	ld	r0, Z+
     4dc:	0d 92       	st	X+, r0
     4de:	8a 95       	dec	r24
     4e0:	e1 f7       	brne	.-8      	; 0x4da <Addtime+0x54>
	
	
	sprintf(lcddata,"%u%u:%u%u",numbers[0],numbers[1],numbers[2],numbers[3]);
     4e2:	1f 92       	push	r1
     4e4:	1f 92       	push	r1
     4e6:	1f 92       	push	r1
     4e8:	1f 92       	push	r1
     4ea:	1f 92       	push	r1
     4ec:	1f 92       	push	r1
     4ee:	1f 92       	push	r1
     4f0:	1f 92       	push	r1
     4f2:	88 ee       	ldi	r24, 0xE8	; 232
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	9f 93       	push	r25
     4f8:	8f 93       	push	r24
     4fa:	8f e5       	ldi	r24, 0x5F	; 95
     4fc:	92 e0       	ldi	r25, 0x02	; 2
     4fe:	9f 93       	push	r25
     500:	8f 93       	push	r24
     502:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <sprintf>
	LcdSetCursor(0,1,lcddata);
     506:	4f e5       	ldi	r20, 0x5F	; 95
     508:	52 e0       	ldi	r21, 0x02	; 2
     50a:	61 e0       	ldi	r22, 0x01	; 1
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	0e 94 9d 01 	call	0x33a	; 0x33a <LcdSetCursor>
	LcdSetCursor(pos,1,"");
     512:	47 e4       	ldi	r20, 0x47	; 71
     514:	51 e0       	ldi	r21, 0x01	; 1
     516:	61 e0       	ldi	r22, 0x01	; 1
     518:	80 e0       	ldi	r24, 0x00	; 0
     51a:	0e 94 9d 01 	call	0x33a	; 0x33a <LcdSetCursor>
	LcdCommand(LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_BLINKON);
     51e:	8d e0       	ldi	r24, 0x0D	; 13
     520:	0e 94 4d 01 	call	0x29a	; 0x29a <LcdCommand>
     524:	0f b6       	in	r0, 0x3f	; 63
     526:	f8 94       	cli
     528:	de bf       	out	0x3e, r29	; 62
     52a:	0f be       	out	0x3f, r0	; 63
     52c:	cd bf       	out	0x3d, r28	; 61

void Addtime(uint8_t val){
	LcdCommand(LCD_CLEARDISPLAY);
	LcdSetCursor(0,0,"Enter time");
	_delay_ms(500);
	uint8_t pos=0;
     52e:	10 e0       	ldi	r17, 0x00	; 0
	LcdSetCursor(0,1,lcddata);
	LcdSetCursor(pos,1,"");
	LcdCommand(LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_BLINKON);
	
	while(1){
		uint8_t keyout=getkeyNum();
     530:	0e 94 ff 01 	call	0x3fe	; 0x3fe <getkeyNum>
		
		if (keyout<=posData[pos][1])
     534:	21 2f       	mov	r18, r17
     536:	30 e0       	ldi	r19, 0x00	; 0
     538:	f9 01       	movw	r30, r18
     53a:	ee 0f       	add	r30, r30
     53c:	ff 1f       	adc	r31, r31
     53e:	41 e0       	ldi	r20, 0x01	; 1
     540:	50 e0       	ldi	r21, 0x00	; 0
     542:	4c 0f       	add	r20, r28
     544:	5d 1f       	adc	r21, r29
     546:	e4 0f       	add	r30, r20
     548:	f5 1f       	adc	r31, r21
     54a:	95 81       	ldd	r25, Z+5	; 0x05
     54c:	98 17       	cp	r25, r24
     54e:	08 f4       	brcc	.+2      	; 0x552 <Addtime+0xcc>
     550:	43 c0       	rjmp	.+134    	; 0x5d8 <Addtime+0x152>
		{
			numbers[pos]=keyout;
     552:	fa 01       	movw	r30, r20
     554:	e2 0f       	add	r30, r18
     556:	f3 1f       	adc	r31, r19
     558:	80 83       	st	Z, r24
			sprintf(lcddata,"%u%u:%u%u",numbers[0],numbers[1],numbers[2],numbers[3]);
     55a:	3c 81       	ldd	r19, Y+4	; 0x04
     55c:	2b 81       	ldd	r18, Y+3	; 0x03
     55e:	9a 81       	ldd	r25, Y+2	; 0x02
     560:	89 81       	ldd	r24, Y+1	; 0x01
     562:	1f 92       	push	r1
     564:	3f 93       	push	r19
     566:	1f 92       	push	r1
     568:	2f 93       	push	r18
     56a:	1f 92       	push	r1
     56c:	9f 93       	push	r25
     56e:	1f 92       	push	r1
     570:	8f 93       	push	r24
     572:	88 ee       	ldi	r24, 0xE8	; 232
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	9f 93       	push	r25
     578:	8f 93       	push	r24
     57a:	8f e5       	ldi	r24, 0x5F	; 95
     57c:	92 e0       	ldi	r25, 0x02	; 2
     57e:	9f 93       	push	r25
     580:	8f 93       	push	r24
     582:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <sprintf>
			LcdSetCursor(0,1,lcddata);
     586:	4f e5       	ldi	r20, 0x5F	; 95
     588:	52 e0       	ldi	r21, 0x02	; 2
     58a:	61 e0       	ldi	r22, 0x01	; 1
     58c:	80 e0       	ldi	r24, 0x00	; 0
     58e:	0e 94 9d 01 	call	0x33a	; 0x33a <LcdSetCursor>
			pos++;
     592:	1f 5f       	subi	r17, 0xFF	; 255
			if (pos>3)
     594:	0f b6       	in	r0, 0x3f	; 63
     596:	f8 94       	cli
     598:	de bf       	out	0x3e, r29	; 62
     59a:	0f be       	out	0x3f, r0	; 63
     59c:	cd bf       	out	0x3d, r28	; 61
     59e:	14 30       	cpi	r17, 0x04	; 4
     5a0:	08 f0       	brcs	.+2      	; 0x5a4 <Addtime+0x11e>
			{pos=0;
     5a2:	10 e0       	ldi	r17, 0x00	; 0
			}
			LcdSetCursor(posData[pos][0],1,"");
     5a4:	e1 2f       	mov	r30, r17
     5a6:	f0 e0       	ldi	r31, 0x00	; 0
     5a8:	ee 0f       	add	r30, r30
     5aa:	ff 1f       	adc	r31, r31
     5ac:	21 e0       	ldi	r18, 0x01	; 1
     5ae:	30 e0       	ldi	r19, 0x00	; 0
     5b0:	2c 0f       	add	r18, r28
     5b2:	3d 1f       	adc	r19, r29
     5b4:	e2 0f       	add	r30, r18
     5b6:	f3 1f       	adc	r31, r19
     5b8:	47 e4       	ldi	r20, 0x47	; 71
     5ba:	51 e0       	ldi	r21, 0x01	; 1
     5bc:	61 e0       	ldi	r22, 0x01	; 1
     5be:	84 81       	ldd	r24, Z+4	; 0x04
     5c0:	0e 94 9d 01 	call	0x33a	; 0x33a <LcdSetCursor>
     5c4:	3f ef       	ldi	r19, 0xFF	; 255
     5c6:	41 ee       	ldi	r20, 0xE1	; 225
     5c8:	54 e0       	ldi	r21, 0x04	; 4
     5ca:	31 50       	subi	r19, 0x01	; 1
     5cc:	40 40       	sbci	r20, 0x00	; 0
     5ce:	50 40       	sbci	r21, 0x00	; 0
     5d0:	e1 f7       	brne	.-8      	; 0x5ca <Addtime+0x144>
     5d2:	00 c0       	rjmp	.+0      	; 0x5d4 <Addtime+0x14e>
     5d4:	00 00       	nop
     5d6:	ac cf       	rjmp	.-168    	; 0x530 <Addtime+0xaa>
			_delay_ms(200);
		}
		
		else if (keyout==14)
     5d8:	8e 30       	cpi	r24, 0x0E	; 14
     5da:	09 f0       	breq	.+2      	; 0x5de <Addtime+0x158>
     5dc:	a9 cf       	rjmp	.-174    	; 0x530 <Addtime+0xaa>
		{
		LcdCommand(LCD_CLEARDISPLAY);
     5de:	81 e0       	ldi	r24, 0x01	; 1
     5e0:	0e 94 4d 01 	call	0x29a	; 0x29a <LcdCommand>
		LcdCommand(LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_BLINKOFF);
     5e4:	8c e0       	ldi	r24, 0x0C	; 12
     5e6:	0e 94 4d 01 	call	0x29a	; 0x29a <LcdCommand>
		LcdSetCursor(0,0,"Time Added");
     5ea:	42 ea       	ldi	r20, 0xA2	; 162
     5ec:	50 e0       	ldi	r21, 0x00	; 0
     5ee:	60 e0       	ldi	r22, 0x00	; 0
     5f0:	80 e0       	ldi	r24, 0x00	; 0
     5f2:	0e 94 9d 01 	call	0x33a	; 0x33a <LcdSetCursor>
		feedingTimes[val][0]=numbers[0]*10+numbers[1];
     5f6:	80 2f       	mov	r24, r16
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	29 81       	ldd	r18, Y+1	; 0x01
     5fc:	3a 81       	ldd	r19, Y+2	; 0x02
     5fe:	8c 01       	movw	r16, r24
     600:	00 0f       	add	r16, r16
     602:	11 1f       	adc	r17, r17
     604:	04 5b       	subi	r16, 0xB4	; 180
     606:	1d 4f       	sbci	r17, 0xFD	; 253
     608:	22 0f       	add	r18, r18
     60a:	42 2f       	mov	r20, r18
     60c:	44 0f       	add	r20, r20
     60e:	44 0f       	add	r20, r20
     610:	24 0f       	add	r18, r20
     612:	23 0f       	add	r18, r19
     614:	f8 01       	movw	r30, r16
     616:	20 83       	st	Z, r18
		feedingTimes[val][1]=numbers[2]*10+numbers[3];
     618:	2b 81       	ldd	r18, Y+3	; 0x03
     61a:	3c 81       	ldd	r19, Y+4	; 0x04
     61c:	22 0f       	add	r18, r18
     61e:	42 2f       	mov	r20, r18
     620:	44 0f       	add	r20, r20
     622:	44 0f       	add	r20, r20
     624:	24 0f       	add	r18, r20
     626:	23 0f       	add	r18, r19
     628:	21 83       	std	Z+1, r18	; 0x01
		eeprom_write_byte((uint8_t*)feedingdataAdress[val],feedingTimes[val][0]);
     62a:	9c 01       	movw	r18, r24
     62c:	20 5a       	subi	r18, 0xA0	; 160
     62e:	3f 4f       	sbci	r19, 0xFF	; 255
     630:	79 01       	movw	r14, r18
     632:	f9 01       	movw	r30, r18
     634:	80 81       	ld	r24, Z
     636:	f8 01       	movw	r30, r16
     638:	60 81       	ld	r22, Z
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <eeprom_write_byte>
		eeprom_write_byte((uint8_t*)feedingdataAdress[val]+1,feedingTimes[val][1]);
     640:	f7 01       	movw	r30, r14
     642:	80 81       	ld	r24, Z
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	f8 01       	movw	r30, r16
     648:	61 81       	ldd	r22, Z+1	; 0x01
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <eeprom_write_byte>
     650:	ff ef       	ldi	r31, 0xFF	; 255
     652:	24 e3       	ldi	r18, 0x34	; 52
     654:	3c e0       	ldi	r19, 0x0C	; 12
     656:	f1 50       	subi	r31, 0x01	; 1
     658:	20 40       	sbci	r18, 0x00	; 0
     65a:	30 40       	sbci	r19, 0x00	; 0
     65c:	e1 f7       	brne	.-8      	; 0x656 <Addtime+0x1d0>
     65e:	00 c0       	rjmp	.+0      	; 0x660 <Addtime+0x1da>
     660:	00 00       	nop
		_delay_ms(500);
		break;
		}
	}
	
}
     662:	2c 96       	adiw	r28, 0x0c	; 12
     664:	0f b6       	in	r0, 0x3f	; 63
     666:	f8 94       	cli
     668:	de bf       	out	0x3e, r29	; 62
     66a:	0f be       	out	0x3f, r0	; 63
     66c:	cd bf       	out	0x3d, r28	; 61
     66e:	df 91       	pop	r29
     670:	cf 91       	pop	r28
     672:	1f 91       	pop	r17
     674:	0f 91       	pop	r16
     676:	ff 90       	pop	r15
     678:	ef 90       	pop	r14
     67a:	08 95       	ret

0000067c <AddWeight>:
void AddWeight(){
     67c:	1f 93       	push	r17
     67e:	cf 93       	push	r28
     680:	df 93       	push	r29
     682:	cd b7       	in	r28, 0x3d	; 61
     684:	de b7       	in	r29, 0x3e	; 62
     686:	2c 97       	sbiw	r28, 0x0c	; 12
     688:	0f b6       	in	r0, 0x3f	; 63
     68a:	f8 94       	cli
     68c:	de bf       	out	0x3e, r29	; 62
     68e:	0f be       	out	0x3f, r0	; 63
     690:	cd bf       	out	0x3d, r28	; 61
LcdCommand(LCD_CLEARDISPLAY);
     692:	81 e0       	ldi	r24, 0x01	; 1
     694:	0e 94 4d 01 	call	0x29a	; 0x29a <LcdCommand>
LcdSetCursor(0,0,"Enter Weight");
     698:	4d ea       	ldi	r20, 0xAD	; 173
     69a:	50 e0       	ldi	r21, 0x00	; 0
     69c:	60 e0       	ldi	r22, 0x00	; 0
     69e:	80 e0       	ldi	r24, 0x00	; 0
     6a0:	0e 94 9d 01 	call	0x33a	; 0x33a <LcdSetCursor>
     6a4:	2f ef       	ldi	r18, 0xFF	; 255
     6a6:	44 e3       	ldi	r20, 0x34	; 52
     6a8:	5c e0       	ldi	r21, 0x0C	; 12
     6aa:	21 50       	subi	r18, 0x01	; 1
     6ac:	40 40       	sbci	r20, 0x00	; 0
     6ae:	50 40       	sbci	r21, 0x00	; 0
     6b0:	e1 f7       	brne	.-8      	; 0x6aa <AddWeight+0x2e>
     6b2:	00 c0       	rjmp	.+0      	; 0x6b4 <AddWeight+0x38>
     6b4:	00 00       	nop
_delay_ms(500);
uint8_t pos=0;
uint8_t numbers[4]={0,0,0,0};
     6b6:	19 82       	std	Y+1, r1	; 0x01
     6b8:	1a 82       	std	Y+2, r1	; 0x02
     6ba:	1b 82       	std	Y+3, r1	; 0x03
     6bc:	1c 82       	std	Y+4, r1	; 0x04
uint8_t posData[4][2]={{0,9},{1,9},{2,9},{3,9}};
     6be:	88 e0       	ldi	r24, 0x08	; 8
     6c0:	eb e7       	ldi	r30, 0x7B	; 123
     6c2:	f0 e0       	ldi	r31, 0x00	; 0
     6c4:	de 01       	movw	r26, r28
     6c6:	15 96       	adiw	r26, 0x05	; 5
     6c8:	01 90       	ld	r0, Z+
     6ca:	0d 92       	st	X+, r0
     6cc:	8a 95       	dec	r24
     6ce:	e1 f7       	brne	.-8      	; 0x6c8 <AddWeight+0x4c>


sprintf(lcddata,"%u%u%u%ug",numbers[0],numbers[1],numbers[2],numbers[3]);
     6d0:	1f 92       	push	r1
     6d2:	1f 92       	push	r1
     6d4:	1f 92       	push	r1
     6d6:	1f 92       	push	r1
     6d8:	1f 92       	push	r1
     6da:	1f 92       	push	r1
     6dc:	1f 92       	push	r1
     6de:	1f 92       	push	r1
     6e0:	8a eb       	ldi	r24, 0xBA	; 186
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	9f 93       	push	r25
     6e6:	8f 93       	push	r24
     6e8:	8f e5       	ldi	r24, 0x5F	; 95
     6ea:	92 e0       	ldi	r25, 0x02	; 2
     6ec:	9f 93       	push	r25
     6ee:	8f 93       	push	r24
     6f0:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <sprintf>
LcdSetCursor(0,1,lcddata);
     6f4:	4f e5       	ldi	r20, 0x5F	; 95
     6f6:	52 e0       	ldi	r21, 0x02	; 2
     6f8:	61 e0       	ldi	r22, 0x01	; 1
     6fa:	80 e0       	ldi	r24, 0x00	; 0
     6fc:	0e 94 9d 01 	call	0x33a	; 0x33a <LcdSetCursor>
LcdSetCursor(pos,1,"");
     700:	47 e4       	ldi	r20, 0x47	; 71
     702:	51 e0       	ldi	r21, 0x01	; 1
     704:	61 e0       	ldi	r22, 0x01	; 1
     706:	80 e0       	ldi	r24, 0x00	; 0
     708:	0e 94 9d 01 	call	0x33a	; 0x33a <LcdSetCursor>
LcdCommand(LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_BLINKON);
     70c:	8d e0       	ldi	r24, 0x0D	; 13
     70e:	0e 94 4d 01 	call	0x29a	; 0x29a <LcdCommand>
     712:	0f b6       	in	r0, 0x3f	; 63
     714:	f8 94       	cli
     716:	de bf       	out	0x3e, r29	; 62
     718:	0f be       	out	0x3f, r0	; 63
     71a:	cd bf       	out	0x3d, r28	; 61
}
void AddWeight(){
LcdCommand(LCD_CLEARDISPLAY);
LcdSetCursor(0,0,"Enter Weight");
_delay_ms(500);
uint8_t pos=0;
     71c:	10 e0       	ldi	r17, 0x00	; 0
LcdSetCursor(0,1,lcddata);
LcdSetCursor(pos,1,"");
LcdCommand(LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_BLINKON);

while(1){
	uint8_t keyout=getkeyNum();
     71e:	0e 94 ff 01 	call	0x3fe	; 0x3fe <getkeyNum>
	
	if (keyout<=posData[pos][1])
     722:	21 2f       	mov	r18, r17
     724:	30 e0       	ldi	r19, 0x00	; 0
     726:	f9 01       	movw	r30, r18
     728:	ee 0f       	add	r30, r30
     72a:	ff 1f       	adc	r31, r31
     72c:	41 e0       	ldi	r20, 0x01	; 1
     72e:	50 e0       	ldi	r21, 0x00	; 0
     730:	4c 0f       	add	r20, r28
     732:	5d 1f       	adc	r21, r29
     734:	e4 0f       	add	r30, r20
     736:	f5 1f       	adc	r31, r21
     738:	95 81       	ldd	r25, Z+5	; 0x05
     73a:	98 17       	cp	r25, r24
     73c:	08 f4       	brcc	.+2      	; 0x740 <AddWeight+0xc4>
     73e:	43 c0       	rjmp	.+134    	; 0x7c6 <AddWeight+0x14a>
	{
		numbers[pos]=keyout;
     740:	fa 01       	movw	r30, r20
     742:	e2 0f       	add	r30, r18
     744:	f3 1f       	adc	r31, r19
     746:	80 83       	st	Z, r24
		sprintf(lcddata,"%u%u%u%ug",numbers[0],numbers[1],numbers[2],numbers[3]);
     748:	3c 81       	ldd	r19, Y+4	; 0x04
     74a:	2b 81       	ldd	r18, Y+3	; 0x03
     74c:	9a 81       	ldd	r25, Y+2	; 0x02
     74e:	89 81       	ldd	r24, Y+1	; 0x01
     750:	1f 92       	push	r1
     752:	3f 93       	push	r19
     754:	1f 92       	push	r1
     756:	2f 93       	push	r18
     758:	1f 92       	push	r1
     75a:	9f 93       	push	r25
     75c:	1f 92       	push	r1
     75e:	8f 93       	push	r24
     760:	8a eb       	ldi	r24, 0xBA	; 186
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	9f 93       	push	r25
     766:	8f 93       	push	r24
     768:	8f e5       	ldi	r24, 0x5F	; 95
     76a:	92 e0       	ldi	r25, 0x02	; 2
     76c:	9f 93       	push	r25
     76e:	8f 93       	push	r24
     770:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <sprintf>
		LcdSetCursor(0,1,lcddata);
     774:	4f e5       	ldi	r20, 0x5F	; 95
     776:	52 e0       	ldi	r21, 0x02	; 2
     778:	61 e0       	ldi	r22, 0x01	; 1
     77a:	80 e0       	ldi	r24, 0x00	; 0
     77c:	0e 94 9d 01 	call	0x33a	; 0x33a <LcdSetCursor>
		pos++;
     780:	1f 5f       	subi	r17, 0xFF	; 255
		if (pos>3)
     782:	0f b6       	in	r0, 0x3f	; 63
     784:	f8 94       	cli
     786:	de bf       	out	0x3e, r29	; 62
     788:	0f be       	out	0x3f, r0	; 63
     78a:	cd bf       	out	0x3d, r28	; 61
     78c:	14 30       	cpi	r17, 0x04	; 4
     78e:	08 f0       	brcs	.+2      	; 0x792 <AddWeight+0x116>
		{pos=0;
     790:	10 e0       	ldi	r17, 0x00	; 0
		}
		LcdSetCursor(posData[pos][0],1,"");
     792:	e1 2f       	mov	r30, r17
     794:	f0 e0       	ldi	r31, 0x00	; 0
     796:	ee 0f       	add	r30, r30
     798:	ff 1f       	adc	r31, r31
     79a:	41 e0       	ldi	r20, 0x01	; 1
     79c:	50 e0       	ldi	r21, 0x00	; 0
     79e:	4c 0f       	add	r20, r28
     7a0:	5d 1f       	adc	r21, r29
     7a2:	e4 0f       	add	r30, r20
     7a4:	f5 1f       	adc	r31, r21
     7a6:	47 e4       	ldi	r20, 0x47	; 71
     7a8:	51 e0       	ldi	r21, 0x01	; 1
     7aa:	61 e0       	ldi	r22, 0x01	; 1
     7ac:	84 81       	ldd	r24, Z+4	; 0x04
     7ae:	0e 94 9d 01 	call	0x33a	; 0x33a <LcdSetCursor>
     7b2:	5f ef       	ldi	r21, 0xFF	; 255
     7b4:	81 ee       	ldi	r24, 0xE1	; 225
     7b6:	94 e0       	ldi	r25, 0x04	; 4
     7b8:	51 50       	subi	r21, 0x01	; 1
     7ba:	80 40       	sbci	r24, 0x00	; 0
     7bc:	90 40       	sbci	r25, 0x00	; 0
     7be:	e1 f7       	brne	.-8      	; 0x7b8 <AddWeight+0x13c>
     7c0:	00 c0       	rjmp	.+0      	; 0x7c2 <AddWeight+0x146>
     7c2:	00 00       	nop
     7c4:	ac cf       	rjmp	.-168    	; 0x71e <AddWeight+0xa2>
		_delay_ms(200);
	}
	
	else if (keyout==14)
     7c6:	8e 30       	cpi	r24, 0x0E	; 14
     7c8:	09 f0       	breq	.+2      	; 0x7cc <AddWeight+0x150>
     7ca:	a9 cf       	rjmp	.-174    	; 0x71e <AddWeight+0xa2>
	{
		LcdCommand(LCD_CLEARDISPLAY);
     7cc:	81 e0       	ldi	r24, 0x01	; 1
     7ce:	0e 94 4d 01 	call	0x29a	; 0x29a <LcdCommand>
		LcdCommand(LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_BLINKOFF);
     7d2:	8c e0       	ldi	r24, 0x0C	; 12
     7d4:	0e 94 4d 01 	call	0x29a	; 0x29a <LcdCommand>
		LcdSetCursor(0,0,"Weight Added");
     7d8:	44 ec       	ldi	r20, 0xC4	; 196
     7da:	50 e0       	ldi	r21, 0x00	; 0
     7dc:	60 e0       	ldi	r22, 0x00	; 0
     7de:	80 e0       	ldi	r24, 0x00	; 0
     7e0:	0e 94 9d 01 	call	0x33a	; 0x33a <LcdSetCursor>
		feedingWeight=(numbers[0]*1000)+(numbers[1]*100)+(numbers[2]*10)+numbers[3];
     7e4:	29 81       	ldd	r18, Y+1	; 0x01
     7e6:	88 ee       	ldi	r24, 0xE8	; 232
     7e8:	93 e0       	ldi	r25, 0x03	; 3
     7ea:	28 9f       	mul	r18, r24
     7ec:	b0 01       	movw	r22, r0
     7ee:	29 9f       	mul	r18, r25
     7f0:	70 0d       	add	r23, r0
     7f2:	11 24       	eor	r1, r1
     7f4:	8a 81       	ldd	r24, Y+2	; 0x02
     7f6:	24 e6       	ldi	r18, 0x64	; 100
     7f8:	82 9f       	mul	r24, r18
     7fa:	60 0d       	add	r22, r0
     7fc:	71 1d       	adc	r23, r1
     7fe:	11 24       	eor	r1, r1
     800:	8b 81       	ldd	r24, Y+3	; 0x03
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	9c 01       	movw	r18, r24
     806:	22 0f       	add	r18, r18
     808:	33 1f       	adc	r19, r19
     80a:	88 0f       	add	r24, r24
     80c:	99 1f       	adc	r25, r25
     80e:	88 0f       	add	r24, r24
     810:	99 1f       	adc	r25, r25
     812:	88 0f       	add	r24, r24
     814:	99 1f       	adc	r25, r25
     816:	82 0f       	add	r24, r18
     818:	93 1f       	adc	r25, r19
     81a:	68 0f       	add	r22, r24
     81c:	79 1f       	adc	r23, r25
     81e:	8c 81       	ldd	r24, Y+4	; 0x04
     820:	68 0f       	add	r22, r24
     822:	71 1d       	adc	r23, r1
     824:	70 93 4b 02 	sts	0x024B, r23	; 0x80024b <feedingWeight+0x1>
     828:	60 93 4a 02 	sts	0x024A, r22	; 0x80024a <feedingWeight>
		eeprom_write_word((uint16_t*)WeightDataAdress,feedingWeight);
     82c:	86 e0       	ldi	r24, 0x06	; 6
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	0e 94 05 12 	call	0x240a	; 0x240a <eeprom_write_word>
     834:	4f ef       	ldi	r20, 0xFF	; 255
     836:	54 e3       	ldi	r21, 0x34	; 52
     838:	8c e0       	ldi	r24, 0x0C	; 12
     83a:	41 50       	subi	r20, 0x01	; 1
     83c:	50 40       	sbci	r21, 0x00	; 0
     83e:	80 40       	sbci	r24, 0x00	; 0
     840:	e1 f7       	brne	.-8      	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
     842:	00 c0       	rjmp	.+0      	; 0x844 <__DATA_REGION_LENGTH__+0x44>
     844:	00 00       	nop
		_delay_ms(500);
		break;
	}
}	
}
     846:	2c 96       	adiw	r28, 0x0c	; 12
     848:	0f b6       	in	r0, 0x3f	; 63
     84a:	f8 94       	cli
     84c:	de bf       	out	0x3e, r29	; 62
     84e:	0f be       	out	0x3f, r0	; 63
     850:	cd bf       	out	0x3d, r28	; 61
     852:	df 91       	pop	r29
     854:	cf 91       	pop	r28
     856:	1f 91       	pop	r17
     858:	08 95       	ret

0000085a <setTime>:


void setTime(uint8_t hSet,uint8_t mSet,uint8_t sSet){
     85a:	0f 93       	push	r16
     85c:	1f 93       	push	r17
     85e:	cf 93       	push	r28
     860:	df 93       	push	r29
     862:	08 2f       	mov	r16, r24
     864:	16 2f       	mov	r17, r22
     866:	d4 2f       	mov	r29, r20
	TWIStart();
     868:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <TWIStart>
	TWIWriteAddrs(104,0);
     86c:	60 e0       	ldi	r22, 0x00	; 0
     86e:	88 e6       	ldi	r24, 0x68	; 104
     870:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <TWIWriteAddrs>
	TWIWriteData(0x02);
     874:	82 e0       	ldi	r24, 0x02	; 2
     876:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <TWIWriteData>
	TWIWriteData(((hSet/10)<<4)|(hSet%10));
     87a:	cd ec       	ldi	r28, 0xCD	; 205
     87c:	0c 9f       	mul	r16, r28
     87e:	91 2d       	mov	r25, r1
     880:	11 24       	eor	r1, r1
     882:	96 95       	lsr	r25
     884:	96 95       	lsr	r25
     886:	96 95       	lsr	r25
     888:	20 e1       	ldi	r18, 0x10	; 16
     88a:	92 9f       	mul	r25, r18
     88c:	a0 01       	movw	r20, r0
     88e:	11 24       	eor	r1, r1
     890:	99 0f       	add	r25, r25
     892:	29 2f       	mov	r18, r25
     894:	22 0f       	add	r18, r18
     896:	22 0f       	add	r18, r18
     898:	92 0f       	add	r25, r18
     89a:	80 2f       	mov	r24, r16
     89c:	89 1b       	sub	r24, r25
     89e:	84 2b       	or	r24, r20
     8a0:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <TWIWriteData>
	TWIStop();
     8a4:	0e 94 d6 00 	call	0x1ac	; 0x1ac <TWIStop>
	
	TWIStart();
     8a8:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <TWIStart>
	TWIWriteAddrs(104,0);
     8ac:	60 e0       	ldi	r22, 0x00	; 0
     8ae:	88 e6       	ldi	r24, 0x68	; 104
     8b0:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <TWIWriteAddrs>
	TWIWriteData(0x01);
     8b4:	81 e0       	ldi	r24, 0x01	; 1
     8b6:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <TWIWriteData>
	TWIWriteData(((mSet/10)<<4)|(mSet%10));
     8ba:	1c 9f       	mul	r17, r28
     8bc:	91 2d       	mov	r25, r1
     8be:	11 24       	eor	r1, r1
     8c0:	96 95       	lsr	r25
     8c2:	96 95       	lsr	r25
     8c4:	96 95       	lsr	r25
     8c6:	80 e1       	ldi	r24, 0x10	; 16
     8c8:	98 9f       	mul	r25, r24
     8ca:	a0 01       	movw	r20, r0
     8cc:	11 24       	eor	r1, r1
     8ce:	99 0f       	add	r25, r25
     8d0:	29 2f       	mov	r18, r25
     8d2:	22 0f       	add	r18, r18
     8d4:	22 0f       	add	r18, r18
     8d6:	92 0f       	add	r25, r18
     8d8:	81 2f       	mov	r24, r17
     8da:	89 1b       	sub	r24, r25
     8dc:	84 2b       	or	r24, r20
     8de:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <TWIWriteData>
	TWIStop();
     8e2:	0e 94 d6 00 	call	0x1ac	; 0x1ac <TWIStop>
	
	TWIStart();
     8e6:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <TWIStart>
	TWIWriteAddrs(104,0);
     8ea:	60 e0       	ldi	r22, 0x00	; 0
     8ec:	88 e6       	ldi	r24, 0x68	; 104
     8ee:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <TWIWriteAddrs>
	TWIWriteData(0x00);
     8f2:	80 e0       	ldi	r24, 0x00	; 0
     8f4:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <TWIWriteData>
	TWIWriteData(((sSet/10)<<4)|(sSet%10));
     8f8:	dc 9f       	mul	r29, r28
     8fa:	c1 2d       	mov	r28, r1
     8fc:	11 24       	eor	r1, r1
     8fe:	c6 95       	lsr	r28
     900:	c6 95       	lsr	r28
     902:	c6 95       	lsr	r28
     904:	20 e1       	ldi	r18, 0x10	; 16
     906:	c2 9f       	mul	r28, r18
     908:	c0 01       	movw	r24, r0
     90a:	11 24       	eor	r1, r1
     90c:	cc 0f       	add	r28, r28
     90e:	9c 2f       	mov	r25, r28
     910:	99 0f       	add	r25, r25
     912:	99 0f       	add	r25, r25
     914:	c9 0f       	add	r28, r25
     916:	dc 1b       	sub	r29, r28
     918:	8d 2b       	or	r24, r29
     91a:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <TWIWriteData>
	TWIStop();
     91e:	0e 94 d6 00 	call	0x1ac	; 0x1ac <TWIStop>

	
}
     922:	df 91       	pop	r29
     924:	cf 91       	pop	r28
     926:	1f 91       	pop	r17
     928:	0f 91       	pop	r16
     92a:	08 95       	ret

0000092c <setOngoingTime>:
		
		
	}//while 1
}

void setOngoingTime(){
     92c:	1f 93       	push	r17
     92e:	cf 93       	push	r28
     930:	df 93       	push	r29
     932:	cd b7       	in	r28, 0x3d	; 61
     934:	de b7       	in	r29, 0x3e	; 62
     936:	62 97       	sbiw	r28, 0x12	; 18
     938:	0f b6       	in	r0, 0x3f	; 63
     93a:	f8 94       	cli
     93c:	de bf       	out	0x3e, r29	; 62
     93e:	0f be       	out	0x3f, r0	; 63
     940:	cd bf       	out	0x3d, r28	; 61
	LcdCommand(LCD_CLEARDISPLAY);
     942:	81 e0       	ldi	r24, 0x01	; 1
     944:	0e 94 4d 01 	call	0x29a	; 0x29a <LcdCommand>
	LcdSetCursor(0,0,"Add current Time ");
     948:	41 ed       	ldi	r20, 0xD1	; 209
     94a:	50 e0       	ldi	r21, 0x00	; 0
     94c:	60 e0       	ldi	r22, 0x00	; 0
     94e:	80 e0       	ldi	r24, 0x00	; 0
     950:	0e 94 9d 01 	call	0x33a	; 0x33a <LcdSetCursor>
     954:	2f ef       	ldi	r18, 0xFF	; 255
     956:	44 e3       	ldi	r20, 0x34	; 52
     958:	5c e0       	ldi	r21, 0x0C	; 12
     95a:	21 50       	subi	r18, 0x01	; 1
     95c:	40 40       	sbci	r20, 0x00	; 0
     95e:	50 40       	sbci	r21, 0x00	; 0
     960:	e1 f7       	brne	.-8      	; 0x95a <setOngoingTime+0x2e>
     962:	00 c0       	rjmp	.+0      	; 0x964 <setOngoingTime+0x38>
     964:	00 00       	nop
	_delay_ms(500);
	
	uint8_t pos=0;
	uint8_t numbers[6]={0,0,0,0,0,0};
     966:	fe 01       	movw	r30, r28
     968:	31 96       	adiw	r30, 0x01	; 1
     96a:	86 e0       	ldi	r24, 0x06	; 6
     96c:	df 01       	movw	r26, r30
     96e:	1d 92       	st	X+, r1
     970:	8a 95       	dec	r24
     972:	e9 f7       	brne	.-6      	; 0x96e <setOngoingTime+0x42>
	uint8_t posData[6][2]={{0,2},{1,9},{3,5},{4,9},{6,7},{7,9}};
     974:	8c e0       	ldi	r24, 0x0C	; 12
     976:	e3 e8       	ldi	r30, 0x83	; 131
     978:	f0 e0       	ldi	r31, 0x00	; 0
     97a:	de 01       	movw	r26, r28
     97c:	17 96       	adiw	r26, 0x07	; 7
     97e:	01 90       	ld	r0, Z+
     980:	0d 92       	st	X+, r0
     982:	8a 95       	dec	r24
     984:	e1 f7       	brne	.-8      	; 0x97e <setOngoingTime+0x52>
	
	
	sprintf(lcddata,"%u%u:%u%u:%u%u",numbers[0],numbers[1],numbers[2],numbers[3],numbers[4],numbers[5]);
     986:	1f 92       	push	r1
     988:	1f 92       	push	r1
     98a:	1f 92       	push	r1
     98c:	1f 92       	push	r1
     98e:	1f 92       	push	r1
     990:	1f 92       	push	r1
     992:	1f 92       	push	r1
     994:	1f 92       	push	r1
     996:	1f 92       	push	r1
     998:	1f 92       	push	r1
     99a:	1f 92       	push	r1
     99c:	1f 92       	push	r1
     99e:	83 ee       	ldi	r24, 0xE3	; 227
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	9f 93       	push	r25
     9a4:	8f 93       	push	r24
     9a6:	8f e5       	ldi	r24, 0x5F	; 95
     9a8:	92 e0       	ldi	r25, 0x02	; 2
     9aa:	9f 93       	push	r25
     9ac:	8f 93       	push	r24
     9ae:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <sprintf>
	LcdSetCursor(0,1,lcddata);
     9b2:	4f e5       	ldi	r20, 0x5F	; 95
     9b4:	52 e0       	ldi	r21, 0x02	; 2
     9b6:	61 e0       	ldi	r22, 0x01	; 1
     9b8:	80 e0       	ldi	r24, 0x00	; 0
     9ba:	0e 94 9d 01 	call	0x33a	; 0x33a <LcdSetCursor>
	LcdSetCursor(pos,1,"");
     9be:	47 e4       	ldi	r20, 0x47	; 71
     9c0:	51 e0       	ldi	r21, 0x01	; 1
     9c2:	61 e0       	ldi	r22, 0x01	; 1
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	0e 94 9d 01 	call	0x33a	; 0x33a <LcdSetCursor>
	LcdCommand(LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_BLINKON);
     9ca:	8d e0       	ldi	r24, 0x0D	; 13
     9cc:	0e 94 4d 01 	call	0x29a	; 0x29a <LcdCommand>
     9d0:	0f b6       	in	r0, 0x3f	; 63
     9d2:	f8 94       	cli
     9d4:	de bf       	out	0x3e, r29	; 62
     9d6:	0f be       	out	0x3f, r0	; 63
     9d8:	cd bf       	out	0x3d, r28	; 61
void setOngoingTime(){
	LcdCommand(LCD_CLEARDISPLAY);
	LcdSetCursor(0,0,"Add current Time ");
	_delay_ms(500);
	
	uint8_t pos=0;
     9da:	10 e0       	ldi	r17, 0x00	; 0
	LcdSetCursor(0,1,lcddata);
	LcdSetCursor(pos,1,"");
	LcdCommand(LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_BLINKON);
	
	while(1){
		uint8_t keyout=getkeyNum();
     9dc:	0e 94 ff 01 	call	0x3fe	; 0x3fe <getkeyNum>
		
		if (keyout<=posData[pos][1])
     9e0:	21 2f       	mov	r18, r17
     9e2:	30 e0       	ldi	r19, 0x00	; 0
     9e4:	f9 01       	movw	r30, r18
     9e6:	ee 0f       	add	r30, r30
     9e8:	ff 1f       	adc	r31, r31
     9ea:	a1 e0       	ldi	r26, 0x01	; 1
     9ec:	b0 e0       	ldi	r27, 0x00	; 0
     9ee:	ac 0f       	add	r26, r28
     9f0:	bd 1f       	adc	r27, r29
     9f2:	ea 0f       	add	r30, r26
     9f4:	fb 1f       	adc	r31, r27
     9f6:	97 81       	ldd	r25, Z+7	; 0x07
     9f8:	98 17       	cp	r25, r24
     9fa:	08 f4       	brcc	.+2      	; 0x9fe <setOngoingTime+0xd2>
     9fc:	49 c0       	rjmp	.+146    	; 0xa90 <setOngoingTime+0x164>
		{
			numbers[pos]=keyout;
     9fe:	fd 01       	movw	r30, r26
     a00:	e2 0f       	add	r30, r18
     a02:	f3 1f       	adc	r31, r19
     a04:	80 83       	st	Z, r24
			sprintf(lcddata,"%u%u:%u%u:%u%u",numbers[0],numbers[1],numbers[2],numbers[3],numbers[4],numbers[5]);
     a06:	5e 81       	ldd	r21, Y+6	; 0x06
     a08:	4d 81       	ldd	r20, Y+5	; 0x05
     a0a:	3c 81       	ldd	r19, Y+4	; 0x04
     a0c:	2b 81       	ldd	r18, Y+3	; 0x03
     a0e:	9a 81       	ldd	r25, Y+2	; 0x02
     a10:	89 81       	ldd	r24, Y+1	; 0x01
     a12:	1f 92       	push	r1
     a14:	5f 93       	push	r21
     a16:	1f 92       	push	r1
     a18:	4f 93       	push	r20
     a1a:	1f 92       	push	r1
     a1c:	3f 93       	push	r19
     a1e:	1f 92       	push	r1
     a20:	2f 93       	push	r18
     a22:	1f 92       	push	r1
     a24:	9f 93       	push	r25
     a26:	1f 92       	push	r1
     a28:	8f 93       	push	r24
     a2a:	83 ee       	ldi	r24, 0xE3	; 227
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	9f 93       	push	r25
     a30:	8f 93       	push	r24
     a32:	8f e5       	ldi	r24, 0x5F	; 95
     a34:	92 e0       	ldi	r25, 0x02	; 2
     a36:	9f 93       	push	r25
     a38:	8f 93       	push	r24
     a3a:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <sprintf>
			LcdSetCursor(0,1,lcddata);
     a3e:	4f e5       	ldi	r20, 0x5F	; 95
     a40:	52 e0       	ldi	r21, 0x02	; 2
     a42:	61 e0       	ldi	r22, 0x01	; 1
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	0e 94 9d 01 	call	0x33a	; 0x33a <LcdSetCursor>
			pos++;
     a4a:	1f 5f       	subi	r17, 0xFF	; 255
			if (pos>5)
     a4c:	0f b6       	in	r0, 0x3f	; 63
     a4e:	f8 94       	cli
     a50:	de bf       	out	0x3e, r29	; 62
     a52:	0f be       	out	0x3f, r0	; 63
     a54:	cd bf       	out	0x3d, r28	; 61
     a56:	16 30       	cpi	r17, 0x06	; 6
     a58:	08 f0       	brcs	.+2      	; 0xa5c <setOngoingTime+0x130>
			{pos=0;
     a5a:	10 e0       	ldi	r17, 0x00	; 0
			}
			LcdSetCursor(posData[pos][0],1,"");
     a5c:	e1 2f       	mov	r30, r17
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	ee 0f       	add	r30, r30
     a62:	ff 1f       	adc	r31, r31
     a64:	81 e0       	ldi	r24, 0x01	; 1
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	8c 0f       	add	r24, r28
     a6a:	9d 1f       	adc	r25, r29
     a6c:	e8 0f       	add	r30, r24
     a6e:	f9 1f       	adc	r31, r25
     a70:	47 e4       	ldi	r20, 0x47	; 71
     a72:	51 e0       	ldi	r21, 0x01	; 1
     a74:	61 e0       	ldi	r22, 0x01	; 1
     a76:	86 81       	ldd	r24, Z+6	; 0x06
     a78:	0e 94 9d 01 	call	0x33a	; 0x33a <LcdSetCursor>
     a7c:	9f ef       	ldi	r25, 0xFF	; 255
     a7e:	a1 ee       	ldi	r26, 0xE1	; 225
     a80:	b4 e0       	ldi	r27, 0x04	; 4
     a82:	91 50       	subi	r25, 0x01	; 1
     a84:	a0 40       	sbci	r26, 0x00	; 0
     a86:	b0 40       	sbci	r27, 0x00	; 0
     a88:	e1 f7       	brne	.-8      	; 0xa82 <setOngoingTime+0x156>
     a8a:	00 c0       	rjmp	.+0      	; 0xa8c <setOngoingTime+0x160>
     a8c:	00 00       	nop
     a8e:	a6 cf       	rjmp	.-180    	; 0x9dc <setOngoingTime+0xb0>
			_delay_ms(200);
		}
		
		else if(keyout==13){
     a90:	8d 30       	cpi	r24, 0x0D	; 13
     a92:	49 f1       	breq	.+82     	; 0xae6 <setOngoingTime+0x1ba>
			break;
		}
	
		
		else if (keyout==14)
     a94:	8e 30       	cpi	r24, 0x0E	; 14
     a96:	09 f0       	breq	.+2      	; 0xa9a <setOngoingTime+0x16e>
     a98:	a1 cf       	rjmp	.-190    	; 0x9dc <setOngoingTime+0xb0>
		{
			LcdCommand(LCD_CLEARDISPLAY);
     a9a:	81 e0       	ldi	r24, 0x01	; 1
     a9c:	0e 94 4d 01 	call	0x29a	; 0x29a <LcdCommand>
			LcdCommand(LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_BLINKOFF);
     aa0:	8c e0       	ldi	r24, 0x0C	; 12
     aa2:	0e 94 4d 01 	call	0x29a	; 0x29a <LcdCommand>
			LcdSetCursor(0,0,"Time Added");
     aa6:	42 ea       	ldi	r20, 0xA2	; 162
     aa8:	50 e0       	ldi	r21, 0x00	; 0
     aaa:	60 e0       	ldi	r22, 0x00	; 0
     aac:	80 e0       	ldi	r24, 0x00	; 0
     aae:	0e 94 9d 01 	call	0x33a	; 0x33a <LcdSetCursor>
			setTime((numbers[0]*10)+numbers[1], (numbers[2]*10)+numbers[3], (numbers[4]*10)+numbers[5]);
     ab2:	3d 81       	ldd	r19, Y+5	; 0x05
     ab4:	6e 81       	ldd	r22, Y+6	; 0x06
     ab6:	2b 81       	ldd	r18, Y+3	; 0x03
     ab8:	5c 81       	ldd	r21, Y+4	; 0x04
     aba:	99 81       	ldd	r25, Y+1	; 0x01
     abc:	8a 81       	ldd	r24, Y+2	; 0x02
     abe:	33 0f       	add	r19, r19
     ac0:	43 2f       	mov	r20, r19
     ac2:	44 0f       	add	r20, r20
     ac4:	44 0f       	add	r20, r20
     ac6:	43 0f       	add	r20, r19
     ac8:	46 0f       	add	r20, r22
     aca:	22 0f       	add	r18, r18
     acc:	62 2f       	mov	r22, r18
     ace:	66 0f       	add	r22, r22
     ad0:	66 0f       	add	r22, r22
     ad2:	62 0f       	add	r22, r18
     ad4:	65 0f       	add	r22, r21
     ad6:	99 0f       	add	r25, r25
     ad8:	59 2f       	mov	r21, r25
     ada:	55 0f       	add	r21, r21
     adc:	55 0f       	add	r21, r21
     ade:	95 0f       	add	r25, r21
     ae0:	89 0f       	add	r24, r25
     ae2:	0e 94 2d 04 	call	0x85a	; 0x85a <setTime>
			break;
		}
	}
}
     ae6:	62 96       	adiw	r28, 0x12	; 18
     ae8:	0f b6       	in	r0, 0x3f	; 63
     aea:	f8 94       	cli
     aec:	de bf       	out	0x3e, r29	; 62
     aee:	0f be       	out	0x3f, r0	; 63
     af0:	cd bf       	out	0x3d, r28	; 61
     af2:	df 91       	pop	r29
     af4:	cf 91       	pop	r28
     af6:	1f 91       	pop	r17
     af8:	08 95       	ret

00000afa <adddata>:
void adddata(){
     afa:	0f 93       	push	r16
     afc:	1f 93       	push	r17
     afe:	cf 93       	push	r28
     b00:	df 93       	push	r29
     b02:	cd b7       	in	r28, 0x3d	; 61
     b04:	de b7       	in	r29, 0x3e	; 62
     b06:	28 97       	sbiw	r28, 0x08	; 8
     b08:	0f b6       	in	r0, 0x3f	; 63
     b0a:	f8 94       	cli
     b0c:	de bf       	out	0x3e, r29	; 62
     b0e:	0f be       	out	0x3f, r0	; 63
     b10:	cd bf       	out	0x3d, r28	; 61
	LcdCommand(LCD_CLEARDISPLAY);
     b12:	81 e0       	ldi	r24, 0x01	; 1
     b14:	0e 94 4d 01 	call	0x29a	; 0x29a <LcdCommand>
	setOngoingTime();
     b18:	0e 94 96 04 	call	0x92c	; 0x92c <setOngoingTime>
	LcdSetCursor(0,0,"Select Schedule");
     b1c:	42 ef       	ldi	r20, 0xF2	; 242
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	60 e0       	ldi	r22, 0x00	; 0
     b22:	80 e0       	ldi	r24, 0x00	; 0
     b24:	0e 94 9d 01 	call	0x33a	; 0x33a <LcdSetCursor>
	uint8_t pos=0;
	char*text[4]={"Feeding time 1","Feeding time 2","Feeding time 3","Food weight    "};
     b28:	88 e0       	ldi	r24, 0x08	; 8
     b2a:	ef e8       	ldi	r30, 0x8F	; 143
     b2c:	f0 e0       	ldi	r31, 0x00	; 0
     b2e:	de 01       	movw	r26, r28
     b30:	11 96       	adiw	r26, 0x01	; 1
     b32:	01 90       	ld	r0, Z+
     b34:	0d 92       	st	X+, r0
     b36:	8a 95       	dec	r24
     b38:	e1 f7       	brne	.-8      	; 0xb32 <adddata+0x38>
	LcdSetCursor(0,1,text[pos]);
     b3a:	42 e0       	ldi	r20, 0x02	; 2
     b3c:	51 e0       	ldi	r21, 0x01	; 1
     b3e:	61 e0       	ldi	r22, 0x01	; 1
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	0e 94 9d 01 	call	0x33a	; 0x33a <LcdSetCursor>
}
void adddata(){
	LcdCommand(LCD_CLEARDISPLAY);
	setOngoingTime();
	LcdSetCursor(0,0,"Select Schedule");
	uint8_t pos=0;
     b46:	00 e0       	ldi	r16, 0x00	; 0
	char*text[4]={"Feeding time 1","Feeding time 2","Feeding time 3","Food weight    "};
	LcdSetCursor(0,1,text[pos]);
	while(1){
		uint8_t key=getkeyNum();//15
     b48:	0e 94 ff 01 	call	0x3fe	; 0x3fe <getkeyNum>
     b4c:	18 2f       	mov	r17, r24
		if (key==15)
     b4e:	8f 30       	cpi	r24, 0x0F	; 15
     b50:	a9 f4       	brne	.+42     	; 0xb7c <adddata+0x82>
		{ 
			pos++;
     b52:	0f 5f       	subi	r16, 0xFF	; 255
			if (pos>3)
     b54:	04 30       	cpi	r16, 0x04	; 4
     b56:	08 f0       	brcs	.+2      	; 0xb5a <adddata+0x60>
			{pos=0;
     b58:	00 e0       	ldi	r16, 0x00	; 0
			}
			LcdSetCursor(0,1,text[pos]);
     b5a:	e0 2f       	mov	r30, r16
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	ee 0f       	add	r30, r30
     b60:	ff 1f       	adc	r31, r31
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	8c 0f       	add	r24, r28
     b68:	9d 1f       	adc	r25, r29
     b6a:	e8 0f       	add	r30, r24
     b6c:	f9 1f       	adc	r31, r25
     b6e:	40 81       	ld	r20, Z
     b70:	51 81       	ldd	r21, Z+1	; 0x01
     b72:	61 e0       	ldi	r22, 0x01	; 1
     b74:	80 e0       	ldi	r24, 0x00	; 0
     b76:	0e 94 9d 01 	call	0x33a	; 0x33a <LcdSetCursor>
     b7a:	02 c0       	rjmp	.+4      	; 0xb80 <adddata+0x86>
			
		}
		
		else if(key==13){
     b7c:	8d 30       	cpi	r24, 0x0D	; 13
     b7e:	a1 f0       	breq	.+40     	; 0xba8 <adddata+0xae>
			break;
		}
		
		if (key==14)
     b80:	1e 30       	cpi	r17, 0x0E	; 14
     b82:	11 f7       	brne	.-60     	; 0xb48 <adddata+0x4e>
		{
			LcdCommand(LCD_CLEARDISPLAY);
     b84:	81 e0       	ldi	r24, 0x01	; 1
     b86:	0e 94 4d 01 	call	0x29a	; 0x29a <LcdCommand>
			LcdSetCursor(0,0,"Selected");
     b8a:	41 e1       	ldi	r20, 0x11	; 17
     b8c:	51 e0       	ldi	r21, 0x01	; 1
     b8e:	60 e0       	ldi	r22, 0x00	; 0
     b90:	80 e0       	ldi	r24, 0x00	; 0
     b92:	0e 94 9d 01 	call	0x33a	; 0x33a <LcdSetCursor>
     b96:	9f ef       	ldi	r25, 0xFF	; 255
     b98:	29 e6       	ldi	r18, 0x69	; 105
     b9a:	88 e1       	ldi	r24, 0x18	; 24
     b9c:	91 50       	subi	r25, 0x01	; 1
     b9e:	20 40       	sbci	r18, 0x00	; 0
     ba0:	80 40       	sbci	r24, 0x00	; 0
     ba2:	e1 f7       	brne	.-8      	; 0xb9c <adddata+0xa2>
     ba4:	00 c0       	rjmp	.+0      	; 0xba6 <adddata+0xac>
     ba6:	00 00       	nop
			break;
		}
		
	}
	
	if (pos<3)
     ba8:	03 30       	cpi	r16, 0x03	; 3
     baa:	20 f4       	brcc	.+8      	; 0xbb4 <adddata+0xba>
	{
		Addtime(pos);
     bac:	80 2f       	mov	r24, r16
     bae:	0e 94 43 02 	call	0x486	; 0x486 <Addtime>
     bb2:	04 c0       	rjmp	.+8      	; 0xbbc <adddata+0xc2>
		
	} 
	else
	{AddWeight(pos);
     bb4:	80 2f       	mov	r24, r16
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	0e 94 3e 03 	call	0x67c	; 0x67c <AddWeight>
	}
	
}
     bbc:	28 96       	adiw	r28, 0x08	; 8
     bbe:	0f b6       	in	r0, 0x3f	; 63
     bc0:	f8 94       	cli
     bc2:	de bf       	out	0x3e, r29	; 62
     bc4:	0f be       	out	0x3f, r0	; 63
     bc6:	cd bf       	out	0x3d, r28	; 61
     bc8:	df 91       	pop	r29
     bca:	cf 91       	pop	r28
     bcc:	1f 91       	pop	r17
     bce:	0f 91       	pop	r16
     bd0:	08 95       	ret

00000bd2 <Readtime>:

	
}


void Readtime(){
     bd2:	1f 93       	push	r17
     bd4:	cf 93       	push	r28
     bd6:	df 93       	push	r29
	uint8_t bit[7];
	TWIStart();/* Start I2C with device write address */
     bd8:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <TWIStart>
	TWIWriteAddrs(104,0); //Return 24 mean device found, return mean no device
     bdc:	60 e0       	ldi	r22, 0x00	; 0
     bde:	88 e6       	ldi	r24, 0x68	; 104
     be0:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <TWIWriteAddrs>
	TWIWriteData(0);  //Register address
     be4:	80 e0       	ldi	r24, 0x00	; 0
     be6:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <TWIWriteData>
	
	TWIStart();
     bea:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <TWIStart>
	TWIWriteAddrs(104,1); //Write bit
     bee:	61 e0       	ldi	r22, 0x01	; 1
     bf0:	88 e6       	ldi	r24, 0x68	; 104
     bf2:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <TWIWriteAddrs>
	bit[0]=TWIReadACK();
     bf6:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <TWIReadACK>
     bfa:	18 2f       	mov	r17, r24
	bit[1]=TWIReadACK();
     bfc:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <TWIReadACK>
     c00:	d8 2f       	mov	r29, r24
	bit[2]=TWIReadNACK();
     c02:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <TWIReadNACK>
     c06:	c8 2f       	mov	r28, r24
	TWIStop();
     c08:	0e 94 d6 00 	call	0x1ac	; 0x1ac <TWIStop>
	secC=(((bit[0]&0xF0)>>4)*10)+(bit[0]&0xF);
     c0c:	81 2f       	mov	r24, r17
     c0e:	82 95       	swap	r24
     c10:	8f 70       	andi	r24, 0x0F	; 15
     c12:	88 0f       	add	r24, r24
     c14:	98 2f       	mov	r25, r24
     c16:	99 0f       	add	r25, r25
     c18:	99 0f       	add	r25, r25
     c1a:	89 0f       	add	r24, r25
     c1c:	1f 70       	andi	r17, 0x0F	; 15
     c1e:	18 0f       	add	r17, r24
     c20:	10 93 73 02 	sts	0x0273, r17	; 0x800273 <secC>
	minC=(((bit[1]&0xF0)>>4)*10)+(bit[1]&0xF);
     c24:	8d 2f       	mov	r24, r29
     c26:	82 95       	swap	r24
     c28:	8f 70       	andi	r24, 0x0F	; 15
     c2a:	88 0f       	add	r24, r24
     c2c:	98 2f       	mov	r25, r24
     c2e:	99 0f       	add	r25, r25
     c30:	99 0f       	add	r25, r25
     c32:	89 0f       	add	r24, r25
     c34:	df 70       	andi	r29, 0x0F	; 15
     c36:	d8 0f       	add	r29, r24
     c38:	d0 93 5c 02 	sts	0x025C, r29	; 0x80025c <minC>
	hourC=(((bit[2]&0b00110000)>>4)*10)+(bit[2]&0xF);
     c3c:	8c 2f       	mov	r24, r28
     c3e:	80 73       	andi	r24, 0x30	; 48
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	95 95       	asr	r25
     c44:	87 95       	ror	r24
     c46:	95 95       	asr	r25
     c48:	87 95       	ror	r24
     c4a:	95 95       	asr	r25
     c4c:	87 95       	ror	r24
     c4e:	95 95       	asr	r25
     c50:	87 95       	ror	r24
     c52:	88 0f       	add	r24, r24
     c54:	98 2f       	mov	r25, r24
     c56:	99 0f       	add	r25, r25
     c58:	99 0f       	add	r25, r25
     c5a:	89 0f       	add	r24, r25
     c5c:	cf 70       	andi	r28, 0x0F	; 15
     c5e:	8c 0f       	add	r24, r28
     c60:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <hourC>
}
     c64:	df 91       	pop	r29
     c66:	cf 91       	pop	r28
     c68:	1f 91       	pop	r17
     c6a:	08 95       	ret

00000c6c <sendSMS>:

void sendSMS(char*sms){
     c6c:	cf 93       	push	r28
     c6e:	df 93       	push	r29
     c70:	ec 01       	movw	r28, r24
	
	PORTA|=(1<<7);// buzzer
     c72:	8b b3       	in	r24, 0x1b	; 27
     c74:	80 68       	ori	r24, 0x80	; 128
     c76:	8b bb       	out	0x1b, r24	; 27
     c78:	2f ef       	ldi	r18, 0xFF	; 255
     c7a:	84 e3       	ldi	r24, 0x34	; 52
     c7c:	9c e0       	ldi	r25, 0x0C	; 12
     c7e:	21 50       	subi	r18, 0x01	; 1
     c80:	80 40       	sbci	r24, 0x00	; 0
     c82:	90 40       	sbci	r25, 0x00	; 0
     c84:	e1 f7       	brne	.-8      	; 0xc7e <sendSMS+0x12>
     c86:	00 c0       	rjmp	.+0      	; 0xc88 <sendSMS+0x1c>
     c88:	00 00       	nop
	_delay_ms(500);
	USART_TxStringln("AT");
     c8a:	88 e4       	ldi	r24, 0x48	; 72
     c8c:	91 e0       	ldi	r25, 0x01	; 1
     c8e:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <USART_TxStringln>
     c92:	2f ef       	ldi	r18, 0xFF	; 255
     c94:	84 e3       	ldi	r24, 0x34	; 52
     c96:	9c e0       	ldi	r25, 0x0C	; 12
     c98:	21 50       	subi	r18, 0x01	; 1
     c9a:	80 40       	sbci	r24, 0x00	; 0
     c9c:	90 40       	sbci	r25, 0x00	; 0
     c9e:	e1 f7       	brne	.-8      	; 0xc98 <sendSMS+0x2c>
     ca0:	00 c0       	rjmp	.+0      	; 0xca2 <sendSMS+0x36>
     ca2:	00 00       	nop
	_delay_ms(500);
	USART_TxStringln("AT");
     ca4:	88 e4       	ldi	r24, 0x48	; 72
     ca6:	91 e0       	ldi	r25, 0x01	; 1
     ca8:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <USART_TxStringln>
     cac:	2f ef       	ldi	r18, 0xFF	; 255
     cae:	84 e3       	ldi	r24, 0x34	; 52
     cb0:	9c e0       	ldi	r25, 0x0C	; 12
     cb2:	21 50       	subi	r18, 0x01	; 1
     cb4:	80 40       	sbci	r24, 0x00	; 0
     cb6:	90 40       	sbci	r25, 0x00	; 0
     cb8:	e1 f7       	brne	.-8      	; 0xcb2 <sendSMS+0x46>
     cba:	00 c0       	rjmp	.+0      	; 0xcbc <sendSMS+0x50>
     cbc:	00 00       	nop
	_delay_ms(500);
	USART_TxStringln("AT+CMGS=\"+94710000000\"");
     cbe:	8b e4       	ldi	r24, 0x4B	; 75
     cc0:	91 e0       	ldi	r25, 0x01	; 1
     cc2:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <USART_TxStringln>
     cc6:	2f ef       	ldi	r18, 0xFF	; 255
     cc8:	84 e3       	ldi	r24, 0x34	; 52
     cca:	9c e0       	ldi	r25, 0x0C	; 12
     ccc:	21 50       	subi	r18, 0x01	; 1
     cce:	80 40       	sbci	r24, 0x00	; 0
     cd0:	90 40       	sbci	r25, 0x00	; 0
     cd2:	e1 f7       	brne	.-8      	; 0xccc <sendSMS+0x60>
     cd4:	00 c0       	rjmp	.+0      	; 0xcd6 <sendSMS+0x6a>
     cd6:	00 00       	nop
	_delay_ms(500);
	USART_TxStringln("AT+CMGF=1");
     cd8:	82 e6       	ldi	r24, 0x62	; 98
     cda:	91 e0       	ldi	r25, 0x01	; 1
     cdc:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <USART_TxStringln>
     ce0:	2f ef       	ldi	r18, 0xFF	; 255
     ce2:	84 e3       	ldi	r24, 0x34	; 52
     ce4:	9c e0       	ldi	r25, 0x0C	; 12
     ce6:	21 50       	subi	r18, 0x01	; 1
     ce8:	80 40       	sbci	r24, 0x00	; 0
     cea:	90 40       	sbci	r25, 0x00	; 0
     cec:	e1 f7       	brne	.-8      	; 0xce6 <sendSMS+0x7a>
     cee:	00 c0       	rjmp	.+0      	; 0xcf0 <sendSMS+0x84>
     cf0:	00 00       	nop
	_delay_ms(500);
	USART_TxStringln(sms);
     cf2:	ce 01       	movw	r24, r28
     cf4:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <USART_TxStringln>
     cf8:	2f ef       	ldi	r18, 0xFF	; 255
     cfa:	84 e3       	ldi	r24, 0x34	; 52
     cfc:	9c e0       	ldi	r25, 0x0C	; 12
     cfe:	21 50       	subi	r18, 0x01	; 1
     d00:	80 40       	sbci	r24, 0x00	; 0
     d02:	90 40       	sbci	r25, 0x00	; 0
     d04:	e1 f7       	brne	.-8      	; 0xcfe <sendSMS+0x92>
     d06:	00 c0       	rjmp	.+0      	; 0xd08 <sendSMS+0x9c>
     d08:	00 00       	nop
	_delay_ms(500);
	USART_Transmit(26);
     d0a:	8a e1       	ldi	r24, 0x1A	; 26
     d0c:	0e 94 cc 01 	call	0x398	; 0x398 <USART_Transmit>
	PORTA&=~(1<<7);
     d10:	8b b3       	in	r24, 0x1b	; 27
     d12:	8f 77       	andi	r24, 0x7F	; 127
     d14:	8b bb       	out	0x1b, r24	; 27
}
     d16:	df 91       	pop	r29
     d18:	cf 91       	pop	r28
     d1a:	08 95       	ret

00000d1c <__vector_10>:

ISR(TIMER0_COMP_vect){//ultrasonic
     d1c:	1f 92       	push	r1
     d1e:	0f 92       	push	r0
     d20:	0f b6       	in	r0, 0x3f	; 63
     d22:	0f 92       	push	r0
     d24:	11 24       	eor	r1, r1
     d26:	8f 93       	push	r24
     d28:	9f 93       	push	r25
	TimerCal++;
     d2a:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <TimerCal>
     d2e:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <TimerCal+0x1>
     d32:	01 96       	adiw	r24, 0x01	; 1
     d34:	90 93 49 02 	sts	0x0249, r25	; 0x800249 <TimerCal+0x1>
     d38:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <TimerCal>
	TCNT0=0;
     d3c:	12 be       	out	0x32, r1	; 50
	
}
     d3e:	9f 91       	pop	r25
     d40:	8f 91       	pop	r24
     d42:	0f 90       	pop	r0
     d44:	0f be       	out	0x3f, r0	; 63
     d46:	0f 90       	pop	r0
     d48:	1f 90       	pop	r1
     d4a:	18 95       	reti

00000d4c <loadCellRead>:

float loadCellRead(){
     d4c:	cf 92       	push	r12
     d4e:	df 92       	push	r13
     d50:	ef 92       	push	r14
     d52:	ff 92       	push	r15
	hx711H=0;hx711L=0;  //clear variables
     d54:	10 92 59 02 	sts	0x0259, r1	; 0x800259 <hx711H>
     d58:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <hx711L+0x1>
     d5c:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <hx711L>
	for(uint8_t i=0;i<8;i++){  // Load cell data high 8 bits
     d60:	80 e0       	ldi	r24, 0x00	; 0
     d62:	33 c0       	rjmp	.+102    	; 0xdca <loadCellRead+0x7e>
		PORTD|=(1<<Load_clk); //Clock pin high
     d64:	92 b3       	in	r25, 0x12	; 18
     d66:	90 62       	ori	r25, 0x20	; 32
     d68:	92 bb       	out	0x12, r25	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d6a:	9a e1       	ldi	r25, 0x1A	; 26
     d6c:	9a 95       	dec	r25
     d6e:	f1 f7       	brne	.-4      	; 0xd6c <loadCellRead+0x20>
     d70:	00 c0       	rjmp	.+0      	; 0xd72 <loadCellRead+0x26>
		_delay_us(10);
		if ((PIND&(1<<Load_data))>>Load_data)  //read data pin
     d72:	84 9b       	sbis	0x10, 4	; 16
     d74:	11 c0       	rjmp	.+34     	; 0xd98 <loadCellRead+0x4c>
		{hx711H|=(1<<(7-i));//set hx 711 varible
     d76:	47 e0       	ldi	r20, 0x07	; 7
     d78:	50 e0       	ldi	r21, 0x00	; 0
     d7a:	48 1b       	sub	r20, r24
     d7c:	51 09       	sbc	r21, r1
     d7e:	21 e0       	ldi	r18, 0x01	; 1
     d80:	30 e0       	ldi	r19, 0x00	; 0
     d82:	02 c0       	rjmp	.+4      	; 0xd88 <loadCellRead+0x3c>
     d84:	22 0f       	add	r18, r18
     d86:	33 1f       	adc	r19, r19
     d88:	4a 95       	dec	r20
     d8a:	e2 f7       	brpl	.-8      	; 0xd84 <loadCellRead+0x38>
     d8c:	90 91 59 02 	lds	r25, 0x0259	; 0x800259 <hx711H>
     d90:	29 2b       	or	r18, r25
     d92:	20 93 59 02 	sts	0x0259, r18	; 0x800259 <hx711H>
     d96:	11 c0       	rjmp	.+34     	; 0xdba <loadCellRead+0x6e>
		}
		else
		{hx711H&=~(1<<(7-i));
     d98:	47 e0       	ldi	r20, 0x07	; 7
     d9a:	50 e0       	ldi	r21, 0x00	; 0
     d9c:	48 1b       	sub	r20, r24
     d9e:	51 09       	sbc	r21, r1
     da0:	21 e0       	ldi	r18, 0x01	; 1
     da2:	30 e0       	ldi	r19, 0x00	; 0
     da4:	02 c0       	rjmp	.+4      	; 0xdaa <loadCellRead+0x5e>
     da6:	22 0f       	add	r18, r18
     da8:	33 1f       	adc	r19, r19
     daa:	4a 95       	dec	r20
     dac:	e2 f7       	brpl	.-8      	; 0xda6 <loadCellRead+0x5a>
     dae:	20 95       	com	r18
     db0:	90 91 59 02 	lds	r25, 0x0259	; 0x800259 <hx711H>
     db4:	29 23       	and	r18, r25
     db6:	20 93 59 02 	sts	0x0259, r18	; 0x800259 <hx711H>
		}
		PORTD&=~(1<<Load_clk); //Clock pin low
     dba:	92 b3       	in	r25, 0x12	; 18
     dbc:	9f 7d       	andi	r25, 0xDF	; 223
     dbe:	92 bb       	out	0x12, r25	; 18
     dc0:	9d e0       	ldi	r25, 0x0D	; 13
     dc2:	9a 95       	dec	r25
     dc4:	f1 f7       	brne	.-4      	; 0xdc2 <loadCellRead+0x76>
     dc6:	00 00       	nop
	
}

float loadCellRead(){
	hx711H=0;hx711L=0;  //clear variables
	for(uint8_t i=0;i<8;i++){  // Load cell data high 8 bits
     dc8:	8f 5f       	subi	r24, 0xFF	; 255
     dca:	88 30       	cpi	r24, 0x08	; 8
     dcc:	58 f2       	brcs	.-106    	; 0xd64 <loadCellRead+0x18>
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	3e c0       	rjmp	.+124    	; 0xe4e <loadCellRead+0x102>
		_delay_us(5);
	}
	
	
	for(uint8_t i=0;i<16;i++){ // Load cell data low 16 bits
		PORTD|=(1<<Load_clk); //Clock pin high
     dd2:	92 b3       	in	r25, 0x12	; 18
     dd4:	90 62       	ori	r25, 0x20	; 32
     dd6:	92 bb       	out	0x12, r25	; 18
     dd8:	9a e1       	ldi	r25, 0x1A	; 26
     dda:	9a 95       	dec	r25
     ddc:	f1 f7       	brne	.-4      	; 0xdda <loadCellRead+0x8e>
     dde:	00 c0       	rjmp	.+0      	; 0xde0 <loadCellRead+0x94>
		_delay_us(10);
		if ((PIND&(1<<Load_data))>>Load_data) //read data pin
     de0:	84 9b       	sbis	0x10, 4	; 16
     de2:	16 c0       	rjmp	.+44     	; 0xe10 <loadCellRead+0xc4>
		{hx711L|=(1<<(15-i));
     de4:	4f e0       	ldi	r20, 0x0F	; 15
     de6:	50 e0       	ldi	r21, 0x00	; 0
     de8:	48 1b       	sub	r20, r24
     dea:	51 09       	sbc	r21, r1
     dec:	21 e0       	ldi	r18, 0x01	; 1
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	02 c0       	rjmp	.+4      	; 0xdf6 <loadCellRead+0xaa>
     df2:	22 0f       	add	r18, r18
     df4:	33 1f       	adc	r19, r19
     df6:	4a 95       	dec	r20
     df8:	e2 f7       	brpl	.-8      	; 0xdf2 <loadCellRead+0xa6>
     dfa:	40 91 57 02 	lds	r20, 0x0257	; 0x800257 <hx711L>
     dfe:	50 91 58 02 	lds	r21, 0x0258	; 0x800258 <hx711L+0x1>
     e02:	24 2b       	or	r18, r20
     e04:	35 2b       	or	r19, r21
     e06:	30 93 58 02 	sts	0x0258, r19	; 0x800258 <hx711L+0x1>
     e0a:	20 93 57 02 	sts	0x0257, r18	; 0x800257 <hx711L>
     e0e:	17 c0       	rjmp	.+46     	; 0xe3e <loadCellRead+0xf2>
		}
		else
		{hx711L&=~(1<<(15-i));
     e10:	4f e0       	ldi	r20, 0x0F	; 15
     e12:	50 e0       	ldi	r21, 0x00	; 0
     e14:	48 1b       	sub	r20, r24
     e16:	51 09       	sbc	r21, r1
     e18:	21 e0       	ldi	r18, 0x01	; 1
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	02 c0       	rjmp	.+4      	; 0xe22 <loadCellRead+0xd6>
     e1e:	22 0f       	add	r18, r18
     e20:	33 1f       	adc	r19, r19
     e22:	4a 95       	dec	r20
     e24:	e2 f7       	brpl	.-8      	; 0xe1e <loadCellRead+0xd2>
     e26:	20 95       	com	r18
     e28:	30 95       	com	r19
     e2a:	40 91 57 02 	lds	r20, 0x0257	; 0x800257 <hx711L>
     e2e:	50 91 58 02 	lds	r21, 0x0258	; 0x800258 <hx711L+0x1>
     e32:	24 23       	and	r18, r20
     e34:	35 23       	and	r19, r21
     e36:	30 93 58 02 	sts	0x0258, r19	; 0x800258 <hx711L+0x1>
     e3a:	20 93 57 02 	sts	0x0257, r18	; 0x800257 <hx711L>
		}
		PORTD&=~(1<<Load_clk); //Clock pin low
     e3e:	92 b3       	in	r25, 0x12	; 18
     e40:	9f 7d       	andi	r25, 0xDF	; 223
     e42:	92 bb       	out	0x12, r25	; 18
     e44:	9d e0       	ldi	r25, 0x0D	; 13
     e46:	9a 95       	dec	r25
     e48:	f1 f7       	brne	.-4      	; 0xe46 <loadCellRead+0xfa>
     e4a:	00 00       	nop
		PORTD&=~(1<<Load_clk); //Clock pin low
		_delay_us(5);
	}
	
	
	for(uint8_t i=0;i<16;i++){ // Load cell data low 16 bits
     e4c:	8f 5f       	subi	r24, 0xFF	; 255
     e4e:	80 31       	cpi	r24, 0x10	; 16
     e50:	08 f4       	brcc	.+2      	; 0xe54 <loadCellRead+0x108>
     e52:	bf cf       	rjmp	.-130    	; 0xdd2 <loadCellRead+0x86>
		}
		PORTD&=~(1<<Load_clk); //Clock pin low
		_delay_us(5);
	}
	
	hx711L=hx711L>>1; //shift bits
     e54:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <hx711L>
     e58:	90 91 58 02 	lds	r25, 0x0258	; 0x800258 <hx711L+0x1>
     e5c:	96 95       	lsr	r25
     e5e:	87 95       	ror	r24
     e60:	90 93 58 02 	sts	0x0258, r25	; 0x800258 <hx711L+0x1>
     e64:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <hx711L>
	
	if (hx711H&1)  //bit setup
     e68:	60 91 59 02 	lds	r22, 0x0259	; 0x800259 <hx711H>
     e6c:	60 ff       	sbrs	r22, 0
     e6e:	05 c0       	rjmp	.+10     	; 0xe7a <loadCellRead+0x12e>
	{hx711L|=(1<<15);
     e70:	90 68       	ori	r25, 0x80	; 128
     e72:	90 93 58 02 	sts	0x0258, r25	; 0x800258 <hx711L+0x1>
     e76:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <hx711L>
	}
	else
	{hx711L&=~(1<<15);
	}
	hx711H=hx711H>>1;
     e7a:	66 95       	lsr	r22
     e7c:	60 93 59 02 	sts	0x0259, r22	; 0x800259 <hx711H>
	
	return (hx711H*(65536/18029.6))+hx711L/18029.6; //load cell calibration
     e80:	70 e0       	ldi	r23, 0x00	; 0
     e82:	80 e0       	ldi	r24, 0x00	; 0
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	0e 94 29 0b 	call	0x1652	; 0x1652 <__floatsisf>
     e8a:	24 e6       	ldi	r18, 0x64	; 100
     e8c:	32 ea       	ldi	r19, 0xA2	; 162
     e8e:	48 e6       	ldi	r20, 0x68	; 104
     e90:	50 e4       	ldi	r21, 0x40	; 64
     e92:	0e 94 ba 0b 	call	0x1774	; 0x1774 <__mulsf3>
     e96:	6b 01       	movw	r12, r22
     e98:	7c 01       	movw	r14, r24
     e9a:	60 91 57 02 	lds	r22, 0x0257	; 0x800257 <hx711L>
     e9e:	70 91 58 02 	lds	r23, 0x0258	; 0x800258 <hx711L+0x1>
     ea2:	80 e0       	ldi	r24, 0x00	; 0
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	0e 94 27 0b 	call	0x164e	; 0x164e <__floatunsisf>
     eaa:	23 e3       	ldi	r18, 0x33	; 51
     eac:	3b ed       	ldi	r19, 0xDB	; 219
     eae:	4c e8       	ldi	r20, 0x8C	; 140
     eb0:	56 e4       	ldi	r21, 0x46	; 70
     eb2:	0e 94 86 0a 	call	0x150c	; 0x150c <__divsf3>
     eb6:	9b 01       	movw	r18, r22
     eb8:	ac 01       	movw	r20, r24
     eba:	c7 01       	movw	r24, r14
     ebc:	b6 01       	movw	r22, r12
     ebe:	0e 94 1a 0a 	call	0x1434	; 0x1434 <__addsf3>
}
     ec2:	ff 90       	pop	r15
     ec4:	ef 90       	pop	r14
     ec6:	df 90       	pop	r13
     ec8:	cf 90       	pop	r12
     eca:	08 95       	ret

00000ecc <main>:
volatile uint16_t TimerCal=0;// variable for collect echo data
uint16_t ultraINT0=0;

int main(void)
{	/*ADC init part*/
	ADCSRA |= ((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0));   // prescaler 128
     ecc:	86 b1       	in	r24, 0x06	; 6
     ece:	87 60       	ori	r24, 0x07	; 7
     ed0:	86 b9       	out	0x06, r24	; 6
	ADMUX |= (1<<REFS0);					//external vcc
     ed2:	87 b1       	in	r24, 0x07	; 7
     ed4:	80 64       	ori	r24, 0x40	; 64
     ed6:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADEN);                            // Turn on ADC
     ed8:	86 b1       	in	r24, 0x06	; 6
     eda:	80 68       	ori	r24, 0x80	; 128
     edc:	86 b9       	out	0x06, r24	; 6
	DDRC|=(1<<7);//buzzer
     ede:	84 b3       	in	r24, 0x14	; 20
     ee0:	80 68       	ori	r24, 0x80	; 128
     ee2:	84 bb       	out	0x14, r24	; 20
	DDRC|=(1<<6);//lamp
     ee4:	84 b3       	in	r24, 0x14	; 20
     ee6:	80 64       	ori	r24, 0x40	; 64
     ee8:	84 bb       	out	0x14, r24	; 20
	DDRD|=(1<<Load_clk); //Load cell clock pin
     eea:	81 b3       	in	r24, 0x11	; 17
     eec:	80 62       	ori	r24, 0x20	; 32
     eee:	81 bb       	out	0x11, r24	; 17
	PORTD&=~(1<<Load_clk);//Clock pin low
     ef0:	82 b3       	in	r24, 0x12	; 18
     ef2:	8f 7d       	andi	r24, 0xDF	; 223
     ef4:	82 bb       	out	0x12, r24	; 18
	
	LcdInit();
     ef6:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <LcdInit>
	USART_Init(9600);
     efa:	80 e8       	ldi	r24, 0x80	; 128
     efc:	95 e2       	ldi	r25, 0x25	; 37
     efe:	0e 94 b9 01 	call	0x372	; 0x372 <USART_Init>
	
	
	LcdSetCursor(4,0,"Welcome");
     f02:	4c e6       	ldi	r20, 0x6C	; 108
     f04:	51 e0       	ldi	r21, 0x01	; 1
     f06:	60 e0       	ldi	r22, 0x00	; 0
     f08:	84 e0       	ldi	r24, 0x04	; 4
     f0a:	0e 94 9d 01 	call	0x33a	; 0x33a <LcdSetCursor>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f0e:	2f ef       	ldi	r18, 0xFF	; 255
     f10:	39 e6       	ldi	r19, 0x69	; 105
     f12:	88 e1       	ldi	r24, 0x18	; 24
     f14:	21 50       	subi	r18, 0x01	; 1
     f16:	30 40       	sbci	r19, 0x00	; 0
     f18:	80 40       	sbci	r24, 0x00	; 0
     f1a:	e1 f7       	brne	.-8      	; 0xf14 <main+0x48>
     f1c:	00 c0       	rjmp	.+0      	; 0xf1e <main+0x52>
     f1e:	00 00       	nop
	_delay_ms(1000);
	LcdCommand(LCD_CLEARDISPLAY);
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	0e 94 4d 01 	call	0x29a	; 0x29a <LcdCommand>
	feedingWeight=eeprom_read_word((uint16_t*)WeightDataAdress);
     f26:	86 e0       	ldi	r24, 0x06	; 6
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <eeprom_read_word>
     f2e:	90 93 4b 02 	sts	0x024B, r25	; 0x80024b <feedingWeight+0x1>
     f32:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <feedingWeight>
	for(uint8_t i=0;i<3;i++){
     f36:	10 e0       	ldi	r17, 0x00	; 0
     f38:	15 c0       	rjmp	.+42     	; 0xf64 <main+0x98>
		feedingTimes[i][0]=eeprom_read_byte((uint8_t*)feedingdataAdress[i]);
     f3a:	c1 2f       	mov	r28, r17
     f3c:	d0 e0       	ldi	r29, 0x00	; 0
     f3e:	fe 01       	movw	r30, r28
     f40:	e0 5a       	subi	r30, 0xA0	; 160
     f42:	ff 4f       	sbci	r31, 0xFF	; 255
     f44:	e0 80       	ld	r14, Z
     f46:	f1 2c       	mov	r15, r1
     f48:	c7 01       	movw	r24, r14
     f4a:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <eeprom_read_byte>
     f4e:	cc 0f       	add	r28, r28
     f50:	dd 1f       	adc	r29, r29
     f52:	c4 5b       	subi	r28, 0xB4	; 180
     f54:	dd 4f       	sbci	r29, 0xFD	; 253
     f56:	88 83       	st	Y, r24
		feedingTimes[i][1]=eeprom_read_byte((uint8_t*)feedingdataAdress[i]+1);
     f58:	c7 01       	movw	r24, r14
     f5a:	01 96       	adiw	r24, 0x01	; 1
     f5c:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <eeprom_read_byte>
     f60:	89 83       	std	Y+1, r24	; 0x01
	
	LcdSetCursor(4,0,"Welcome");
	_delay_ms(1000);
	LcdCommand(LCD_CLEARDISPLAY);
	feedingWeight=eeprom_read_word((uint16_t*)WeightDataAdress);
	for(uint8_t i=0;i<3;i++){
     f62:	1f 5f       	subi	r17, 0xFF	; 255
     f64:	13 30       	cpi	r17, 0x03	; 3
     f66:	48 f3       	brcs	.-46     	; 0xf3a <main+0x6e>
	
//	sprintf(lcddata,"%u:%u %u:%u ",feedingTimes[0][0],feedingTimes[0][1],feedingTimes[1][0],feedingTimes[1][1]);
//	LcdSetCursor(0,0,lcddata);
//	_delay_ms(3000);
	
	DDRD|=(1<<3); //D4 as output
     f68:	81 b3       	in	r24, 0x11	; 17
     f6a:	88 60       	ori	r24, 0x08	; 8
     f6c:	81 bb       	out	0x11, r24	; 17
	TCCR0|=(1<<WGM01);//Enable Compare match mode
     f6e:	83 b7       	in	r24, 0x33	; 51
     f70:	88 60       	ori	r24, 0x08	; 8
     f72:	83 bf       	out	0x33, r24	; 51
	TCCR0|=(1<<CS11);//Start timer  prescaler =8
     f74:	83 b7       	in	r24, 0x33	; 51
     f76:	82 60       	ori	r24, 0x02	; 2
     f78:	83 bf       	out	0x33, r24	; 51
	TCNT0=0;
     f7a:	12 be       	out	0x32, r1	; 50
	OCR0=10;
     f7c:	8a e0       	ldi	r24, 0x0A	; 10
     f7e:	8c bf       	out	0x3c, r24	; 60
	/*register value= time*(clock speed/prescale)
	register value=0.000001*(8000000/1)
	register value=10*/
	TIMSK|=(1<<OCIE0);//enable timer Compare inturrept
     f80:	89 b7       	in	r24, 0x39	; 57
     f82:	82 60       	ori	r24, 0x02	; 2
     f84:	89 bf       	out	0x39, r24	; 57
	sei();	
     f86:	78 94       	sei
	LcdSetCursor(0,0,lcddata);*/
	
	
	
	while(1){
		LcdSetCursor(0,0,"Need data Enter?");
     f88:	44 e7       	ldi	r20, 0x74	; 116
     f8a:	51 e0       	ldi	r21, 0x01	; 1
     f8c:	60 e0       	ldi	r22, 0x00	; 0
     f8e:	80 e0       	ldi	r24, 0x00	; 0
     f90:	0e 94 9d 01 	call	0x33a	; 0x33a <LcdSetCursor>
		LcdSetCursor(0,1,"Yes-1 No-2");
     f94:	45 e8       	ldi	r20, 0x85	; 133
     f96:	51 e0       	ldi	r21, 0x01	; 1
     f98:	61 e0       	ldi	r22, 0x01	; 1
     f9a:	80 e0       	ldi	r24, 0x00	; 0
     f9c:	0e 94 9d 01 	call	0x33a	; 0x33a <LcdSetCursor>
		
		uint8_t key=getkeyNum();
     fa0:	0e 94 ff 01 	call	0x3fe	; 0x3fe <getkeyNum>
     fa4:	c8 2f       	mov	r28, r24
		if (key==1)
     fa6:	81 30       	cpi	r24, 0x01	; 1
     fa8:	11 f4       	brne	.+4      	; 0xfae <main+0xe2>
		{adddata();
     faa:	0e 94 7d 05 	call	0xafa	; 0xafa <adddata>
			
		}
		
		if (key==2)
     fae:	c2 30       	cpi	r28, 0x02	; 2
     fb0:	59 f7       	brne	.-42     	; 0xf88 <main+0xbc>
		{	LcdCommand(LCD_CLEARDISPLAY);
     fb2:	81 e0       	ldi	r24, 0x01	; 1
     fb4:	0e 94 4d 01 	call	0x29a	; 0x29a <LcdCommand>
			break;
		}
	}
	DDRD|=(1<<6);
     fb8:	81 b3       	in	r24, 0x11	; 17
     fba:	80 64       	ori	r24, 0x40	; 64
     fbc:	81 bb       	out	0x11, r24	; 17
	PORTD|=(1<<6);
     fbe:	82 b3       	in	r24, 0x12	; 18
     fc0:	80 64       	ori	r24, 0x40	; 64
     fc2:	82 bb       	out	0x12, r24	; 18
	setTime(11,20,59);
     fc4:	4b e3       	ldi	r20, 0x3B	; 59
     fc6:	64 e1       	ldi	r22, 0x14	; 20
     fc8:	8b e0       	ldi	r24, 0x0B	; 11
     fca:	0e 94 2d 04 	call	0x85a	; 0x85a <setTime>
	
	
//#######################################################################################	
	while (1)
	{	
		Readtime();
     fce:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <Readtime>
		sprintf(lcddata,"%02u:%02u:%02u",hourC,minC,secC);
     fd2:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <secC>
     fd6:	1f 92       	push	r1
     fd8:	8f 93       	push	r24
     fda:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <minC>
     fde:	1f 92       	push	r1
     fe0:	8f 93       	push	r24
     fe2:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <hourC>
     fe6:	1f 92       	push	r1
     fe8:	8f 93       	push	r24
     fea:	80 e9       	ldi	r24, 0x90	; 144
     fec:	91 e0       	ldi	r25, 0x01	; 1
     fee:	9f 93       	push	r25
     ff0:	8f 93       	push	r24
     ff2:	8f e5       	ldi	r24, 0x5F	; 95
     ff4:	92 e0       	ldi	r25, 0x02	; 2
     ff6:	9f 93       	push	r25
     ff8:	8f 93       	push	r24
     ffa:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <sprintf>
		LcdSetCursor(4,0,lcddata);
     ffe:	4f e5       	ldi	r20, 0x5F	; 95
    1000:	52 e0       	ldi	r21, 0x02	; 2
    1002:	60 e0       	ldi	r22, 0x00	; 0
    1004:	84 e0       	ldi	r24, 0x04	; 4
    1006:	0e 94 9d 01 	call	0x33a	; 0x33a <LcdSetCursor>
		
		ADMUX = (1<<REFS0);			//external vcc
    100a:	80 e4       	ldi	r24, 0x40	; 64
    100c:	87 b9       	out	0x07, r24	; 7
		ph=ReadADC(0)*5.0/1024;
    100e:	80 e0       	ldi	r24, 0x00	; 0
    1010:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <ReadADC>
    1014:	bc 01       	movw	r22, r24
    1016:	80 e0       	ldi	r24, 0x00	; 0
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	0e 94 27 0b 	call	0x164e	; 0x164e <__floatunsisf>
    101e:	20 e0       	ldi	r18, 0x00	; 0
    1020:	30 e0       	ldi	r19, 0x00	; 0
    1022:	40 ea       	ldi	r20, 0xA0	; 160
    1024:	50 e4       	ldi	r21, 0x40	; 64
    1026:	0e 94 ba 0b 	call	0x1774	; 0x1774 <__mulsf3>
    102a:	20 e0       	ldi	r18, 0x00	; 0
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	40 e8       	ldi	r20, 0x80	; 128
    1030:	5a e3       	ldi	r21, 0x3A	; 58
    1032:	0e 94 ba 0b 	call	0x1774	; 0x1774 <__mulsf3>
		ph=ph*3.5;
    1036:	20 e0       	ldi	r18, 0x00	; 0
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	40 e6       	ldi	r20, 0x60	; 96
    103c:	50 e4       	ldi	r21, 0x40	; 64
    103e:	0e 94 ba 0b 	call	0x1774	; 0x1774 <__mulsf3>
    1042:	60 93 53 02 	sts	0x0253, r22	; 0x800253 <ph>
    1046:	70 93 54 02 	sts	0x0254, r23	; 0x800254 <ph+0x1>
    104a:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <ph+0x2>
    104e:	90 93 56 02 	sts	0x0256, r25	; 0x800256 <ph+0x3>
		
		ADMUX = (1<<REFS0)|(1<<REFS1);					//internal 2.56 v ref
    1052:	80 ec       	ldi	r24, 0xC0	; 192
    1054:	87 b9       	out	0x07, r24	; 7
		uint16_t TempReading=(ReadADC(1)*0.25024438); //calibrated number
    1056:	81 e0       	ldi	r24, 0x01	; 1
    1058:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <ReadADC>
    105c:	bc 01       	movw	r22, r24
    105e:	80 e0       	ldi	r24, 0x00	; 0
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	0e 94 27 0b 	call	0x164e	; 0x164e <__floatunsisf>
    1066:	28 e0       	ldi	r18, 0x08	; 8
    1068:	30 e2       	ldi	r19, 0x20	; 32
    106a:	40 e8       	ldi	r20, 0x80	; 128
    106c:	5e e3       	ldi	r21, 0x3E	; 62
    106e:	0e 94 ba 0b 	call	0x1774	; 0x1774 <__mulsf3>
    1072:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <__fixunssfsi>
    1076:	16 2f       	mov	r17, r22
    1078:	07 2f       	mov	r16, r23
    107a:	c6 2f       	mov	r28, r22
    107c:	d0 2f       	mov	r29, r16
		
		
		
		PORTD&=~(1<<3);//TRIG pin low
    107e:	82 b3       	in	r24, 0x12	; 18
    1080:	87 7f       	andi	r24, 0xF7	; 247
    1082:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1084:	f5 e8       	ldi	r31, 0x85	; 133
    1086:	fa 95       	dec	r31
    1088:	f1 f7       	brne	.-4      	; 0x1086 <main+0x1ba>
    108a:	00 00       	nop
		_delay_us(50);//wait 50 micro sec
		PORTD|=(1<<3);//TRIG pin high
    108c:	82 b3       	in	r24, 0x12	; 18
    108e:	88 60       	ori	r24, 0x08	; 8
    1090:	82 bb       	out	0x12, r24	; 18
    1092:	25 e8       	ldi	r18, 0x85	; 133
    1094:	2a 95       	dec	r18
    1096:	f1 f7       	brne	.-4      	; 0x1094 <main+0x1c8>
    1098:	00 00       	nop
		_delay_us(50);//wait 50 micro sec
		PORTD&=~(1<<3);////TRIG pin low
    109a:	82 b3       	in	r24, 0x12	; 18
    109c:	87 7f       	andi	r24, 0xF7	; 247
    109e:	82 bb       	out	0x12, r24	; 18
		while(!(PIND&(1<<2)))//wait for pulse
    10a0:	8d b7       	in	r24, 0x3d	; 61
    10a2:	9e b7       	in	r25, 0x3e	; 62
    10a4:	0a 96       	adiw	r24, 0x0a	; 10
    10a6:	0f b6       	in	r0, 0x3f	; 63
    10a8:	f8 94       	cli
    10aa:	9e bf       	out	0x3e, r25	; 62
    10ac:	0f be       	out	0x3f, r0	; 63
    10ae:	8d bf       	out	0x3d, r24	; 61
    10b0:	04 c0       	rjmp	.+8      	; 0x10ba <main+0x1ee>
		TimerCal=0;//rest timer
    10b2:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <TimerCal+0x1>
    10b6:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <TimerCal>
		PORTD&=~(1<<3);//TRIG pin low
		_delay_us(50);//wait 50 micro sec
		PORTD|=(1<<3);//TRIG pin high
		_delay_us(50);//wait 50 micro sec
		PORTD&=~(1<<3);////TRIG pin low
		while(!(PIND&(1<<2)))//wait for pulse
    10ba:	82 9b       	sbis	0x10, 2	; 16
    10bc:	fa cf       	rjmp	.-12     	; 0x10b2 <main+0x1e6>
    10be:	14 c0       	rjmp	.+40     	; 0x10e8 <main+0x21c>
		TimerCal=0;//rest timer
		while((PIND&(1<<2)))////wait for pulse down
		ultraINT0=TimerCal/4.148148148148148;//copy timer value
    10c0:	60 91 48 02 	lds	r22, 0x0248	; 0x800248 <TimerCal>
    10c4:	70 91 49 02 	lds	r23, 0x0249	; 0x800249 <TimerCal+0x1>
    10c8:	80 e0       	ldi	r24, 0x00	; 0
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	0e 94 27 0b 	call	0x164e	; 0x164e <__floatunsisf>
    10d0:	21 ea       	ldi	r18, 0xA1	; 161
    10d2:	3d eb       	ldi	r19, 0xBD	; 189
    10d4:	44 e8       	ldi	r20, 0x84	; 132
    10d6:	50 e4       	ldi	r21, 0x40	; 64
    10d8:	0e 94 86 0a 	call	0x150c	; 0x150c <__divsf3>
    10dc:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <__fixunssfsi>
    10e0:	70 93 47 02 	sts	0x0247, r23	; 0x800247 <__data_end+0x1>
    10e4:	60 93 46 02 	sts	0x0246, r22	; 0x800246 <__data_end>
		PORTD|=(1<<3);//TRIG pin high
		_delay_us(50);//wait 50 micro sec
		PORTD&=~(1<<3);////TRIG pin low
		while(!(PIND&(1<<2)))//wait for pulse
		TimerCal=0;//rest timer
		while((PIND&(1<<2)))////wait for pulse down
    10e8:	82 99       	sbic	0x10, 2	; 16
    10ea:	ea cf       	rjmp	.-44     	; 0x10c0 <main+0x1f4>
		ultraINT0=TimerCal/4.148148148148148;//copy timer value
		
		
		float hx=loadCellRead();
    10ec:	0e 94 a6 06 	call	0xd4c	; 0xd4c <loadCellRead>
		uint16_t weight=hx*1000;
    10f0:	20 e0       	ldi	r18, 0x00	; 0
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	4a e7       	ldi	r20, 0x7A	; 122
    10f6:	54 e4       	ldi	r21, 0x44	; 68
    10f8:	0e 94 ba 0b 	call	0x1774	; 0x1774 <__mulsf3>
    10fc:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <__fixunssfsi>
    1100:	86 2f       	mov	r24, r22
    1102:	97 2f       	mov	r25, r23
    1104:	5c 01       	movw	r10, r24
		
		sprintf(lcddata,"%0.1f %02u %02u %05u",ph,TempReading,ultraINT0,weight);
    1106:	7f 93       	push	r23
    1108:	6f 93       	push	r22
    110a:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <__data_end+0x1>
    110e:	8f 93       	push	r24
    1110:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <__data_end>
    1114:	8f 93       	push	r24
    1116:	0f 93       	push	r16
    1118:	1f 93       	push	r17
    111a:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <ph+0x3>
    111e:	8f 93       	push	r24
    1120:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <ph+0x2>
    1124:	8f 93       	push	r24
    1126:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <ph+0x1>
    112a:	8f 93       	push	r24
    112c:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <ph>
    1130:	8f 93       	push	r24
    1132:	8f e9       	ldi	r24, 0x9F	; 159
    1134:	91 e0       	ldi	r25, 0x01	; 1
    1136:	9f 93       	push	r25
    1138:	8f 93       	push	r24
    113a:	8f e5       	ldi	r24, 0x5F	; 95
    113c:	92 e0       	ldi	r25, 0x02	; 2
    113e:	9f 93       	push	r25
    1140:	8f 93       	push	r24
    1142:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <sprintf>
		LcdSetCursor(0,1,lcddata);
    1146:	4f e5       	ldi	r20, 0x5F	; 95
    1148:	52 e0       	ldi	r21, 0x02	; 2
    114a:	61 e0       	ldi	r22, 0x01	; 1
    114c:	80 e0       	ldi	r24, 0x00	; 0
    114e:	0e 94 9d 01 	call	0x33a	; 0x33a <LcdSetCursor>
		
		if ((TempReading<tempuratureLimit[0])||(TempReading>tempuratureLimit[1]))
    1152:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <tempuratureLimit>
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	ed b7       	in	r30, 0x3d	; 61
    115a:	fe b7       	in	r31, 0x3e	; 62
    115c:	3e 96       	adiw	r30, 0x0e	; 14
    115e:	0f b6       	in	r0, 0x3f	; 63
    1160:	f8 94       	cli
    1162:	fe bf       	out	0x3e, r31	; 62
    1164:	0f be       	out	0x3f, r0	; 63
    1166:	ed bf       	out	0x3d, r30	; 61
    1168:	c8 17       	cp	r28, r24
    116a:	d9 07       	cpc	r29, r25
    116c:	30 f0       	brcs	.+12     	; 0x117a <main+0x2ae>
    116e:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <tempuratureLimit+0x1>
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	8c 17       	cp	r24, r28
    1176:	9d 07       	cpc	r25, r29
    1178:	20 f4       	brcc	.+8      	; 0x1182 <main+0x2b6>
		{
			sendSMS("Temperature's Limit Exceeded");
    117a:	84 eb       	ldi	r24, 0xB4	; 180
    117c:	91 e0       	ldi	r25, 0x01	; 1
    117e:	0e 94 36 06 	call	0xc6c	; 0xc6c <sendSMS>
		}
		
		if ((ph<phLimit[0])||(ph>phLimit[1]))
    1182:	60 91 65 00 	lds	r22, 0x0065	; 0x800065 <phLimit>
    1186:	70 91 66 00 	lds	r23, 0x0066	; 0x800066 <phLimit+0x1>
    118a:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <phLimit+0x2>
    118e:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <phLimit+0x3>
    1192:	c0 90 53 02 	lds	r12, 0x0253	; 0x800253 <ph>
    1196:	d0 90 54 02 	lds	r13, 0x0254	; 0x800254 <ph+0x1>
    119a:	e0 90 55 02 	lds	r14, 0x0255	; 0x800255 <ph+0x2>
    119e:	f0 90 56 02 	lds	r15, 0x0256	; 0x800256 <ph+0x3>
    11a2:	a7 01       	movw	r20, r14
    11a4:	96 01       	movw	r18, r12
    11a6:	0e 94 b5 0b 	call	0x176a	; 0x176a <__gesf2>
    11aa:	18 16       	cp	r1, r24
    11ac:	74 f0       	brlt	.+28     	; 0x11ca <main+0x2fe>
    11ae:	20 91 69 00 	lds	r18, 0x0069	; 0x800069 <phLimit+0x4>
    11b2:	30 91 6a 00 	lds	r19, 0x006A	; 0x80006a <phLimit+0x5>
    11b6:	40 91 6b 00 	lds	r20, 0x006B	; 0x80006b <phLimit+0x6>
    11ba:	50 91 6c 00 	lds	r21, 0x006C	; 0x80006c <phLimit+0x7>
    11be:	c7 01       	movw	r24, r14
    11c0:	b6 01       	movw	r22, r12
    11c2:	0e 94 b5 0b 	call	0x176a	; 0x176a <__gesf2>
    11c6:	18 16       	cp	r1, r24
    11c8:	24 f4       	brge	.+8      	; 0x11d2 <main+0x306>
		{
			sendSMS("Ph Limit Exceeded");
    11ca:	81 ed       	ldi	r24, 0xD1	; 209
    11cc:	91 e0       	ldi	r25, 0x01	; 1
    11ce:	0e 94 36 06 	call	0xc6c	; 0xc6c <sendSMS>
		}
		if (weight<foodLimit)
    11d2:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <foodLimit>
    11d6:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <foodLimit+0x1>
    11da:	a8 16       	cp	r10, r24
    11dc:	b9 06       	cpc	r11, r25
    11de:	20 f4       	brcc	.+8      	; 0x11e8 <main+0x31c>
		{
			sendSMS("Fill the foods");
    11e0:	83 ee       	ldi	r24, 0xE3	; 227
    11e2:	91 e0       	ldi	r25, 0x01	; 1
    11e4:	0e 94 36 06 	call	0xc6c	; 0xc6c <sendSMS>
		}
		if (PINA&(0b11100))
    11e8:	89 b3       	in	r24, 0x19	; 25
    11ea:	8c 71       	andi	r24, 0x1C	; 28
    11ec:	21 f0       	breq	.+8      	; 0x11f6 <main+0x32a>
		{
			sendSMS("Motion detected");
    11ee:	82 ef       	ldi	r24, 0xF2	; 242
    11f0:	91 e0       	ldi	r25, 0x01	; 1
    11f2:	0e 94 36 06 	call	0xc6c	; 0xc6c <sendSMS>
		}
		
		if (ultraINT0<50)
    11f6:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <__data_end>
    11fa:	90 91 47 02 	lds	r25, 0x0247	; 0x800247 <__data_end+0x1>
    11fe:	c2 97       	sbiw	r24, 0x32	; 50
    1200:	20 f4       	brcc	.+8      	; 0x120a <main+0x33e>
		{
			sendSMS("Water level low");
    1202:	82 e0       	ldi	r24, 0x02	; 2
    1204:	92 e0       	ldi	r25, 0x02	; 2
    1206:	0e 94 36 06 	call	0xc6c	; 0xc6c <sendSMS>
		}
		if (ultraINT0>80)
    120a:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <__data_end>
    120e:	90 91 47 02 	lds	r25, 0x0247	; 0x800247 <__data_end+0x1>
    1212:	81 35       	cpi	r24, 0x51	; 81
    1214:	91 05       	cpc	r25, r1
    1216:	20 f0       	brcs	.+8      	; 0x1220 <main+0x354>
		{
			sendSMS("Water level High");
    1218:	82 e1       	ldi	r24, 0x12	; 18
    121a:	92 e0       	ldi	r25, 0x02	; 2
    121c:	0e 94 36 06 	call	0xc6c	; 0xc6c <sendSMS>
		}
		
		//sprintf(lcddata,"%02u:%02u:%02u:%02u:%02u:%02u",hourC,feedingTimes[0][0],minC,feedingTimes[0][1]);
		//LcdSetCursor(0,0,lcddata);
		
		if ((lampTimes[0]==hourC)&&(lampTimes[1]==minC))
    1220:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <lampTimes>
    1224:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <hourC>
    1228:	98 13       	cpse	r25, r24
    122a:	09 c0       	rjmp	.+18     	; 0x123e <main+0x372>
    122c:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <lampTimes+0x1>
    1230:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <minC>
    1234:	98 13       	cpse	r25, r24
    1236:	03 c0       	rjmp	.+6      	; 0x123e <main+0x372>
		{PORTC|=(1<<6);//lamp on
    1238:	85 b3       	in	r24, 0x15	; 21
    123a:	80 64       	ori	r24, 0x40	; 64
    123c:	85 bb       	out	0x15, r24	; 21
		}
		
		if ((lampTimes[3]==hourC)&&(lampTimes[4]==minC))
    123e:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <lampTimes+0x3>
    1242:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <hourC>
    1246:	98 13       	cpse	r25, r24
    1248:	09 c0       	rjmp	.+18     	; 0x125c <main+0x390>
    124a:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <lampTimes+0x4>
    124e:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <minC>
    1252:	98 13       	cpse	r25, r24
    1254:	03 c0       	rjmp	.+6      	; 0x125c <main+0x390>
		{PORTC&=~(1<<6);//lamp off
    1256:	85 b3       	in	r24, 0x15	; 21
    1258:	8f 7b       	andi	r24, 0xBF	; 191
    125a:	85 bb       	out	0x15, r24	; 21
		}
		
		
		//Feeding
		if ((hourC==feedingTimes[0][0]&&minC==feedingTimes[0][1])||(hourC==feedingTimes[1][0]&&minC==feedingTimes[1][1])||(hourC==feedingTimes[2][0]&&minC==feedingTimes[2][1]))
    125c:	90 91 4c 02 	lds	r25, 0x024C	; 0x80024c <feedingTimes>
    1260:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <hourC>
    1264:	98 13       	cpse	r25, r24
    1266:	06 c0       	rjmp	.+12     	; 0x1274 <main+0x3a8>
    1268:	20 91 4d 02 	lds	r18, 0x024D	; 0x80024d <feedingTimes+0x1>
    126c:	90 91 5c 02 	lds	r25, 0x025C	; 0x80025c <minC>
    1270:	29 17       	cp	r18, r25
    1272:	a1 f0       	breq	.+40     	; 0x129c <main+0x3d0>
    1274:	90 91 4e 02 	lds	r25, 0x024E	; 0x80024e <feedingTimes+0x2>
    1278:	89 13       	cpse	r24, r25
    127a:	06 c0       	rjmp	.+12     	; 0x1288 <main+0x3bc>
    127c:	20 91 4f 02 	lds	r18, 0x024F	; 0x80024f <feedingTimes+0x3>
    1280:	90 91 5c 02 	lds	r25, 0x025C	; 0x80025c <minC>
    1284:	29 17       	cp	r18, r25
    1286:	51 f0       	breq	.+20     	; 0x129c <main+0x3d0>
    1288:	90 91 50 02 	lds	r25, 0x0250	; 0x800250 <feedingTimes+0x4>
    128c:	89 13       	cpse	r24, r25
    128e:	10 c0       	rjmp	.+32     	; 0x12b0 <main+0x3e4>
    1290:	90 91 51 02 	lds	r25, 0x0251	; 0x800251 <feedingTimes+0x5>
    1294:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <minC>
    1298:	98 13       	cpse	r25, r24
    129a:	0a c0       	rjmp	.+20     	; 0x12b0 <main+0x3e4>
		{
			feedingTimeCheckBit=1;
    129c:	81 e0       	ldi	r24, 0x01	; 1
    129e:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <feedingTimeCheckBit>
			if (secC<2)
    12a2:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <secC>
    12a6:	82 30       	cpi	r24, 0x02	; 2
    12a8:	18 f4       	brcc	.+6      	; 0x12b0 <main+0x3e4>
			{
				feedingTimeCheckBit=2;
    12aa:	82 e0       	ldi	r24, 0x02	; 2
    12ac:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <feedingTimeCheckBit>
			}
		}
		
		
		if (feedingTimeCheckBit==2)
    12b0:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <feedingTimeCheckBit>
    12b4:	82 30       	cpi	r24, 0x02	; 2
    12b6:	09 f0       	breq	.+2      	; 0x12ba <main+0x3ee>
    12b8:	b2 c0       	rjmp	.+356    	; 0x141e <main+0x552>
		{
			
			PORTD&=~(1<<6);
    12ba:	82 b3       	in	r24, 0x12	; 18
    12bc:	8f 7b       	andi	r24, 0xBF	; 191
    12be:	82 bb       	out	0x12, r24	; 18
			LcdCommand(LCD_CLEARDISPLAY);
    12c0:	81 e0       	ldi	r24, 0x01	; 1
    12c2:	0e 94 4d 01 	call	0x29a	; 0x29a <LcdCommand>
			LcdSetCursor(0,0,"Feeding");
    12c6:	43 e2       	ldi	r20, 0x23	; 35
    12c8:	52 e0       	ldi	r21, 0x02	; 2
    12ca:	60 e0       	ldi	r22, 0x00	; 0
    12cc:	80 e0       	ldi	r24, 0x00	; 0
    12ce:	0e 94 9d 01 	call	0x33a	; 0x33a <LcdSetCursor>
			PORTC|=(1<<7);
    12d2:	85 b3       	in	r24, 0x15	; 21
    12d4:	80 68       	ori	r24, 0x80	; 128
    12d6:	85 bb       	out	0x15, r24	; 21
			DDRD|=(1<<7);
    12d8:	81 b3       	in	r24, 0x11	; 17
    12da:	80 68       	ori	r24, 0x80	; 128
    12dc:	81 bb       	out	0x11, r24	; 17

			for(uint8_t j=0;j<100;j++){
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	1d c0       	rjmp	.+58     	; 0x131c <main+0x450>
				PORTD|=(1<<7);
    12e2:	82 b3       	in	r24, 0x12	; 18
    12e4:	80 68       	ori	r24, 0x80	; 128
    12e6:	82 bb       	out	0x12, r24	; 18
				for(uint8_t i=0;i<10;i++){
    12e8:	80 e0       	ldi	r24, 0x00	; 0
    12ea:	07 c0       	rjmp	.+14     	; 0x12fa <main+0x42e>
    12ec:	e7 ec       	ldi	r30, 0xC7	; 199
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	31 97       	sbiw	r30, 0x01	; 1
    12f2:	f1 f7       	brne	.-4      	; 0x12f0 <main+0x424>
    12f4:	00 c0       	rjmp	.+0      	; 0x12f6 <main+0x42a>
    12f6:	00 00       	nop
    12f8:	8f 5f       	subi	r24, 0xFF	; 255
    12fa:	8a 30       	cpi	r24, 0x0A	; 10
    12fc:	b8 f3       	brcs	.-18     	; 0x12ec <main+0x420>
					_delay_us(100);
				}
				PORTD&=~(1<<7);
    12fe:	82 b3       	in	r24, 0x12	; 18
    1300:	8f 77       	andi	r24, 0x7F	; 127
    1302:	82 bb       	out	0x12, r24	; 18
				
				uint8_t ser=200-10;
				
				for(uint8_t i=0;i<ser;i++){
    1304:	80 e0       	ldi	r24, 0x00	; 0
    1306:	07 c0       	rjmp	.+14     	; 0x1316 <main+0x44a>
    1308:	e7 ec       	ldi	r30, 0xC7	; 199
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	31 97       	sbiw	r30, 0x01	; 1
    130e:	f1 f7       	brne	.-4      	; 0x130c <main+0x440>
    1310:	00 c0       	rjmp	.+0      	; 0x1312 <main+0x446>
    1312:	00 00       	nop
    1314:	8f 5f       	subi	r24, 0xFF	; 255
    1316:	8e 3b       	cpi	r24, 0xBE	; 190
    1318:	b8 f3       	brcs	.-18     	; 0x1308 <main+0x43c>
			LcdCommand(LCD_CLEARDISPLAY);
			LcdSetCursor(0,0,"Feeding");
			PORTC|=(1<<7);
			DDRD|=(1<<7);

			for(uint8_t j=0;j<100;j++){
    131a:	9f 5f       	subi	r25, 0xFF	; 255
    131c:	94 36       	cpi	r25, 0x64	; 100
    131e:	08 f3       	brcs	.-62     	; 0x12e2 <main+0x416>
					_delay_us(100);
				}
			}


			hx=loadCellRead();
    1320:	0e 94 a6 06 	call	0xd4c	; 0xd4c <loadCellRead>
			uint16_t weight=hx*1000;
    1324:	20 e0       	ldi	r18, 0x00	; 0
    1326:	30 e0       	ldi	r19, 0x00	; 0
    1328:	4a e7       	ldi	r20, 0x7A	; 122
    132a:	54 e4       	ldi	r21, 0x44	; 68
    132c:	0e 94 ba 0b 	call	0x1774	; 0x1774 <__mulsf3>
    1330:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <__fixunssfsi>
    1334:	8b 01       	movw	r16, r22
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1336:	ff ef       	ldi	r31, 0xFF	; 255
    1338:	20 e7       	ldi	r18, 0x70	; 112
    133a:	32 e0       	ldi	r19, 0x02	; 2
    133c:	f1 50       	subi	r31, 0x01	; 1
    133e:	20 40       	sbci	r18, 0x00	; 0
    1340:	30 40       	sbci	r19, 0x00	; 0
    1342:	e1 f7       	brne	.-8      	; 0x133c <main+0x470>
    1344:	00 c0       	rjmp	.+0      	; 0x1346 <main+0x47a>
    1346:	00 00       	nop
			_delay_ms(100);
			while(1){
				hx=loadCellRead();
    1348:	0e 94 a6 06 	call	0xd4c	; 0xd4c <loadCellRead>
				uint16_t weightNow=hx*1000;
    134c:	20 e0       	ldi	r18, 0x00	; 0
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	4a e7       	ldi	r20, 0x7A	; 122
    1352:	54 e4       	ldi	r21, 0x44	; 68
    1354:	0e 94 ba 0b 	call	0x1774	; 0x1774 <__mulsf3>
    1358:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <__fixunssfsi>
				weightNow+=feedingWeight;
    135c:	c0 91 4a 02 	lds	r28, 0x024A	; 0x80024a <feedingWeight>
    1360:	d0 91 4b 02 	lds	r29, 0x024B	; 0x80024b <feedingWeight+0x1>
    1364:	c6 0f       	add	r28, r22
    1366:	d7 1f       	adc	r29, r23
				LcdSetCursor(0,1,lcddata);
    1368:	4f e5       	ldi	r20, 0x5F	; 95
    136a:	52 e0       	ldi	r21, 0x02	; 2
    136c:	61 e0       	ldi	r22, 0x01	; 1
    136e:	80 e0       	ldi	r24, 0x00	; 0
    1370:	0e 94 9d 01 	call	0x33a	; 0x33a <LcdSetCursor>
				sprintf(0,"%04u %04u",weightNow,weight);
    1374:	1f 93       	push	r17
    1376:	0f 93       	push	r16
    1378:	df 93       	push	r29
    137a:	cf 93       	push	r28
    137c:	8b e2       	ldi	r24, 0x2B	; 43
    137e:	92 e0       	ldi	r25, 0x02	; 2
    1380:	9f 93       	push	r25
    1382:	8f 93       	push	r24
    1384:	1f 92       	push	r1
    1386:	1f 92       	push	r1
    1388:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <sprintf>
    138c:	ef ef       	ldi	r30, 0xFF	; 255
    138e:	f0 e7       	ldi	r31, 0x70	; 112
    1390:	22 e0       	ldi	r18, 0x02	; 2
    1392:	e1 50       	subi	r30, 0x01	; 1
    1394:	f0 40       	sbci	r31, 0x00	; 0
    1396:	20 40       	sbci	r18, 0x00	; 0
    1398:	e1 f7       	brne	.-8      	; 0x1392 <main+0x4c6>
    139a:	00 c0       	rjmp	.+0      	; 0x139c <main+0x4d0>
    139c:	00 00       	nop
				_delay_ms(100);
				if (weightNow<=weight)
    139e:	8d b7       	in	r24, 0x3d	; 61
    13a0:	9e b7       	in	r25, 0x3e	; 62
    13a2:	08 96       	adiw	r24, 0x08	; 8
    13a4:	0f b6       	in	r0, 0x3f	; 63
    13a6:	f8 94       	cli
    13a8:	9e bf       	out	0x3e, r25	; 62
    13aa:	0f be       	out	0x3f, r0	; 63
    13ac:	8d bf       	out	0x3d, r24	; 61
    13ae:	0c 17       	cp	r16, r28
    13b0:	1d 07       	cpc	r17, r29
    13b2:	50 f2       	brcs	.-108    	; 0x1348 <main+0x47c>
				{
					feedingTimeCheckBit=1;
    13b4:	81 e0       	ldi	r24, 0x01	; 1
    13b6:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <feedingTimeCheckBit>
					break;
				}

			}
			LcdCommand(LCD_CLEARDISPLAY);
    13ba:	0e 94 4d 01 	call	0x29a	; 0x29a <LcdCommand>

			for(uint8_t j=0;j<100;j++){
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	1d c0       	rjmp	.+58     	; 0x13fc <main+0x530>
				
				PORTD|=(1<<4);
    13c2:	82 b3       	in	r24, 0x12	; 18
    13c4:	80 61       	ori	r24, 0x10	; 16
    13c6:	82 bb       	out	0x12, r24	; 18
				for(uint8_t i=0;i<15;i++){
    13c8:	80 e0       	ldi	r24, 0x00	; 0
    13ca:	07 c0       	rjmp	.+14     	; 0x13da <main+0x50e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    13cc:	e7 ec       	ldi	r30, 0xC7	; 199
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	31 97       	sbiw	r30, 0x01	; 1
    13d2:	f1 f7       	brne	.-4      	; 0x13d0 <main+0x504>
    13d4:	00 c0       	rjmp	.+0      	; 0x13d6 <main+0x50a>
    13d6:	00 00       	nop
    13d8:	8f 5f       	subi	r24, 0xFF	; 255
    13da:	8f 30       	cpi	r24, 0x0F	; 15
    13dc:	b8 f3       	brcs	.-18     	; 0x13cc <main+0x500>
					_delay_us(100);
				}
				PORTD&=~(1<<4);
    13de:	82 b3       	in	r24, 0x12	; 18
    13e0:	8f 7e       	andi	r24, 0xEF	; 239
    13e2:	82 bb       	out	0x12, r24	; 18
				
				uint8_t ser=200-15;
				
				for(uint8_t i=0;i<15;i++){
    13e4:	80 e0       	ldi	r24, 0x00	; 0
    13e6:	07 c0       	rjmp	.+14     	; 0x13f6 <main+0x52a>
    13e8:	e7 ec       	ldi	r30, 0xC7	; 199
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	31 97       	sbiw	r30, 0x01	; 1
    13ee:	f1 f7       	brne	.-4      	; 0x13ec <main+0x520>
    13f0:	00 c0       	rjmp	.+0      	; 0x13f2 <main+0x526>
    13f2:	00 00       	nop
    13f4:	8f 5f       	subi	r24, 0xFF	; 255
    13f6:	8f 30       	cpi	r24, 0x0F	; 15
    13f8:	b8 f3       	brcs	.-18     	; 0x13e8 <main+0x51c>
				}

			}
			LcdCommand(LCD_CLEARDISPLAY);

			for(uint8_t j=0;j<100;j++){
    13fa:	9f 5f       	subi	r25, 0xFF	; 255
    13fc:	94 36       	cpi	r25, 0x64	; 100
    13fe:	08 f3       	brcs	.-62     	; 0x13c2 <main+0x4f6>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1400:	ff ef       	ldi	r31, 0xFF	; 255
    1402:	24 e3       	ldi	r18, 0x34	; 52
    1404:	3c e0       	ldi	r19, 0x0C	; 12
    1406:	f1 50       	subi	r31, 0x01	; 1
    1408:	20 40       	sbci	r18, 0x00	; 0
    140a:	30 40       	sbci	r19, 0x00	; 0
    140c:	e1 f7       	brne	.-8      	; 0x1406 <main+0x53a>
    140e:	00 c0       	rjmp	.+0      	; 0x1410 <main+0x544>
    1410:	00 00       	nop
				
				for(uint8_t i=0;i<15;i++){
					_delay_us(100);
				}
			}_delay_ms(500);
			PORTC&=~(1<<7);
    1412:	85 b3       	in	r24, 0x15	; 21
    1414:	8f 77       	andi	r24, 0x7F	; 127
    1416:	85 bb       	out	0x15, r24	; 21
			PORTD|=(1<<6);
    1418:	82 b3       	in	r24, 0x12	; 18
    141a:	80 64       	ori	r24, 0x40	; 64
    141c:	82 bb       	out	0x12, r24	; 18
    141e:	8f ef       	ldi	r24, 0xFF	; 255
    1420:	90 e7       	ldi	r25, 0x70	; 112
    1422:	e2 e0       	ldi	r30, 0x02	; 2
    1424:	81 50       	subi	r24, 0x01	; 1
    1426:	90 40       	sbci	r25, 0x00	; 0
    1428:	e0 40       	sbci	r30, 0x00	; 0
    142a:	e1 f7       	brne	.-8      	; 0x1424 <main+0x558>
    142c:	00 c0       	rjmp	.+0      	; 0x142e <main+0x562>
    142e:	00 00       	nop
    1430:	ce cd       	rjmp	.-1124   	; 0xfce <main+0x102>

00001432 <__subsf3>:
    1432:	50 58       	subi	r21, 0x80	; 128

00001434 <__addsf3>:
    1434:	bb 27       	eor	r27, r27
    1436:	aa 27       	eor	r26, r26
    1438:	0e 94 31 0a 	call	0x1462	; 0x1462 <__addsf3x>
    143c:	0c 94 7b 0b 	jmp	0x16f6	; 0x16f6 <__fp_round>
    1440:	0e 94 6d 0b 	call	0x16da	; 0x16da <__fp_pscA>
    1444:	38 f0       	brcs	.+14     	; 0x1454 <__addsf3+0x20>
    1446:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <__fp_pscB>
    144a:	20 f0       	brcs	.+8      	; 0x1454 <__addsf3+0x20>
    144c:	39 f4       	brne	.+14     	; 0x145c <__addsf3+0x28>
    144e:	9f 3f       	cpi	r25, 0xFF	; 255
    1450:	19 f4       	brne	.+6      	; 0x1458 <__addsf3+0x24>
    1452:	26 f4       	brtc	.+8      	; 0x145c <__addsf3+0x28>
    1454:	0c 94 6a 0b 	jmp	0x16d4	; 0x16d4 <__fp_nan>
    1458:	0e f4       	brtc	.+2      	; 0x145c <__addsf3+0x28>
    145a:	e0 95       	com	r30
    145c:	e7 fb       	bst	r30, 7
    145e:	0c 94 64 0b 	jmp	0x16c8	; 0x16c8 <__fp_inf>

00001462 <__addsf3x>:
    1462:	e9 2f       	mov	r30, r25
    1464:	0e 94 8c 0b 	call	0x1718	; 0x1718 <__fp_split3>
    1468:	58 f3       	brcs	.-42     	; 0x1440 <__addsf3+0xc>
    146a:	ba 17       	cp	r27, r26
    146c:	62 07       	cpc	r22, r18
    146e:	73 07       	cpc	r23, r19
    1470:	84 07       	cpc	r24, r20
    1472:	95 07       	cpc	r25, r21
    1474:	20 f0       	brcs	.+8      	; 0x147e <__addsf3x+0x1c>
    1476:	79 f4       	brne	.+30     	; 0x1496 <__addsf3x+0x34>
    1478:	a6 f5       	brtc	.+104    	; 0x14e2 <__addsf3x+0x80>
    147a:	0c 94 ae 0b 	jmp	0x175c	; 0x175c <__fp_zero>
    147e:	0e f4       	brtc	.+2      	; 0x1482 <__addsf3x+0x20>
    1480:	e0 95       	com	r30
    1482:	0b 2e       	mov	r0, r27
    1484:	ba 2f       	mov	r27, r26
    1486:	a0 2d       	mov	r26, r0
    1488:	0b 01       	movw	r0, r22
    148a:	b9 01       	movw	r22, r18
    148c:	90 01       	movw	r18, r0
    148e:	0c 01       	movw	r0, r24
    1490:	ca 01       	movw	r24, r20
    1492:	a0 01       	movw	r20, r0
    1494:	11 24       	eor	r1, r1
    1496:	ff 27       	eor	r31, r31
    1498:	59 1b       	sub	r21, r25
    149a:	99 f0       	breq	.+38     	; 0x14c2 <__addsf3x+0x60>
    149c:	59 3f       	cpi	r21, 0xF9	; 249
    149e:	50 f4       	brcc	.+20     	; 0x14b4 <__addsf3x+0x52>
    14a0:	50 3e       	cpi	r21, 0xE0	; 224
    14a2:	68 f1       	brcs	.+90     	; 0x14fe <__addsf3x+0x9c>
    14a4:	1a 16       	cp	r1, r26
    14a6:	f0 40       	sbci	r31, 0x00	; 0
    14a8:	a2 2f       	mov	r26, r18
    14aa:	23 2f       	mov	r18, r19
    14ac:	34 2f       	mov	r19, r20
    14ae:	44 27       	eor	r20, r20
    14b0:	58 5f       	subi	r21, 0xF8	; 248
    14b2:	f3 cf       	rjmp	.-26     	; 0x149a <__addsf3x+0x38>
    14b4:	46 95       	lsr	r20
    14b6:	37 95       	ror	r19
    14b8:	27 95       	ror	r18
    14ba:	a7 95       	ror	r26
    14bc:	f0 40       	sbci	r31, 0x00	; 0
    14be:	53 95       	inc	r21
    14c0:	c9 f7       	brne	.-14     	; 0x14b4 <__addsf3x+0x52>
    14c2:	7e f4       	brtc	.+30     	; 0x14e2 <__addsf3x+0x80>
    14c4:	1f 16       	cp	r1, r31
    14c6:	ba 0b       	sbc	r27, r26
    14c8:	62 0b       	sbc	r22, r18
    14ca:	73 0b       	sbc	r23, r19
    14cc:	84 0b       	sbc	r24, r20
    14ce:	ba f0       	brmi	.+46     	; 0x14fe <__addsf3x+0x9c>
    14d0:	91 50       	subi	r25, 0x01	; 1
    14d2:	a1 f0       	breq	.+40     	; 0x14fc <__addsf3x+0x9a>
    14d4:	ff 0f       	add	r31, r31
    14d6:	bb 1f       	adc	r27, r27
    14d8:	66 1f       	adc	r22, r22
    14da:	77 1f       	adc	r23, r23
    14dc:	88 1f       	adc	r24, r24
    14de:	c2 f7       	brpl	.-16     	; 0x14d0 <__addsf3x+0x6e>
    14e0:	0e c0       	rjmp	.+28     	; 0x14fe <__addsf3x+0x9c>
    14e2:	ba 0f       	add	r27, r26
    14e4:	62 1f       	adc	r22, r18
    14e6:	73 1f       	adc	r23, r19
    14e8:	84 1f       	adc	r24, r20
    14ea:	48 f4       	brcc	.+18     	; 0x14fe <__addsf3x+0x9c>
    14ec:	87 95       	ror	r24
    14ee:	77 95       	ror	r23
    14f0:	67 95       	ror	r22
    14f2:	b7 95       	ror	r27
    14f4:	f7 95       	ror	r31
    14f6:	9e 3f       	cpi	r25, 0xFE	; 254
    14f8:	08 f0       	brcs	.+2      	; 0x14fc <__addsf3x+0x9a>
    14fa:	b0 cf       	rjmp	.-160    	; 0x145c <__addsf3+0x28>
    14fc:	93 95       	inc	r25
    14fe:	88 0f       	add	r24, r24
    1500:	08 f0       	brcs	.+2      	; 0x1504 <__addsf3x+0xa2>
    1502:	99 27       	eor	r25, r25
    1504:	ee 0f       	add	r30, r30
    1506:	97 95       	ror	r25
    1508:	87 95       	ror	r24
    150a:	08 95       	ret

0000150c <__divsf3>:
    150c:	0e 94 9a 0a 	call	0x1534	; 0x1534 <__divsf3x>
    1510:	0c 94 7b 0b 	jmp	0x16f6	; 0x16f6 <__fp_round>
    1514:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <__fp_pscB>
    1518:	58 f0       	brcs	.+22     	; 0x1530 <__divsf3+0x24>
    151a:	0e 94 6d 0b 	call	0x16da	; 0x16da <__fp_pscA>
    151e:	40 f0       	brcs	.+16     	; 0x1530 <__divsf3+0x24>
    1520:	29 f4       	brne	.+10     	; 0x152c <__divsf3+0x20>
    1522:	5f 3f       	cpi	r21, 0xFF	; 255
    1524:	29 f0       	breq	.+10     	; 0x1530 <__divsf3+0x24>
    1526:	0c 94 64 0b 	jmp	0x16c8	; 0x16c8 <__fp_inf>
    152a:	51 11       	cpse	r21, r1
    152c:	0c 94 af 0b 	jmp	0x175e	; 0x175e <__fp_szero>
    1530:	0c 94 6a 0b 	jmp	0x16d4	; 0x16d4 <__fp_nan>

00001534 <__divsf3x>:
    1534:	0e 94 8c 0b 	call	0x1718	; 0x1718 <__fp_split3>
    1538:	68 f3       	brcs	.-38     	; 0x1514 <__divsf3+0x8>

0000153a <__divsf3_pse>:
    153a:	99 23       	and	r25, r25
    153c:	b1 f3       	breq	.-20     	; 0x152a <__divsf3+0x1e>
    153e:	55 23       	and	r21, r21
    1540:	91 f3       	breq	.-28     	; 0x1526 <__divsf3+0x1a>
    1542:	95 1b       	sub	r25, r21
    1544:	55 0b       	sbc	r21, r21
    1546:	bb 27       	eor	r27, r27
    1548:	aa 27       	eor	r26, r26
    154a:	62 17       	cp	r22, r18
    154c:	73 07       	cpc	r23, r19
    154e:	84 07       	cpc	r24, r20
    1550:	38 f0       	brcs	.+14     	; 0x1560 <__divsf3_pse+0x26>
    1552:	9f 5f       	subi	r25, 0xFF	; 255
    1554:	5f 4f       	sbci	r21, 0xFF	; 255
    1556:	22 0f       	add	r18, r18
    1558:	33 1f       	adc	r19, r19
    155a:	44 1f       	adc	r20, r20
    155c:	aa 1f       	adc	r26, r26
    155e:	a9 f3       	breq	.-22     	; 0x154a <__divsf3_pse+0x10>
    1560:	35 d0       	rcall	.+106    	; 0x15cc <__divsf3_pse+0x92>
    1562:	0e 2e       	mov	r0, r30
    1564:	3a f0       	brmi	.+14     	; 0x1574 <__divsf3_pse+0x3a>
    1566:	e0 e8       	ldi	r30, 0x80	; 128
    1568:	32 d0       	rcall	.+100    	; 0x15ce <__divsf3_pse+0x94>
    156a:	91 50       	subi	r25, 0x01	; 1
    156c:	50 40       	sbci	r21, 0x00	; 0
    156e:	e6 95       	lsr	r30
    1570:	00 1c       	adc	r0, r0
    1572:	ca f7       	brpl	.-14     	; 0x1566 <__divsf3_pse+0x2c>
    1574:	2b d0       	rcall	.+86     	; 0x15cc <__divsf3_pse+0x92>
    1576:	fe 2f       	mov	r31, r30
    1578:	29 d0       	rcall	.+82     	; 0x15cc <__divsf3_pse+0x92>
    157a:	66 0f       	add	r22, r22
    157c:	77 1f       	adc	r23, r23
    157e:	88 1f       	adc	r24, r24
    1580:	bb 1f       	adc	r27, r27
    1582:	26 17       	cp	r18, r22
    1584:	37 07       	cpc	r19, r23
    1586:	48 07       	cpc	r20, r24
    1588:	ab 07       	cpc	r26, r27
    158a:	b0 e8       	ldi	r27, 0x80	; 128
    158c:	09 f0       	breq	.+2      	; 0x1590 <__divsf3_pse+0x56>
    158e:	bb 0b       	sbc	r27, r27
    1590:	80 2d       	mov	r24, r0
    1592:	bf 01       	movw	r22, r30
    1594:	ff 27       	eor	r31, r31
    1596:	93 58       	subi	r25, 0x83	; 131
    1598:	5f 4f       	sbci	r21, 0xFF	; 255
    159a:	3a f0       	brmi	.+14     	; 0x15aa <__divsf3_pse+0x70>
    159c:	9e 3f       	cpi	r25, 0xFE	; 254
    159e:	51 05       	cpc	r21, r1
    15a0:	78 f0       	brcs	.+30     	; 0x15c0 <__divsf3_pse+0x86>
    15a2:	0c 94 64 0b 	jmp	0x16c8	; 0x16c8 <__fp_inf>
    15a6:	0c 94 af 0b 	jmp	0x175e	; 0x175e <__fp_szero>
    15aa:	5f 3f       	cpi	r21, 0xFF	; 255
    15ac:	e4 f3       	brlt	.-8      	; 0x15a6 <__divsf3_pse+0x6c>
    15ae:	98 3e       	cpi	r25, 0xE8	; 232
    15b0:	d4 f3       	brlt	.-12     	; 0x15a6 <__divsf3_pse+0x6c>
    15b2:	86 95       	lsr	r24
    15b4:	77 95       	ror	r23
    15b6:	67 95       	ror	r22
    15b8:	b7 95       	ror	r27
    15ba:	f7 95       	ror	r31
    15bc:	9f 5f       	subi	r25, 0xFF	; 255
    15be:	c9 f7       	brne	.-14     	; 0x15b2 <__divsf3_pse+0x78>
    15c0:	88 0f       	add	r24, r24
    15c2:	91 1d       	adc	r25, r1
    15c4:	96 95       	lsr	r25
    15c6:	87 95       	ror	r24
    15c8:	97 f9       	bld	r25, 7
    15ca:	08 95       	ret
    15cc:	e1 e0       	ldi	r30, 0x01	; 1
    15ce:	66 0f       	add	r22, r22
    15d0:	77 1f       	adc	r23, r23
    15d2:	88 1f       	adc	r24, r24
    15d4:	bb 1f       	adc	r27, r27
    15d6:	62 17       	cp	r22, r18
    15d8:	73 07       	cpc	r23, r19
    15da:	84 07       	cpc	r24, r20
    15dc:	ba 07       	cpc	r27, r26
    15de:	20 f0       	brcs	.+8      	; 0x15e8 <__divsf3_pse+0xae>
    15e0:	62 1b       	sub	r22, r18
    15e2:	73 0b       	sbc	r23, r19
    15e4:	84 0b       	sbc	r24, r20
    15e6:	ba 0b       	sbc	r27, r26
    15e8:	ee 1f       	adc	r30, r30
    15ea:	88 f7       	brcc	.-30     	; 0x15ce <__divsf3_pse+0x94>
    15ec:	e0 95       	com	r30
    15ee:	08 95       	ret

000015f0 <__fixunssfsi>:
    15f0:	0e 94 94 0b 	call	0x1728	; 0x1728 <__fp_splitA>
    15f4:	88 f0       	brcs	.+34     	; 0x1618 <__fixunssfsi+0x28>
    15f6:	9f 57       	subi	r25, 0x7F	; 127
    15f8:	98 f0       	brcs	.+38     	; 0x1620 <__fixunssfsi+0x30>
    15fa:	b9 2f       	mov	r27, r25
    15fc:	99 27       	eor	r25, r25
    15fe:	b7 51       	subi	r27, 0x17	; 23
    1600:	b0 f0       	brcs	.+44     	; 0x162e <__fixunssfsi+0x3e>
    1602:	e1 f0       	breq	.+56     	; 0x163c <__fixunssfsi+0x4c>
    1604:	66 0f       	add	r22, r22
    1606:	77 1f       	adc	r23, r23
    1608:	88 1f       	adc	r24, r24
    160a:	99 1f       	adc	r25, r25
    160c:	1a f0       	brmi	.+6      	; 0x1614 <__fixunssfsi+0x24>
    160e:	ba 95       	dec	r27
    1610:	c9 f7       	brne	.-14     	; 0x1604 <__fixunssfsi+0x14>
    1612:	14 c0       	rjmp	.+40     	; 0x163c <__fixunssfsi+0x4c>
    1614:	b1 30       	cpi	r27, 0x01	; 1
    1616:	91 f0       	breq	.+36     	; 0x163c <__fixunssfsi+0x4c>
    1618:	0e 94 ae 0b 	call	0x175c	; 0x175c <__fp_zero>
    161c:	b1 e0       	ldi	r27, 0x01	; 1
    161e:	08 95       	ret
    1620:	0c 94 ae 0b 	jmp	0x175c	; 0x175c <__fp_zero>
    1624:	67 2f       	mov	r22, r23
    1626:	78 2f       	mov	r23, r24
    1628:	88 27       	eor	r24, r24
    162a:	b8 5f       	subi	r27, 0xF8	; 248
    162c:	39 f0       	breq	.+14     	; 0x163c <__fixunssfsi+0x4c>
    162e:	b9 3f       	cpi	r27, 0xF9	; 249
    1630:	cc f3       	brlt	.-14     	; 0x1624 <__fixunssfsi+0x34>
    1632:	86 95       	lsr	r24
    1634:	77 95       	ror	r23
    1636:	67 95       	ror	r22
    1638:	b3 95       	inc	r27
    163a:	d9 f7       	brne	.-10     	; 0x1632 <__fixunssfsi+0x42>
    163c:	3e f4       	brtc	.+14     	; 0x164c <__fixunssfsi+0x5c>
    163e:	90 95       	com	r25
    1640:	80 95       	com	r24
    1642:	70 95       	com	r23
    1644:	61 95       	neg	r22
    1646:	7f 4f       	sbci	r23, 0xFF	; 255
    1648:	8f 4f       	sbci	r24, 0xFF	; 255
    164a:	9f 4f       	sbci	r25, 0xFF	; 255
    164c:	08 95       	ret

0000164e <__floatunsisf>:
    164e:	e8 94       	clt
    1650:	09 c0       	rjmp	.+18     	; 0x1664 <__floatsisf+0x12>

00001652 <__floatsisf>:
    1652:	97 fb       	bst	r25, 7
    1654:	3e f4       	brtc	.+14     	; 0x1664 <__floatsisf+0x12>
    1656:	90 95       	com	r25
    1658:	80 95       	com	r24
    165a:	70 95       	com	r23
    165c:	61 95       	neg	r22
    165e:	7f 4f       	sbci	r23, 0xFF	; 255
    1660:	8f 4f       	sbci	r24, 0xFF	; 255
    1662:	9f 4f       	sbci	r25, 0xFF	; 255
    1664:	99 23       	and	r25, r25
    1666:	a9 f0       	breq	.+42     	; 0x1692 <__floatsisf+0x40>
    1668:	f9 2f       	mov	r31, r25
    166a:	96 e9       	ldi	r25, 0x96	; 150
    166c:	bb 27       	eor	r27, r27
    166e:	93 95       	inc	r25
    1670:	f6 95       	lsr	r31
    1672:	87 95       	ror	r24
    1674:	77 95       	ror	r23
    1676:	67 95       	ror	r22
    1678:	b7 95       	ror	r27
    167a:	f1 11       	cpse	r31, r1
    167c:	f8 cf       	rjmp	.-16     	; 0x166e <__floatsisf+0x1c>
    167e:	fa f4       	brpl	.+62     	; 0x16be <__floatsisf+0x6c>
    1680:	bb 0f       	add	r27, r27
    1682:	11 f4       	brne	.+4      	; 0x1688 <__floatsisf+0x36>
    1684:	60 ff       	sbrs	r22, 0
    1686:	1b c0       	rjmp	.+54     	; 0x16be <__floatsisf+0x6c>
    1688:	6f 5f       	subi	r22, 0xFF	; 255
    168a:	7f 4f       	sbci	r23, 0xFF	; 255
    168c:	8f 4f       	sbci	r24, 0xFF	; 255
    168e:	9f 4f       	sbci	r25, 0xFF	; 255
    1690:	16 c0       	rjmp	.+44     	; 0x16be <__floatsisf+0x6c>
    1692:	88 23       	and	r24, r24
    1694:	11 f0       	breq	.+4      	; 0x169a <__floatsisf+0x48>
    1696:	96 e9       	ldi	r25, 0x96	; 150
    1698:	11 c0       	rjmp	.+34     	; 0x16bc <__floatsisf+0x6a>
    169a:	77 23       	and	r23, r23
    169c:	21 f0       	breq	.+8      	; 0x16a6 <__floatsisf+0x54>
    169e:	9e e8       	ldi	r25, 0x8E	; 142
    16a0:	87 2f       	mov	r24, r23
    16a2:	76 2f       	mov	r23, r22
    16a4:	05 c0       	rjmp	.+10     	; 0x16b0 <__floatsisf+0x5e>
    16a6:	66 23       	and	r22, r22
    16a8:	71 f0       	breq	.+28     	; 0x16c6 <__floatsisf+0x74>
    16aa:	96 e8       	ldi	r25, 0x86	; 134
    16ac:	86 2f       	mov	r24, r22
    16ae:	70 e0       	ldi	r23, 0x00	; 0
    16b0:	60 e0       	ldi	r22, 0x00	; 0
    16b2:	2a f0       	brmi	.+10     	; 0x16be <__floatsisf+0x6c>
    16b4:	9a 95       	dec	r25
    16b6:	66 0f       	add	r22, r22
    16b8:	77 1f       	adc	r23, r23
    16ba:	88 1f       	adc	r24, r24
    16bc:	da f7       	brpl	.-10     	; 0x16b4 <__floatsisf+0x62>
    16be:	88 0f       	add	r24, r24
    16c0:	96 95       	lsr	r25
    16c2:	87 95       	ror	r24
    16c4:	97 f9       	bld	r25, 7
    16c6:	08 95       	ret

000016c8 <__fp_inf>:
    16c8:	97 f9       	bld	r25, 7
    16ca:	9f 67       	ori	r25, 0x7F	; 127
    16cc:	80 e8       	ldi	r24, 0x80	; 128
    16ce:	70 e0       	ldi	r23, 0x00	; 0
    16d0:	60 e0       	ldi	r22, 0x00	; 0
    16d2:	08 95       	ret

000016d4 <__fp_nan>:
    16d4:	9f ef       	ldi	r25, 0xFF	; 255
    16d6:	80 ec       	ldi	r24, 0xC0	; 192
    16d8:	08 95       	ret

000016da <__fp_pscA>:
    16da:	00 24       	eor	r0, r0
    16dc:	0a 94       	dec	r0
    16de:	16 16       	cp	r1, r22
    16e0:	17 06       	cpc	r1, r23
    16e2:	18 06       	cpc	r1, r24
    16e4:	09 06       	cpc	r0, r25
    16e6:	08 95       	ret

000016e8 <__fp_pscB>:
    16e8:	00 24       	eor	r0, r0
    16ea:	0a 94       	dec	r0
    16ec:	12 16       	cp	r1, r18
    16ee:	13 06       	cpc	r1, r19
    16f0:	14 06       	cpc	r1, r20
    16f2:	05 06       	cpc	r0, r21
    16f4:	08 95       	ret

000016f6 <__fp_round>:
    16f6:	09 2e       	mov	r0, r25
    16f8:	03 94       	inc	r0
    16fa:	00 0c       	add	r0, r0
    16fc:	11 f4       	brne	.+4      	; 0x1702 <__fp_round+0xc>
    16fe:	88 23       	and	r24, r24
    1700:	52 f0       	brmi	.+20     	; 0x1716 <__fp_round+0x20>
    1702:	bb 0f       	add	r27, r27
    1704:	40 f4       	brcc	.+16     	; 0x1716 <__fp_round+0x20>
    1706:	bf 2b       	or	r27, r31
    1708:	11 f4       	brne	.+4      	; 0x170e <__fp_round+0x18>
    170a:	60 ff       	sbrs	r22, 0
    170c:	04 c0       	rjmp	.+8      	; 0x1716 <__fp_round+0x20>
    170e:	6f 5f       	subi	r22, 0xFF	; 255
    1710:	7f 4f       	sbci	r23, 0xFF	; 255
    1712:	8f 4f       	sbci	r24, 0xFF	; 255
    1714:	9f 4f       	sbci	r25, 0xFF	; 255
    1716:	08 95       	ret

00001718 <__fp_split3>:
    1718:	57 fd       	sbrc	r21, 7
    171a:	90 58       	subi	r25, 0x80	; 128
    171c:	44 0f       	add	r20, r20
    171e:	55 1f       	adc	r21, r21
    1720:	59 f0       	breq	.+22     	; 0x1738 <__fp_splitA+0x10>
    1722:	5f 3f       	cpi	r21, 0xFF	; 255
    1724:	71 f0       	breq	.+28     	; 0x1742 <__fp_splitA+0x1a>
    1726:	47 95       	ror	r20

00001728 <__fp_splitA>:
    1728:	88 0f       	add	r24, r24
    172a:	97 fb       	bst	r25, 7
    172c:	99 1f       	adc	r25, r25
    172e:	61 f0       	breq	.+24     	; 0x1748 <__fp_splitA+0x20>
    1730:	9f 3f       	cpi	r25, 0xFF	; 255
    1732:	79 f0       	breq	.+30     	; 0x1752 <__fp_splitA+0x2a>
    1734:	87 95       	ror	r24
    1736:	08 95       	ret
    1738:	12 16       	cp	r1, r18
    173a:	13 06       	cpc	r1, r19
    173c:	14 06       	cpc	r1, r20
    173e:	55 1f       	adc	r21, r21
    1740:	f2 cf       	rjmp	.-28     	; 0x1726 <__fp_split3+0xe>
    1742:	46 95       	lsr	r20
    1744:	f1 df       	rcall	.-30     	; 0x1728 <__fp_splitA>
    1746:	08 c0       	rjmp	.+16     	; 0x1758 <__fp_splitA+0x30>
    1748:	16 16       	cp	r1, r22
    174a:	17 06       	cpc	r1, r23
    174c:	18 06       	cpc	r1, r24
    174e:	99 1f       	adc	r25, r25
    1750:	f1 cf       	rjmp	.-30     	; 0x1734 <__fp_splitA+0xc>
    1752:	86 95       	lsr	r24
    1754:	71 05       	cpc	r23, r1
    1756:	61 05       	cpc	r22, r1
    1758:	08 94       	sec
    175a:	08 95       	ret

0000175c <__fp_zero>:
    175c:	e8 94       	clt

0000175e <__fp_szero>:
    175e:	bb 27       	eor	r27, r27
    1760:	66 27       	eor	r22, r22
    1762:	77 27       	eor	r23, r23
    1764:	cb 01       	movw	r24, r22
    1766:	97 f9       	bld	r25, 7
    1768:	08 95       	ret

0000176a <__gesf2>:
    176a:	0e 94 27 0c 	call	0x184e	; 0x184e <__fp_cmp>
    176e:	08 f4       	brcc	.+2      	; 0x1772 <__gesf2+0x8>
    1770:	8f ef       	ldi	r24, 0xFF	; 255
    1772:	08 95       	ret

00001774 <__mulsf3>:
    1774:	0e 94 cd 0b 	call	0x179a	; 0x179a <__mulsf3x>
    1778:	0c 94 7b 0b 	jmp	0x16f6	; 0x16f6 <__fp_round>
    177c:	0e 94 6d 0b 	call	0x16da	; 0x16da <__fp_pscA>
    1780:	38 f0       	brcs	.+14     	; 0x1790 <__mulsf3+0x1c>
    1782:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <__fp_pscB>
    1786:	20 f0       	brcs	.+8      	; 0x1790 <__mulsf3+0x1c>
    1788:	95 23       	and	r25, r21
    178a:	11 f0       	breq	.+4      	; 0x1790 <__mulsf3+0x1c>
    178c:	0c 94 64 0b 	jmp	0x16c8	; 0x16c8 <__fp_inf>
    1790:	0c 94 6a 0b 	jmp	0x16d4	; 0x16d4 <__fp_nan>
    1794:	11 24       	eor	r1, r1
    1796:	0c 94 af 0b 	jmp	0x175e	; 0x175e <__fp_szero>

0000179a <__mulsf3x>:
    179a:	0e 94 8c 0b 	call	0x1718	; 0x1718 <__fp_split3>
    179e:	70 f3       	brcs	.-36     	; 0x177c <__mulsf3+0x8>

000017a0 <__mulsf3_pse>:
    17a0:	95 9f       	mul	r25, r21
    17a2:	c1 f3       	breq	.-16     	; 0x1794 <__mulsf3+0x20>
    17a4:	95 0f       	add	r25, r21
    17a6:	50 e0       	ldi	r21, 0x00	; 0
    17a8:	55 1f       	adc	r21, r21
    17aa:	62 9f       	mul	r22, r18
    17ac:	f0 01       	movw	r30, r0
    17ae:	72 9f       	mul	r23, r18
    17b0:	bb 27       	eor	r27, r27
    17b2:	f0 0d       	add	r31, r0
    17b4:	b1 1d       	adc	r27, r1
    17b6:	63 9f       	mul	r22, r19
    17b8:	aa 27       	eor	r26, r26
    17ba:	f0 0d       	add	r31, r0
    17bc:	b1 1d       	adc	r27, r1
    17be:	aa 1f       	adc	r26, r26
    17c0:	64 9f       	mul	r22, r20
    17c2:	66 27       	eor	r22, r22
    17c4:	b0 0d       	add	r27, r0
    17c6:	a1 1d       	adc	r26, r1
    17c8:	66 1f       	adc	r22, r22
    17ca:	82 9f       	mul	r24, r18
    17cc:	22 27       	eor	r18, r18
    17ce:	b0 0d       	add	r27, r0
    17d0:	a1 1d       	adc	r26, r1
    17d2:	62 1f       	adc	r22, r18
    17d4:	73 9f       	mul	r23, r19
    17d6:	b0 0d       	add	r27, r0
    17d8:	a1 1d       	adc	r26, r1
    17da:	62 1f       	adc	r22, r18
    17dc:	83 9f       	mul	r24, r19
    17de:	a0 0d       	add	r26, r0
    17e0:	61 1d       	adc	r22, r1
    17e2:	22 1f       	adc	r18, r18
    17e4:	74 9f       	mul	r23, r20
    17e6:	33 27       	eor	r19, r19
    17e8:	a0 0d       	add	r26, r0
    17ea:	61 1d       	adc	r22, r1
    17ec:	23 1f       	adc	r18, r19
    17ee:	84 9f       	mul	r24, r20
    17f0:	60 0d       	add	r22, r0
    17f2:	21 1d       	adc	r18, r1
    17f4:	82 2f       	mov	r24, r18
    17f6:	76 2f       	mov	r23, r22
    17f8:	6a 2f       	mov	r22, r26
    17fa:	11 24       	eor	r1, r1
    17fc:	9f 57       	subi	r25, 0x7F	; 127
    17fe:	50 40       	sbci	r21, 0x00	; 0
    1800:	9a f0       	brmi	.+38     	; 0x1828 <__mulsf3_pse+0x88>
    1802:	f1 f0       	breq	.+60     	; 0x1840 <__mulsf3_pse+0xa0>
    1804:	88 23       	and	r24, r24
    1806:	4a f0       	brmi	.+18     	; 0x181a <__mulsf3_pse+0x7a>
    1808:	ee 0f       	add	r30, r30
    180a:	ff 1f       	adc	r31, r31
    180c:	bb 1f       	adc	r27, r27
    180e:	66 1f       	adc	r22, r22
    1810:	77 1f       	adc	r23, r23
    1812:	88 1f       	adc	r24, r24
    1814:	91 50       	subi	r25, 0x01	; 1
    1816:	50 40       	sbci	r21, 0x00	; 0
    1818:	a9 f7       	brne	.-22     	; 0x1804 <__mulsf3_pse+0x64>
    181a:	9e 3f       	cpi	r25, 0xFE	; 254
    181c:	51 05       	cpc	r21, r1
    181e:	80 f0       	brcs	.+32     	; 0x1840 <__mulsf3_pse+0xa0>
    1820:	0c 94 64 0b 	jmp	0x16c8	; 0x16c8 <__fp_inf>
    1824:	0c 94 af 0b 	jmp	0x175e	; 0x175e <__fp_szero>
    1828:	5f 3f       	cpi	r21, 0xFF	; 255
    182a:	e4 f3       	brlt	.-8      	; 0x1824 <__mulsf3_pse+0x84>
    182c:	98 3e       	cpi	r25, 0xE8	; 232
    182e:	d4 f3       	brlt	.-12     	; 0x1824 <__mulsf3_pse+0x84>
    1830:	86 95       	lsr	r24
    1832:	77 95       	ror	r23
    1834:	67 95       	ror	r22
    1836:	b7 95       	ror	r27
    1838:	f7 95       	ror	r31
    183a:	e7 95       	ror	r30
    183c:	9f 5f       	subi	r25, 0xFF	; 255
    183e:	c1 f7       	brne	.-16     	; 0x1830 <__mulsf3_pse+0x90>
    1840:	fe 2b       	or	r31, r30
    1842:	88 0f       	add	r24, r24
    1844:	91 1d       	adc	r25, r1
    1846:	96 95       	lsr	r25
    1848:	87 95       	ror	r24
    184a:	97 f9       	bld	r25, 7
    184c:	08 95       	ret

0000184e <__fp_cmp>:
    184e:	99 0f       	add	r25, r25
    1850:	00 08       	sbc	r0, r0
    1852:	55 0f       	add	r21, r21
    1854:	aa 0b       	sbc	r26, r26
    1856:	e0 e8       	ldi	r30, 0x80	; 128
    1858:	fe ef       	ldi	r31, 0xFE	; 254
    185a:	16 16       	cp	r1, r22
    185c:	17 06       	cpc	r1, r23
    185e:	e8 07       	cpc	r30, r24
    1860:	f9 07       	cpc	r31, r25
    1862:	c0 f0       	brcs	.+48     	; 0x1894 <__fp_cmp+0x46>
    1864:	12 16       	cp	r1, r18
    1866:	13 06       	cpc	r1, r19
    1868:	e4 07       	cpc	r30, r20
    186a:	f5 07       	cpc	r31, r21
    186c:	98 f0       	brcs	.+38     	; 0x1894 <__fp_cmp+0x46>
    186e:	62 1b       	sub	r22, r18
    1870:	73 0b       	sbc	r23, r19
    1872:	84 0b       	sbc	r24, r20
    1874:	95 0b       	sbc	r25, r21
    1876:	39 f4       	brne	.+14     	; 0x1886 <__fp_cmp+0x38>
    1878:	0a 26       	eor	r0, r26
    187a:	61 f0       	breq	.+24     	; 0x1894 <__fp_cmp+0x46>
    187c:	23 2b       	or	r18, r19
    187e:	24 2b       	or	r18, r20
    1880:	25 2b       	or	r18, r21
    1882:	21 f4       	brne	.+8      	; 0x188c <__fp_cmp+0x3e>
    1884:	08 95       	ret
    1886:	0a 26       	eor	r0, r26
    1888:	09 f4       	brne	.+2      	; 0x188c <__fp_cmp+0x3e>
    188a:	a1 40       	sbci	r26, 0x01	; 1
    188c:	a6 95       	lsr	r26
    188e:	8f ef       	ldi	r24, 0xFF	; 255
    1890:	81 1d       	adc	r24, r1
    1892:	81 1d       	adc	r24, r1
    1894:	08 95       	ret

00001896 <vfprintf>:
    1896:	a0 e1       	ldi	r26, 0x10	; 16
    1898:	b0 e0       	ldi	r27, 0x00	; 0
    189a:	e1 e5       	ldi	r30, 0x51	; 81
    189c:	fc e0       	ldi	r31, 0x0C	; 12
    189e:	0c 94 e7 0f 	jmp	0x1fce	; 0x1fce <__prologue_saves__>
    18a2:	7c 01       	movw	r14, r24
    18a4:	1b 01       	movw	r2, r22
    18a6:	6a 01       	movw	r12, r20
    18a8:	fc 01       	movw	r30, r24
    18aa:	17 82       	std	Z+7, r1	; 0x07
    18ac:	16 82       	std	Z+6, r1	; 0x06
    18ae:	83 81       	ldd	r24, Z+3	; 0x03
    18b0:	81 ff       	sbrs	r24, 1
    18b2:	44 c3       	rjmp	.+1672   	; 0x1f3c <vfprintf+0x6a6>
    18b4:	9e 01       	movw	r18, r28
    18b6:	2f 5f       	subi	r18, 0xFF	; 255
    18b8:	3f 4f       	sbci	r19, 0xFF	; 255
    18ba:	39 01       	movw	r6, r18
    18bc:	f7 01       	movw	r30, r14
    18be:	93 81       	ldd	r25, Z+3	; 0x03
    18c0:	f1 01       	movw	r30, r2
    18c2:	93 fd       	sbrc	r25, 3
    18c4:	85 91       	lpm	r24, Z+
    18c6:	93 ff       	sbrs	r25, 3
    18c8:	81 91       	ld	r24, Z+
    18ca:	1f 01       	movw	r2, r30
    18cc:	88 23       	and	r24, r24
    18ce:	09 f4       	brne	.+2      	; 0x18d2 <vfprintf+0x3c>
    18d0:	31 c3       	rjmp	.+1634   	; 0x1f34 <vfprintf+0x69e>
    18d2:	85 32       	cpi	r24, 0x25	; 37
    18d4:	39 f4       	brne	.+14     	; 0x18e4 <vfprintf+0x4e>
    18d6:	93 fd       	sbrc	r25, 3
    18d8:	85 91       	lpm	r24, Z+
    18da:	93 ff       	sbrs	r25, 3
    18dc:	81 91       	ld	r24, Z+
    18de:	1f 01       	movw	r2, r30
    18e0:	85 32       	cpi	r24, 0x25	; 37
    18e2:	39 f4       	brne	.+14     	; 0x18f2 <vfprintf+0x5c>
    18e4:	b7 01       	movw	r22, r14
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	0e 94 2e 11 	call	0x225c	; 0x225c <fputc>
    18ec:	56 01       	movw	r10, r12
    18ee:	65 01       	movw	r12, r10
    18f0:	e5 cf       	rjmp	.-54     	; 0x18bc <vfprintf+0x26>
    18f2:	10 e0       	ldi	r17, 0x00	; 0
    18f4:	51 2c       	mov	r5, r1
    18f6:	91 2c       	mov	r9, r1
    18f8:	ff e1       	ldi	r31, 0x1F	; 31
    18fa:	f9 15       	cp	r31, r9
    18fc:	d8 f0       	brcs	.+54     	; 0x1934 <vfprintf+0x9e>
    18fe:	8b 32       	cpi	r24, 0x2B	; 43
    1900:	79 f0       	breq	.+30     	; 0x1920 <vfprintf+0x8a>
    1902:	38 f4       	brcc	.+14     	; 0x1912 <vfprintf+0x7c>
    1904:	80 32       	cpi	r24, 0x20	; 32
    1906:	79 f0       	breq	.+30     	; 0x1926 <vfprintf+0x90>
    1908:	83 32       	cpi	r24, 0x23	; 35
    190a:	a1 f4       	brne	.+40     	; 0x1934 <vfprintf+0x9e>
    190c:	f9 2d       	mov	r31, r9
    190e:	f0 61       	ori	r31, 0x10	; 16
    1910:	2e c0       	rjmp	.+92     	; 0x196e <vfprintf+0xd8>
    1912:	8d 32       	cpi	r24, 0x2D	; 45
    1914:	61 f0       	breq	.+24     	; 0x192e <vfprintf+0x98>
    1916:	80 33       	cpi	r24, 0x30	; 48
    1918:	69 f4       	brne	.+26     	; 0x1934 <vfprintf+0x9e>
    191a:	29 2d       	mov	r18, r9
    191c:	21 60       	ori	r18, 0x01	; 1
    191e:	2d c0       	rjmp	.+90     	; 0x197a <vfprintf+0xe4>
    1920:	39 2d       	mov	r19, r9
    1922:	32 60       	ori	r19, 0x02	; 2
    1924:	93 2e       	mov	r9, r19
    1926:	89 2d       	mov	r24, r9
    1928:	84 60       	ori	r24, 0x04	; 4
    192a:	98 2e       	mov	r9, r24
    192c:	2a c0       	rjmp	.+84     	; 0x1982 <vfprintf+0xec>
    192e:	e9 2d       	mov	r30, r9
    1930:	e8 60       	ori	r30, 0x08	; 8
    1932:	15 c0       	rjmp	.+42     	; 0x195e <vfprintf+0xc8>
    1934:	97 fc       	sbrc	r9, 7
    1936:	2d c0       	rjmp	.+90     	; 0x1992 <vfprintf+0xfc>
    1938:	20 ed       	ldi	r18, 0xD0	; 208
    193a:	28 0f       	add	r18, r24
    193c:	2a 30       	cpi	r18, 0x0A	; 10
    193e:	88 f4       	brcc	.+34     	; 0x1962 <vfprintf+0xcc>
    1940:	96 fe       	sbrs	r9, 6
    1942:	06 c0       	rjmp	.+12     	; 0x1950 <vfprintf+0xba>
    1944:	3a e0       	ldi	r19, 0x0A	; 10
    1946:	13 9f       	mul	r17, r19
    1948:	20 0d       	add	r18, r0
    194a:	11 24       	eor	r1, r1
    194c:	12 2f       	mov	r17, r18
    194e:	19 c0       	rjmp	.+50     	; 0x1982 <vfprintf+0xec>
    1950:	8a e0       	ldi	r24, 0x0A	; 10
    1952:	58 9e       	mul	r5, r24
    1954:	20 0d       	add	r18, r0
    1956:	11 24       	eor	r1, r1
    1958:	52 2e       	mov	r5, r18
    195a:	e9 2d       	mov	r30, r9
    195c:	e0 62       	ori	r30, 0x20	; 32
    195e:	9e 2e       	mov	r9, r30
    1960:	10 c0       	rjmp	.+32     	; 0x1982 <vfprintf+0xec>
    1962:	8e 32       	cpi	r24, 0x2E	; 46
    1964:	31 f4       	brne	.+12     	; 0x1972 <vfprintf+0xdc>
    1966:	96 fc       	sbrc	r9, 6
    1968:	e5 c2       	rjmp	.+1482   	; 0x1f34 <vfprintf+0x69e>
    196a:	f9 2d       	mov	r31, r9
    196c:	f0 64       	ori	r31, 0x40	; 64
    196e:	9f 2e       	mov	r9, r31
    1970:	08 c0       	rjmp	.+16     	; 0x1982 <vfprintf+0xec>
    1972:	8c 36       	cpi	r24, 0x6C	; 108
    1974:	21 f4       	brne	.+8      	; 0x197e <vfprintf+0xe8>
    1976:	29 2d       	mov	r18, r9
    1978:	20 68       	ori	r18, 0x80	; 128
    197a:	92 2e       	mov	r9, r18
    197c:	02 c0       	rjmp	.+4      	; 0x1982 <vfprintf+0xec>
    197e:	88 36       	cpi	r24, 0x68	; 104
    1980:	41 f4       	brne	.+16     	; 0x1992 <vfprintf+0xfc>
    1982:	f1 01       	movw	r30, r2
    1984:	93 fd       	sbrc	r25, 3
    1986:	85 91       	lpm	r24, Z+
    1988:	93 ff       	sbrs	r25, 3
    198a:	81 91       	ld	r24, Z+
    198c:	1f 01       	movw	r2, r30
    198e:	81 11       	cpse	r24, r1
    1990:	b3 cf       	rjmp	.-154    	; 0x18f8 <vfprintf+0x62>
    1992:	9b eb       	ldi	r25, 0xBB	; 187
    1994:	98 0f       	add	r25, r24
    1996:	93 30       	cpi	r25, 0x03	; 3
    1998:	20 f4       	brcc	.+8      	; 0x19a2 <vfprintf+0x10c>
    199a:	99 2d       	mov	r25, r9
    199c:	90 61       	ori	r25, 0x10	; 16
    199e:	80 5e       	subi	r24, 0xE0	; 224
    19a0:	07 c0       	rjmp	.+14     	; 0x19b0 <vfprintf+0x11a>
    19a2:	9b e9       	ldi	r25, 0x9B	; 155
    19a4:	98 0f       	add	r25, r24
    19a6:	93 30       	cpi	r25, 0x03	; 3
    19a8:	08 f0       	brcs	.+2      	; 0x19ac <vfprintf+0x116>
    19aa:	66 c1       	rjmp	.+716    	; 0x1c78 <vfprintf+0x3e2>
    19ac:	99 2d       	mov	r25, r9
    19ae:	9f 7e       	andi	r25, 0xEF	; 239
    19b0:	96 ff       	sbrs	r25, 6
    19b2:	16 e0       	ldi	r17, 0x06	; 6
    19b4:	9f 73       	andi	r25, 0x3F	; 63
    19b6:	99 2e       	mov	r9, r25
    19b8:	85 36       	cpi	r24, 0x65	; 101
    19ba:	19 f4       	brne	.+6      	; 0x19c2 <vfprintf+0x12c>
    19bc:	90 64       	ori	r25, 0x40	; 64
    19be:	99 2e       	mov	r9, r25
    19c0:	08 c0       	rjmp	.+16     	; 0x19d2 <vfprintf+0x13c>
    19c2:	86 36       	cpi	r24, 0x66	; 102
    19c4:	21 f4       	brne	.+8      	; 0x19ce <vfprintf+0x138>
    19c6:	39 2f       	mov	r19, r25
    19c8:	30 68       	ori	r19, 0x80	; 128
    19ca:	93 2e       	mov	r9, r19
    19cc:	02 c0       	rjmp	.+4      	; 0x19d2 <vfprintf+0x13c>
    19ce:	11 11       	cpse	r17, r1
    19d0:	11 50       	subi	r17, 0x01	; 1
    19d2:	97 fe       	sbrs	r9, 7
    19d4:	07 c0       	rjmp	.+14     	; 0x19e4 <vfprintf+0x14e>
    19d6:	1c 33       	cpi	r17, 0x3C	; 60
    19d8:	50 f4       	brcc	.+20     	; 0x19ee <vfprintf+0x158>
    19da:	44 24       	eor	r4, r4
    19dc:	43 94       	inc	r4
    19de:	41 0e       	add	r4, r17
    19e0:	27 e0       	ldi	r18, 0x07	; 7
    19e2:	0b c0       	rjmp	.+22     	; 0x19fa <vfprintf+0x164>
    19e4:	18 30       	cpi	r17, 0x08	; 8
    19e6:	38 f0       	brcs	.+14     	; 0x19f6 <vfprintf+0x160>
    19e8:	27 e0       	ldi	r18, 0x07	; 7
    19ea:	17 e0       	ldi	r17, 0x07	; 7
    19ec:	05 c0       	rjmp	.+10     	; 0x19f8 <vfprintf+0x162>
    19ee:	27 e0       	ldi	r18, 0x07	; 7
    19f0:	9c e3       	ldi	r25, 0x3C	; 60
    19f2:	49 2e       	mov	r4, r25
    19f4:	02 c0       	rjmp	.+4      	; 0x19fa <vfprintf+0x164>
    19f6:	21 2f       	mov	r18, r17
    19f8:	41 2c       	mov	r4, r1
    19fa:	56 01       	movw	r10, r12
    19fc:	84 e0       	ldi	r24, 0x04	; 4
    19fe:	a8 0e       	add	r10, r24
    1a00:	b1 1c       	adc	r11, r1
    1a02:	f6 01       	movw	r30, r12
    1a04:	60 81       	ld	r22, Z
    1a06:	71 81       	ldd	r23, Z+1	; 0x01
    1a08:	82 81       	ldd	r24, Z+2	; 0x02
    1a0a:	93 81       	ldd	r25, Z+3	; 0x03
    1a0c:	04 2d       	mov	r16, r4
    1a0e:	a3 01       	movw	r20, r6
    1a10:	0e 94 40 10 	call	0x2080	; 0x2080 <__ftoa_engine>
    1a14:	6c 01       	movw	r12, r24
    1a16:	f9 81       	ldd	r31, Y+1	; 0x01
    1a18:	fc 87       	std	Y+12, r31	; 0x0c
    1a1a:	f0 ff       	sbrs	r31, 0
    1a1c:	02 c0       	rjmp	.+4      	; 0x1a22 <vfprintf+0x18c>
    1a1e:	f3 ff       	sbrs	r31, 3
    1a20:	06 c0       	rjmp	.+12     	; 0x1a2e <vfprintf+0x198>
    1a22:	91 fc       	sbrc	r9, 1
    1a24:	06 c0       	rjmp	.+12     	; 0x1a32 <vfprintf+0x19c>
    1a26:	92 fe       	sbrs	r9, 2
    1a28:	06 c0       	rjmp	.+12     	; 0x1a36 <vfprintf+0x1a0>
    1a2a:	00 e2       	ldi	r16, 0x20	; 32
    1a2c:	05 c0       	rjmp	.+10     	; 0x1a38 <vfprintf+0x1a2>
    1a2e:	0d e2       	ldi	r16, 0x2D	; 45
    1a30:	03 c0       	rjmp	.+6      	; 0x1a38 <vfprintf+0x1a2>
    1a32:	0b e2       	ldi	r16, 0x2B	; 43
    1a34:	01 c0       	rjmp	.+2      	; 0x1a38 <vfprintf+0x1a2>
    1a36:	00 e0       	ldi	r16, 0x00	; 0
    1a38:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a3a:	8c 70       	andi	r24, 0x0C	; 12
    1a3c:	19 f0       	breq	.+6      	; 0x1a44 <vfprintf+0x1ae>
    1a3e:	01 11       	cpse	r16, r1
    1a40:	5a c2       	rjmp	.+1204   	; 0x1ef6 <vfprintf+0x660>
    1a42:	9b c2       	rjmp	.+1334   	; 0x1f7a <vfprintf+0x6e4>
    1a44:	97 fe       	sbrs	r9, 7
    1a46:	10 c0       	rjmp	.+32     	; 0x1a68 <vfprintf+0x1d2>
    1a48:	4c 0c       	add	r4, r12
    1a4a:	fc 85       	ldd	r31, Y+12	; 0x0c
    1a4c:	f4 ff       	sbrs	r31, 4
    1a4e:	04 c0       	rjmp	.+8      	; 0x1a58 <vfprintf+0x1c2>
    1a50:	8a 81       	ldd	r24, Y+2	; 0x02
    1a52:	81 33       	cpi	r24, 0x31	; 49
    1a54:	09 f4       	brne	.+2      	; 0x1a58 <vfprintf+0x1c2>
    1a56:	4a 94       	dec	r4
    1a58:	14 14       	cp	r1, r4
    1a5a:	74 f5       	brge	.+92     	; 0x1ab8 <vfprintf+0x222>
    1a5c:	28 e0       	ldi	r18, 0x08	; 8
    1a5e:	24 15       	cp	r18, r4
    1a60:	78 f5       	brcc	.+94     	; 0x1ac0 <vfprintf+0x22a>
    1a62:	88 e0       	ldi	r24, 0x08	; 8
    1a64:	48 2e       	mov	r4, r24
    1a66:	2c c0       	rjmp	.+88     	; 0x1ac0 <vfprintf+0x22a>
    1a68:	96 fc       	sbrc	r9, 6
    1a6a:	2a c0       	rjmp	.+84     	; 0x1ac0 <vfprintf+0x22a>
    1a6c:	81 2f       	mov	r24, r17
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	8c 15       	cp	r24, r12
    1a72:	9d 05       	cpc	r25, r13
    1a74:	9c f0       	brlt	.+38     	; 0x1a9c <vfprintf+0x206>
    1a76:	3c ef       	ldi	r19, 0xFC	; 252
    1a78:	c3 16       	cp	r12, r19
    1a7a:	3f ef       	ldi	r19, 0xFF	; 255
    1a7c:	d3 06       	cpc	r13, r19
    1a7e:	74 f0       	brlt	.+28     	; 0x1a9c <vfprintf+0x206>
    1a80:	89 2d       	mov	r24, r9
    1a82:	80 68       	ori	r24, 0x80	; 128
    1a84:	98 2e       	mov	r9, r24
    1a86:	0a c0       	rjmp	.+20     	; 0x1a9c <vfprintf+0x206>
    1a88:	e2 e0       	ldi	r30, 0x02	; 2
    1a8a:	f0 e0       	ldi	r31, 0x00	; 0
    1a8c:	ec 0f       	add	r30, r28
    1a8e:	fd 1f       	adc	r31, r29
    1a90:	e1 0f       	add	r30, r17
    1a92:	f1 1d       	adc	r31, r1
    1a94:	80 81       	ld	r24, Z
    1a96:	80 33       	cpi	r24, 0x30	; 48
    1a98:	19 f4       	brne	.+6      	; 0x1aa0 <vfprintf+0x20a>
    1a9a:	11 50       	subi	r17, 0x01	; 1
    1a9c:	11 11       	cpse	r17, r1
    1a9e:	f4 cf       	rjmp	.-24     	; 0x1a88 <vfprintf+0x1f2>
    1aa0:	97 fe       	sbrs	r9, 7
    1aa2:	0e c0       	rjmp	.+28     	; 0x1ac0 <vfprintf+0x22a>
    1aa4:	44 24       	eor	r4, r4
    1aa6:	43 94       	inc	r4
    1aa8:	41 0e       	add	r4, r17
    1aaa:	81 2f       	mov	r24, r17
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	c8 16       	cp	r12, r24
    1ab0:	d9 06       	cpc	r13, r25
    1ab2:	2c f4       	brge	.+10     	; 0x1abe <vfprintf+0x228>
    1ab4:	1c 19       	sub	r17, r12
    1ab6:	04 c0       	rjmp	.+8      	; 0x1ac0 <vfprintf+0x22a>
    1ab8:	44 24       	eor	r4, r4
    1aba:	43 94       	inc	r4
    1abc:	01 c0       	rjmp	.+2      	; 0x1ac0 <vfprintf+0x22a>
    1abe:	10 e0       	ldi	r17, 0x00	; 0
    1ac0:	97 fe       	sbrs	r9, 7
    1ac2:	06 c0       	rjmp	.+12     	; 0x1ad0 <vfprintf+0x23a>
    1ac4:	1c 14       	cp	r1, r12
    1ac6:	1d 04       	cpc	r1, r13
    1ac8:	34 f4       	brge	.+12     	; 0x1ad6 <vfprintf+0x240>
    1aca:	c6 01       	movw	r24, r12
    1acc:	01 96       	adiw	r24, 0x01	; 1
    1ace:	05 c0       	rjmp	.+10     	; 0x1ada <vfprintf+0x244>
    1ad0:	85 e0       	ldi	r24, 0x05	; 5
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	02 c0       	rjmp	.+4      	; 0x1ada <vfprintf+0x244>
    1ad6:	81 e0       	ldi	r24, 0x01	; 1
    1ad8:	90 e0       	ldi	r25, 0x00	; 0
    1ada:	01 11       	cpse	r16, r1
    1adc:	01 96       	adiw	r24, 0x01	; 1
    1ade:	11 23       	and	r17, r17
    1ae0:	31 f0       	breq	.+12     	; 0x1aee <vfprintf+0x258>
    1ae2:	21 2f       	mov	r18, r17
    1ae4:	30 e0       	ldi	r19, 0x00	; 0
    1ae6:	2f 5f       	subi	r18, 0xFF	; 255
    1ae8:	3f 4f       	sbci	r19, 0xFF	; 255
    1aea:	82 0f       	add	r24, r18
    1aec:	93 1f       	adc	r25, r19
    1aee:	25 2d       	mov	r18, r5
    1af0:	30 e0       	ldi	r19, 0x00	; 0
    1af2:	82 17       	cp	r24, r18
    1af4:	93 07       	cpc	r25, r19
    1af6:	14 f4       	brge	.+4      	; 0x1afc <vfprintf+0x266>
    1af8:	58 1a       	sub	r5, r24
    1afa:	01 c0       	rjmp	.+2      	; 0x1afe <vfprintf+0x268>
    1afc:	51 2c       	mov	r5, r1
    1afe:	89 2d       	mov	r24, r9
    1b00:	89 70       	andi	r24, 0x09	; 9
    1b02:	49 f4       	brne	.+18     	; 0x1b16 <vfprintf+0x280>
    1b04:	55 20       	and	r5, r5
    1b06:	39 f0       	breq	.+14     	; 0x1b16 <vfprintf+0x280>
    1b08:	b7 01       	movw	r22, r14
    1b0a:	80 e2       	ldi	r24, 0x20	; 32
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	0e 94 2e 11 	call	0x225c	; 0x225c <fputc>
    1b12:	5a 94       	dec	r5
    1b14:	f7 cf       	rjmp	.-18     	; 0x1b04 <vfprintf+0x26e>
    1b16:	00 23       	and	r16, r16
    1b18:	29 f0       	breq	.+10     	; 0x1b24 <vfprintf+0x28e>
    1b1a:	b7 01       	movw	r22, r14
    1b1c:	80 2f       	mov	r24, r16
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	0e 94 2e 11 	call	0x225c	; 0x225c <fputc>
    1b24:	93 fc       	sbrc	r9, 3
    1b26:	09 c0       	rjmp	.+18     	; 0x1b3a <vfprintf+0x2a4>
    1b28:	55 20       	and	r5, r5
    1b2a:	39 f0       	breq	.+14     	; 0x1b3a <vfprintf+0x2a4>
    1b2c:	b7 01       	movw	r22, r14
    1b2e:	80 e3       	ldi	r24, 0x30	; 48
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	0e 94 2e 11 	call	0x225c	; 0x225c <fputc>
    1b36:	5a 94       	dec	r5
    1b38:	f7 cf       	rjmp	.-18     	; 0x1b28 <vfprintf+0x292>
    1b3a:	97 fe       	sbrs	r9, 7
    1b3c:	4c c0       	rjmp	.+152    	; 0x1bd6 <vfprintf+0x340>
    1b3e:	46 01       	movw	r8, r12
    1b40:	d7 fe       	sbrs	r13, 7
    1b42:	02 c0       	rjmp	.+4      	; 0x1b48 <vfprintf+0x2b2>
    1b44:	81 2c       	mov	r8, r1
    1b46:	91 2c       	mov	r9, r1
    1b48:	c6 01       	movw	r24, r12
    1b4a:	88 19       	sub	r24, r8
    1b4c:	99 09       	sbc	r25, r9
    1b4e:	f3 01       	movw	r30, r6
    1b50:	e8 0f       	add	r30, r24
    1b52:	f9 1f       	adc	r31, r25
    1b54:	fe 87       	std	Y+14, r31	; 0x0e
    1b56:	ed 87       	std	Y+13, r30	; 0x0d
    1b58:	96 01       	movw	r18, r12
    1b5a:	24 19       	sub	r18, r4
    1b5c:	31 09       	sbc	r19, r1
    1b5e:	38 8b       	std	Y+16, r19	; 0x10
    1b60:	2f 87       	std	Y+15, r18	; 0x0f
    1b62:	01 2f       	mov	r16, r17
    1b64:	10 e0       	ldi	r17, 0x00	; 0
    1b66:	11 95       	neg	r17
    1b68:	01 95       	neg	r16
    1b6a:	11 09       	sbc	r17, r1
    1b6c:	3f ef       	ldi	r19, 0xFF	; 255
    1b6e:	83 16       	cp	r8, r19
    1b70:	93 06       	cpc	r9, r19
    1b72:	29 f4       	brne	.+10     	; 0x1b7e <vfprintf+0x2e8>
    1b74:	b7 01       	movw	r22, r14
    1b76:	8e e2       	ldi	r24, 0x2E	; 46
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	0e 94 2e 11 	call	0x225c	; 0x225c <fputc>
    1b7e:	c8 14       	cp	r12, r8
    1b80:	d9 04       	cpc	r13, r9
    1b82:	4c f0       	brlt	.+18     	; 0x1b96 <vfprintf+0x300>
    1b84:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b86:	98 89       	ldd	r25, Y+16	; 0x10
    1b88:	88 15       	cp	r24, r8
    1b8a:	99 05       	cpc	r25, r9
    1b8c:	24 f4       	brge	.+8      	; 0x1b96 <vfprintf+0x300>
    1b8e:	ed 85       	ldd	r30, Y+13	; 0x0d
    1b90:	fe 85       	ldd	r31, Y+14	; 0x0e
    1b92:	81 81       	ldd	r24, Z+1	; 0x01
    1b94:	01 c0       	rjmp	.+2      	; 0x1b98 <vfprintf+0x302>
    1b96:	80 e3       	ldi	r24, 0x30	; 48
    1b98:	f1 e0       	ldi	r31, 0x01	; 1
    1b9a:	8f 1a       	sub	r8, r31
    1b9c:	91 08       	sbc	r9, r1
    1b9e:	2d 85       	ldd	r18, Y+13	; 0x0d
    1ba0:	3e 85       	ldd	r19, Y+14	; 0x0e
    1ba2:	2f 5f       	subi	r18, 0xFF	; 255
    1ba4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ba6:	3e 87       	std	Y+14, r19	; 0x0e
    1ba8:	2d 87       	std	Y+13, r18	; 0x0d
    1baa:	80 16       	cp	r8, r16
    1bac:	91 06       	cpc	r9, r17
    1bae:	2c f0       	brlt	.+10     	; 0x1bba <vfprintf+0x324>
    1bb0:	b7 01       	movw	r22, r14
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	0e 94 2e 11 	call	0x225c	; 0x225c <fputc>
    1bb8:	d9 cf       	rjmp	.-78     	; 0x1b6c <vfprintf+0x2d6>
    1bba:	c8 14       	cp	r12, r8
    1bbc:	d9 04       	cpc	r13, r9
    1bbe:	41 f4       	brne	.+16     	; 0x1bd0 <vfprintf+0x33a>
    1bc0:	9a 81       	ldd	r25, Y+2	; 0x02
    1bc2:	96 33       	cpi	r25, 0x36	; 54
    1bc4:	20 f4       	brcc	.+8      	; 0x1bce <vfprintf+0x338>
    1bc6:	95 33       	cpi	r25, 0x35	; 53
    1bc8:	19 f4       	brne	.+6      	; 0x1bd0 <vfprintf+0x33a>
    1bca:	3c 85       	ldd	r19, Y+12	; 0x0c
    1bcc:	34 ff       	sbrs	r19, 4
    1bce:	81 e3       	ldi	r24, 0x31	; 49
    1bd0:	b7 01       	movw	r22, r14
    1bd2:	90 e0       	ldi	r25, 0x00	; 0
    1bd4:	4e c0       	rjmp	.+156    	; 0x1c72 <vfprintf+0x3dc>
    1bd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd8:	81 33       	cpi	r24, 0x31	; 49
    1bda:	19 f0       	breq	.+6      	; 0x1be2 <vfprintf+0x34c>
    1bdc:	9c 85       	ldd	r25, Y+12	; 0x0c
    1bde:	9f 7e       	andi	r25, 0xEF	; 239
    1be0:	9c 87       	std	Y+12, r25	; 0x0c
    1be2:	b7 01       	movw	r22, r14
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	0e 94 2e 11 	call	0x225c	; 0x225c <fputc>
    1bea:	11 11       	cpse	r17, r1
    1bec:	05 c0       	rjmp	.+10     	; 0x1bf8 <vfprintf+0x362>
    1bee:	94 fc       	sbrc	r9, 4
    1bf0:	18 c0       	rjmp	.+48     	; 0x1c22 <vfprintf+0x38c>
    1bf2:	85 e6       	ldi	r24, 0x65	; 101
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	17 c0       	rjmp	.+46     	; 0x1c26 <vfprintf+0x390>
    1bf8:	b7 01       	movw	r22, r14
    1bfa:	8e e2       	ldi	r24, 0x2E	; 46
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	0e 94 2e 11 	call	0x225c	; 0x225c <fputc>
    1c02:	1e 5f       	subi	r17, 0xFE	; 254
    1c04:	82 e0       	ldi	r24, 0x02	; 2
    1c06:	01 e0       	ldi	r16, 0x01	; 1
    1c08:	08 0f       	add	r16, r24
    1c0a:	f3 01       	movw	r30, r6
    1c0c:	e8 0f       	add	r30, r24
    1c0e:	f1 1d       	adc	r31, r1
    1c10:	80 81       	ld	r24, Z
    1c12:	b7 01       	movw	r22, r14
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	0e 94 2e 11 	call	0x225c	; 0x225c <fputc>
    1c1a:	80 2f       	mov	r24, r16
    1c1c:	01 13       	cpse	r16, r17
    1c1e:	f3 cf       	rjmp	.-26     	; 0x1c06 <vfprintf+0x370>
    1c20:	e6 cf       	rjmp	.-52     	; 0x1bee <vfprintf+0x358>
    1c22:	85 e4       	ldi	r24, 0x45	; 69
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	b7 01       	movw	r22, r14
    1c28:	0e 94 2e 11 	call	0x225c	; 0x225c <fputc>
    1c2c:	d7 fc       	sbrc	r13, 7
    1c2e:	06 c0       	rjmp	.+12     	; 0x1c3c <vfprintf+0x3a6>
    1c30:	c1 14       	cp	r12, r1
    1c32:	d1 04       	cpc	r13, r1
    1c34:	41 f4       	brne	.+16     	; 0x1c46 <vfprintf+0x3b0>
    1c36:	ec 85       	ldd	r30, Y+12	; 0x0c
    1c38:	e4 ff       	sbrs	r30, 4
    1c3a:	05 c0       	rjmp	.+10     	; 0x1c46 <vfprintf+0x3b0>
    1c3c:	d1 94       	neg	r13
    1c3e:	c1 94       	neg	r12
    1c40:	d1 08       	sbc	r13, r1
    1c42:	8d e2       	ldi	r24, 0x2D	; 45
    1c44:	01 c0       	rjmp	.+2      	; 0x1c48 <vfprintf+0x3b2>
    1c46:	8b e2       	ldi	r24, 0x2B	; 43
    1c48:	b7 01       	movw	r22, r14
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	0e 94 2e 11 	call	0x225c	; 0x225c <fputc>
    1c50:	80 e3       	ldi	r24, 0x30	; 48
    1c52:	2a e0       	ldi	r18, 0x0A	; 10
    1c54:	c2 16       	cp	r12, r18
    1c56:	d1 04       	cpc	r13, r1
    1c58:	2c f0       	brlt	.+10     	; 0x1c64 <vfprintf+0x3ce>
    1c5a:	8f 5f       	subi	r24, 0xFF	; 255
    1c5c:	fa e0       	ldi	r31, 0x0A	; 10
    1c5e:	cf 1a       	sub	r12, r31
    1c60:	d1 08       	sbc	r13, r1
    1c62:	f7 cf       	rjmp	.-18     	; 0x1c52 <vfprintf+0x3bc>
    1c64:	b7 01       	movw	r22, r14
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	0e 94 2e 11 	call	0x225c	; 0x225c <fputc>
    1c6c:	b7 01       	movw	r22, r14
    1c6e:	c6 01       	movw	r24, r12
    1c70:	c0 96       	adiw	r24, 0x30	; 48
    1c72:	0e 94 2e 11 	call	0x225c	; 0x225c <fputc>
    1c76:	54 c1       	rjmp	.+680    	; 0x1f20 <vfprintf+0x68a>
    1c78:	83 36       	cpi	r24, 0x63	; 99
    1c7a:	31 f0       	breq	.+12     	; 0x1c88 <vfprintf+0x3f2>
    1c7c:	83 37       	cpi	r24, 0x73	; 115
    1c7e:	79 f0       	breq	.+30     	; 0x1c9e <vfprintf+0x408>
    1c80:	83 35       	cpi	r24, 0x53	; 83
    1c82:	09 f0       	breq	.+2      	; 0x1c86 <vfprintf+0x3f0>
    1c84:	56 c0       	rjmp	.+172    	; 0x1d32 <vfprintf+0x49c>
    1c86:	20 c0       	rjmp	.+64     	; 0x1cc8 <vfprintf+0x432>
    1c88:	56 01       	movw	r10, r12
    1c8a:	32 e0       	ldi	r19, 0x02	; 2
    1c8c:	a3 0e       	add	r10, r19
    1c8e:	b1 1c       	adc	r11, r1
    1c90:	f6 01       	movw	r30, r12
    1c92:	80 81       	ld	r24, Z
    1c94:	89 83       	std	Y+1, r24	; 0x01
    1c96:	01 e0       	ldi	r16, 0x01	; 1
    1c98:	10 e0       	ldi	r17, 0x00	; 0
    1c9a:	63 01       	movw	r12, r6
    1c9c:	12 c0       	rjmp	.+36     	; 0x1cc2 <vfprintf+0x42c>
    1c9e:	56 01       	movw	r10, r12
    1ca0:	f2 e0       	ldi	r31, 0x02	; 2
    1ca2:	af 0e       	add	r10, r31
    1ca4:	b1 1c       	adc	r11, r1
    1ca6:	f6 01       	movw	r30, r12
    1ca8:	c0 80       	ld	r12, Z
    1caa:	d1 80       	ldd	r13, Z+1	; 0x01
    1cac:	96 fe       	sbrs	r9, 6
    1cae:	03 c0       	rjmp	.+6      	; 0x1cb6 <vfprintf+0x420>
    1cb0:	61 2f       	mov	r22, r17
    1cb2:	70 e0       	ldi	r23, 0x00	; 0
    1cb4:	02 c0       	rjmp	.+4      	; 0x1cba <vfprintf+0x424>
    1cb6:	6f ef       	ldi	r22, 0xFF	; 255
    1cb8:	7f ef       	ldi	r23, 0xFF	; 255
    1cba:	c6 01       	movw	r24, r12
    1cbc:	0e 94 23 11 	call	0x2246	; 0x2246 <strnlen>
    1cc0:	8c 01       	movw	r16, r24
    1cc2:	f9 2d       	mov	r31, r9
    1cc4:	ff 77       	andi	r31, 0x7F	; 127
    1cc6:	14 c0       	rjmp	.+40     	; 0x1cf0 <vfprintf+0x45a>
    1cc8:	56 01       	movw	r10, r12
    1cca:	22 e0       	ldi	r18, 0x02	; 2
    1ccc:	a2 0e       	add	r10, r18
    1cce:	b1 1c       	adc	r11, r1
    1cd0:	f6 01       	movw	r30, r12
    1cd2:	c0 80       	ld	r12, Z
    1cd4:	d1 80       	ldd	r13, Z+1	; 0x01
    1cd6:	96 fe       	sbrs	r9, 6
    1cd8:	03 c0       	rjmp	.+6      	; 0x1ce0 <vfprintf+0x44a>
    1cda:	61 2f       	mov	r22, r17
    1cdc:	70 e0       	ldi	r23, 0x00	; 0
    1cde:	02 c0       	rjmp	.+4      	; 0x1ce4 <vfprintf+0x44e>
    1ce0:	6f ef       	ldi	r22, 0xFF	; 255
    1ce2:	7f ef       	ldi	r23, 0xFF	; 255
    1ce4:	c6 01       	movw	r24, r12
    1ce6:	0e 94 18 11 	call	0x2230	; 0x2230 <strnlen_P>
    1cea:	8c 01       	movw	r16, r24
    1cec:	f9 2d       	mov	r31, r9
    1cee:	f0 68       	ori	r31, 0x80	; 128
    1cf0:	9f 2e       	mov	r9, r31
    1cf2:	f3 fd       	sbrc	r31, 3
    1cf4:	1a c0       	rjmp	.+52     	; 0x1d2a <vfprintf+0x494>
    1cf6:	85 2d       	mov	r24, r5
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	08 17       	cp	r16, r24
    1cfc:	19 07       	cpc	r17, r25
    1cfe:	a8 f4       	brcc	.+42     	; 0x1d2a <vfprintf+0x494>
    1d00:	b7 01       	movw	r22, r14
    1d02:	80 e2       	ldi	r24, 0x20	; 32
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	0e 94 2e 11 	call	0x225c	; 0x225c <fputc>
    1d0a:	5a 94       	dec	r5
    1d0c:	f4 cf       	rjmp	.-24     	; 0x1cf6 <vfprintf+0x460>
    1d0e:	f6 01       	movw	r30, r12
    1d10:	97 fc       	sbrc	r9, 7
    1d12:	85 91       	lpm	r24, Z+
    1d14:	97 fe       	sbrs	r9, 7
    1d16:	81 91       	ld	r24, Z+
    1d18:	6f 01       	movw	r12, r30
    1d1a:	b7 01       	movw	r22, r14
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	0e 94 2e 11 	call	0x225c	; 0x225c <fputc>
    1d22:	51 10       	cpse	r5, r1
    1d24:	5a 94       	dec	r5
    1d26:	01 50       	subi	r16, 0x01	; 1
    1d28:	11 09       	sbc	r17, r1
    1d2a:	01 15       	cp	r16, r1
    1d2c:	11 05       	cpc	r17, r1
    1d2e:	79 f7       	brne	.-34     	; 0x1d0e <vfprintf+0x478>
    1d30:	f7 c0       	rjmp	.+494    	; 0x1f20 <vfprintf+0x68a>
    1d32:	84 36       	cpi	r24, 0x64	; 100
    1d34:	11 f0       	breq	.+4      	; 0x1d3a <vfprintf+0x4a4>
    1d36:	89 36       	cpi	r24, 0x69	; 105
    1d38:	61 f5       	brne	.+88     	; 0x1d92 <vfprintf+0x4fc>
    1d3a:	56 01       	movw	r10, r12
    1d3c:	97 fe       	sbrs	r9, 7
    1d3e:	09 c0       	rjmp	.+18     	; 0x1d52 <vfprintf+0x4bc>
    1d40:	24 e0       	ldi	r18, 0x04	; 4
    1d42:	a2 0e       	add	r10, r18
    1d44:	b1 1c       	adc	r11, r1
    1d46:	f6 01       	movw	r30, r12
    1d48:	60 81       	ld	r22, Z
    1d4a:	71 81       	ldd	r23, Z+1	; 0x01
    1d4c:	82 81       	ldd	r24, Z+2	; 0x02
    1d4e:	93 81       	ldd	r25, Z+3	; 0x03
    1d50:	0a c0       	rjmp	.+20     	; 0x1d66 <vfprintf+0x4d0>
    1d52:	f2 e0       	ldi	r31, 0x02	; 2
    1d54:	af 0e       	add	r10, r31
    1d56:	b1 1c       	adc	r11, r1
    1d58:	f6 01       	movw	r30, r12
    1d5a:	60 81       	ld	r22, Z
    1d5c:	71 81       	ldd	r23, Z+1	; 0x01
    1d5e:	07 2e       	mov	r0, r23
    1d60:	00 0c       	add	r0, r0
    1d62:	88 0b       	sbc	r24, r24
    1d64:	99 0b       	sbc	r25, r25
    1d66:	f9 2d       	mov	r31, r9
    1d68:	ff 76       	andi	r31, 0x6F	; 111
    1d6a:	9f 2e       	mov	r9, r31
    1d6c:	97 ff       	sbrs	r25, 7
    1d6e:	09 c0       	rjmp	.+18     	; 0x1d82 <vfprintf+0x4ec>
    1d70:	90 95       	com	r25
    1d72:	80 95       	com	r24
    1d74:	70 95       	com	r23
    1d76:	61 95       	neg	r22
    1d78:	7f 4f       	sbci	r23, 0xFF	; 255
    1d7a:	8f 4f       	sbci	r24, 0xFF	; 255
    1d7c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d7e:	f0 68       	ori	r31, 0x80	; 128
    1d80:	9f 2e       	mov	r9, r31
    1d82:	2a e0       	ldi	r18, 0x0A	; 10
    1d84:	30 e0       	ldi	r19, 0x00	; 0
    1d86:	a3 01       	movw	r20, r6
    1d88:	0e 94 8c 11 	call	0x2318	; 0x2318 <__ultoa_invert>
    1d8c:	c8 2e       	mov	r12, r24
    1d8e:	c6 18       	sub	r12, r6
    1d90:	3f c0       	rjmp	.+126    	; 0x1e10 <vfprintf+0x57a>
    1d92:	09 2d       	mov	r16, r9
    1d94:	85 37       	cpi	r24, 0x75	; 117
    1d96:	21 f4       	brne	.+8      	; 0x1da0 <vfprintf+0x50a>
    1d98:	0f 7e       	andi	r16, 0xEF	; 239
    1d9a:	2a e0       	ldi	r18, 0x0A	; 10
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	1d c0       	rjmp	.+58     	; 0x1dda <vfprintf+0x544>
    1da0:	09 7f       	andi	r16, 0xF9	; 249
    1da2:	8f 36       	cpi	r24, 0x6F	; 111
    1da4:	91 f0       	breq	.+36     	; 0x1dca <vfprintf+0x534>
    1da6:	18 f4       	brcc	.+6      	; 0x1dae <vfprintf+0x518>
    1da8:	88 35       	cpi	r24, 0x58	; 88
    1daa:	59 f0       	breq	.+22     	; 0x1dc2 <vfprintf+0x52c>
    1dac:	c3 c0       	rjmp	.+390    	; 0x1f34 <vfprintf+0x69e>
    1dae:	80 37       	cpi	r24, 0x70	; 112
    1db0:	19 f0       	breq	.+6      	; 0x1db8 <vfprintf+0x522>
    1db2:	88 37       	cpi	r24, 0x78	; 120
    1db4:	11 f0       	breq	.+4      	; 0x1dba <vfprintf+0x524>
    1db6:	be c0       	rjmp	.+380    	; 0x1f34 <vfprintf+0x69e>
    1db8:	00 61       	ori	r16, 0x10	; 16
    1dba:	04 ff       	sbrs	r16, 4
    1dbc:	09 c0       	rjmp	.+18     	; 0x1dd0 <vfprintf+0x53a>
    1dbe:	04 60       	ori	r16, 0x04	; 4
    1dc0:	07 c0       	rjmp	.+14     	; 0x1dd0 <vfprintf+0x53a>
    1dc2:	94 fe       	sbrs	r9, 4
    1dc4:	08 c0       	rjmp	.+16     	; 0x1dd6 <vfprintf+0x540>
    1dc6:	06 60       	ori	r16, 0x06	; 6
    1dc8:	06 c0       	rjmp	.+12     	; 0x1dd6 <vfprintf+0x540>
    1dca:	28 e0       	ldi	r18, 0x08	; 8
    1dcc:	30 e0       	ldi	r19, 0x00	; 0
    1dce:	05 c0       	rjmp	.+10     	; 0x1dda <vfprintf+0x544>
    1dd0:	20 e1       	ldi	r18, 0x10	; 16
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	02 c0       	rjmp	.+4      	; 0x1dda <vfprintf+0x544>
    1dd6:	20 e1       	ldi	r18, 0x10	; 16
    1dd8:	32 e0       	ldi	r19, 0x02	; 2
    1dda:	56 01       	movw	r10, r12
    1ddc:	07 ff       	sbrs	r16, 7
    1dde:	09 c0       	rjmp	.+18     	; 0x1df2 <vfprintf+0x55c>
    1de0:	84 e0       	ldi	r24, 0x04	; 4
    1de2:	a8 0e       	add	r10, r24
    1de4:	b1 1c       	adc	r11, r1
    1de6:	f6 01       	movw	r30, r12
    1de8:	60 81       	ld	r22, Z
    1dea:	71 81       	ldd	r23, Z+1	; 0x01
    1dec:	82 81       	ldd	r24, Z+2	; 0x02
    1dee:	93 81       	ldd	r25, Z+3	; 0x03
    1df0:	08 c0       	rjmp	.+16     	; 0x1e02 <vfprintf+0x56c>
    1df2:	f2 e0       	ldi	r31, 0x02	; 2
    1df4:	af 0e       	add	r10, r31
    1df6:	b1 1c       	adc	r11, r1
    1df8:	f6 01       	movw	r30, r12
    1dfa:	60 81       	ld	r22, Z
    1dfc:	71 81       	ldd	r23, Z+1	; 0x01
    1dfe:	80 e0       	ldi	r24, 0x00	; 0
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	a3 01       	movw	r20, r6
    1e04:	0e 94 8c 11 	call	0x2318	; 0x2318 <__ultoa_invert>
    1e08:	c8 2e       	mov	r12, r24
    1e0a:	c6 18       	sub	r12, r6
    1e0c:	0f 77       	andi	r16, 0x7F	; 127
    1e0e:	90 2e       	mov	r9, r16
    1e10:	96 fe       	sbrs	r9, 6
    1e12:	0b c0       	rjmp	.+22     	; 0x1e2a <vfprintf+0x594>
    1e14:	09 2d       	mov	r16, r9
    1e16:	0e 7f       	andi	r16, 0xFE	; 254
    1e18:	c1 16       	cp	r12, r17
    1e1a:	50 f4       	brcc	.+20     	; 0x1e30 <vfprintf+0x59a>
    1e1c:	94 fe       	sbrs	r9, 4
    1e1e:	0a c0       	rjmp	.+20     	; 0x1e34 <vfprintf+0x59e>
    1e20:	92 fc       	sbrc	r9, 2
    1e22:	08 c0       	rjmp	.+16     	; 0x1e34 <vfprintf+0x59e>
    1e24:	09 2d       	mov	r16, r9
    1e26:	0e 7e       	andi	r16, 0xEE	; 238
    1e28:	05 c0       	rjmp	.+10     	; 0x1e34 <vfprintf+0x59e>
    1e2a:	dc 2c       	mov	r13, r12
    1e2c:	09 2d       	mov	r16, r9
    1e2e:	03 c0       	rjmp	.+6      	; 0x1e36 <vfprintf+0x5a0>
    1e30:	dc 2c       	mov	r13, r12
    1e32:	01 c0       	rjmp	.+2      	; 0x1e36 <vfprintf+0x5a0>
    1e34:	d1 2e       	mov	r13, r17
    1e36:	04 ff       	sbrs	r16, 4
    1e38:	0d c0       	rjmp	.+26     	; 0x1e54 <vfprintf+0x5be>
    1e3a:	fe 01       	movw	r30, r28
    1e3c:	ec 0d       	add	r30, r12
    1e3e:	f1 1d       	adc	r31, r1
    1e40:	80 81       	ld	r24, Z
    1e42:	80 33       	cpi	r24, 0x30	; 48
    1e44:	11 f4       	brne	.+4      	; 0x1e4a <vfprintf+0x5b4>
    1e46:	09 7e       	andi	r16, 0xE9	; 233
    1e48:	09 c0       	rjmp	.+18     	; 0x1e5c <vfprintf+0x5c6>
    1e4a:	02 ff       	sbrs	r16, 2
    1e4c:	06 c0       	rjmp	.+12     	; 0x1e5a <vfprintf+0x5c4>
    1e4e:	d3 94       	inc	r13
    1e50:	d3 94       	inc	r13
    1e52:	04 c0       	rjmp	.+8      	; 0x1e5c <vfprintf+0x5c6>
    1e54:	80 2f       	mov	r24, r16
    1e56:	86 78       	andi	r24, 0x86	; 134
    1e58:	09 f0       	breq	.+2      	; 0x1e5c <vfprintf+0x5c6>
    1e5a:	d3 94       	inc	r13
    1e5c:	03 fd       	sbrc	r16, 3
    1e5e:	11 c0       	rjmp	.+34     	; 0x1e82 <vfprintf+0x5ec>
    1e60:	00 ff       	sbrs	r16, 0
    1e62:	06 c0       	rjmp	.+12     	; 0x1e70 <vfprintf+0x5da>
    1e64:	1c 2d       	mov	r17, r12
    1e66:	d5 14       	cp	r13, r5
    1e68:	80 f4       	brcc	.+32     	; 0x1e8a <vfprintf+0x5f4>
    1e6a:	15 0d       	add	r17, r5
    1e6c:	1d 19       	sub	r17, r13
    1e6e:	0d c0       	rjmp	.+26     	; 0x1e8a <vfprintf+0x5f4>
    1e70:	d5 14       	cp	r13, r5
    1e72:	58 f4       	brcc	.+22     	; 0x1e8a <vfprintf+0x5f4>
    1e74:	b7 01       	movw	r22, r14
    1e76:	80 e2       	ldi	r24, 0x20	; 32
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	0e 94 2e 11 	call	0x225c	; 0x225c <fputc>
    1e7e:	d3 94       	inc	r13
    1e80:	f7 cf       	rjmp	.-18     	; 0x1e70 <vfprintf+0x5da>
    1e82:	d5 14       	cp	r13, r5
    1e84:	10 f4       	brcc	.+4      	; 0x1e8a <vfprintf+0x5f4>
    1e86:	5d 18       	sub	r5, r13
    1e88:	01 c0       	rjmp	.+2      	; 0x1e8c <vfprintf+0x5f6>
    1e8a:	51 2c       	mov	r5, r1
    1e8c:	04 ff       	sbrs	r16, 4
    1e8e:	10 c0       	rjmp	.+32     	; 0x1eb0 <vfprintf+0x61a>
    1e90:	b7 01       	movw	r22, r14
    1e92:	80 e3       	ldi	r24, 0x30	; 48
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	0e 94 2e 11 	call	0x225c	; 0x225c <fputc>
    1e9a:	02 ff       	sbrs	r16, 2
    1e9c:	17 c0       	rjmp	.+46     	; 0x1ecc <vfprintf+0x636>
    1e9e:	01 fd       	sbrc	r16, 1
    1ea0:	03 c0       	rjmp	.+6      	; 0x1ea8 <vfprintf+0x612>
    1ea2:	88 e7       	ldi	r24, 0x78	; 120
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	02 c0       	rjmp	.+4      	; 0x1eac <vfprintf+0x616>
    1ea8:	88 e5       	ldi	r24, 0x58	; 88
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	b7 01       	movw	r22, r14
    1eae:	0c c0       	rjmp	.+24     	; 0x1ec8 <vfprintf+0x632>
    1eb0:	80 2f       	mov	r24, r16
    1eb2:	86 78       	andi	r24, 0x86	; 134
    1eb4:	59 f0       	breq	.+22     	; 0x1ecc <vfprintf+0x636>
    1eb6:	01 ff       	sbrs	r16, 1
    1eb8:	02 c0       	rjmp	.+4      	; 0x1ebe <vfprintf+0x628>
    1eba:	8b e2       	ldi	r24, 0x2B	; 43
    1ebc:	01 c0       	rjmp	.+2      	; 0x1ec0 <vfprintf+0x62a>
    1ebe:	80 e2       	ldi	r24, 0x20	; 32
    1ec0:	07 fd       	sbrc	r16, 7
    1ec2:	8d e2       	ldi	r24, 0x2D	; 45
    1ec4:	b7 01       	movw	r22, r14
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	0e 94 2e 11 	call	0x225c	; 0x225c <fputc>
    1ecc:	c1 16       	cp	r12, r17
    1ece:	38 f4       	brcc	.+14     	; 0x1ede <vfprintf+0x648>
    1ed0:	b7 01       	movw	r22, r14
    1ed2:	80 e3       	ldi	r24, 0x30	; 48
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	0e 94 2e 11 	call	0x225c	; 0x225c <fputc>
    1eda:	11 50       	subi	r17, 0x01	; 1
    1edc:	f7 cf       	rjmp	.-18     	; 0x1ecc <vfprintf+0x636>
    1ede:	ca 94       	dec	r12
    1ee0:	f3 01       	movw	r30, r6
    1ee2:	ec 0d       	add	r30, r12
    1ee4:	f1 1d       	adc	r31, r1
    1ee6:	80 81       	ld	r24, Z
    1ee8:	b7 01       	movw	r22, r14
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	0e 94 2e 11 	call	0x225c	; 0x225c <fputc>
    1ef0:	c1 10       	cpse	r12, r1
    1ef2:	f5 cf       	rjmp	.-22     	; 0x1ede <vfprintf+0x648>
    1ef4:	15 c0       	rjmp	.+42     	; 0x1f20 <vfprintf+0x68a>
    1ef6:	f4 e0       	ldi	r31, 0x04	; 4
    1ef8:	f5 15       	cp	r31, r5
    1efa:	60 f5       	brcc	.+88     	; 0x1f54 <vfprintf+0x6be>
    1efc:	84 e0       	ldi	r24, 0x04	; 4
    1efe:	58 1a       	sub	r5, r24
    1f00:	93 fe       	sbrs	r9, 3
    1f02:	1f c0       	rjmp	.+62     	; 0x1f42 <vfprintf+0x6ac>
    1f04:	01 11       	cpse	r16, r1
    1f06:	27 c0       	rjmp	.+78     	; 0x1f56 <vfprintf+0x6c0>
    1f08:	2c 85       	ldd	r18, Y+12	; 0x0c
    1f0a:	23 ff       	sbrs	r18, 3
    1f0c:	2a c0       	rjmp	.+84     	; 0x1f62 <vfprintf+0x6cc>
    1f0e:	04 e5       	ldi	r16, 0x54	; 84
    1f10:	10 e0       	ldi	r17, 0x00	; 0
    1f12:	39 2d       	mov	r19, r9
    1f14:	30 71       	andi	r19, 0x10	; 16
    1f16:	93 2e       	mov	r9, r19
    1f18:	f8 01       	movw	r30, r16
    1f1a:	84 91       	lpm	r24, Z
    1f1c:	81 11       	cpse	r24, r1
    1f1e:	24 c0       	rjmp	.+72     	; 0x1f68 <vfprintf+0x6d2>
    1f20:	55 20       	and	r5, r5
    1f22:	09 f4       	brne	.+2      	; 0x1f26 <vfprintf+0x690>
    1f24:	e4 cc       	rjmp	.-1592   	; 0x18ee <vfprintf+0x58>
    1f26:	b7 01       	movw	r22, r14
    1f28:	80 e2       	ldi	r24, 0x20	; 32
    1f2a:	90 e0       	ldi	r25, 0x00	; 0
    1f2c:	0e 94 2e 11 	call	0x225c	; 0x225c <fputc>
    1f30:	5a 94       	dec	r5
    1f32:	f6 cf       	rjmp	.-20     	; 0x1f20 <vfprintf+0x68a>
    1f34:	f7 01       	movw	r30, r14
    1f36:	86 81       	ldd	r24, Z+6	; 0x06
    1f38:	97 81       	ldd	r25, Z+7	; 0x07
    1f3a:	26 c0       	rjmp	.+76     	; 0x1f88 <vfprintf+0x6f2>
    1f3c:	8f ef       	ldi	r24, 0xFF	; 255
    1f3e:	9f ef       	ldi	r25, 0xFF	; 255
    1f40:	23 c0       	rjmp	.+70     	; 0x1f88 <vfprintf+0x6f2>
    1f42:	b7 01       	movw	r22, r14
    1f44:	80 e2       	ldi	r24, 0x20	; 32
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	0e 94 2e 11 	call	0x225c	; 0x225c <fputc>
    1f4c:	5a 94       	dec	r5
    1f4e:	51 10       	cpse	r5, r1
    1f50:	f8 cf       	rjmp	.-16     	; 0x1f42 <vfprintf+0x6ac>
    1f52:	d8 cf       	rjmp	.-80     	; 0x1f04 <vfprintf+0x66e>
    1f54:	51 2c       	mov	r5, r1
    1f56:	b7 01       	movw	r22, r14
    1f58:	80 2f       	mov	r24, r16
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	0e 94 2e 11 	call	0x225c	; 0x225c <fputc>
    1f60:	d3 cf       	rjmp	.-90     	; 0x1f08 <vfprintf+0x672>
    1f62:	08 e5       	ldi	r16, 0x58	; 88
    1f64:	10 e0       	ldi	r17, 0x00	; 0
    1f66:	d5 cf       	rjmp	.-86     	; 0x1f12 <vfprintf+0x67c>
    1f68:	91 10       	cpse	r9, r1
    1f6a:	80 52       	subi	r24, 0x20	; 32
    1f6c:	b7 01       	movw	r22, r14
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	0e 94 2e 11 	call	0x225c	; 0x225c <fputc>
    1f74:	0f 5f       	subi	r16, 0xFF	; 255
    1f76:	1f 4f       	sbci	r17, 0xFF	; 255
    1f78:	cf cf       	rjmp	.-98     	; 0x1f18 <vfprintf+0x682>
    1f7a:	23 e0       	ldi	r18, 0x03	; 3
    1f7c:	25 15       	cp	r18, r5
    1f7e:	10 f4       	brcc	.+4      	; 0x1f84 <vfprintf+0x6ee>
    1f80:	83 e0       	ldi	r24, 0x03	; 3
    1f82:	bd cf       	rjmp	.-134    	; 0x1efe <vfprintf+0x668>
    1f84:	51 2c       	mov	r5, r1
    1f86:	c0 cf       	rjmp	.-128    	; 0x1f08 <vfprintf+0x672>
    1f88:	60 96       	adiw	r28, 0x10	; 16
    1f8a:	e2 e1       	ldi	r30, 0x12	; 18
    1f8c:	0c 94 03 10 	jmp	0x2006	; 0x2006 <__epilogue_restores__>

00001f90 <__divmodsi4>:
    1f90:	05 2e       	mov	r0, r21
    1f92:	97 fb       	bst	r25, 7
    1f94:	1e f4       	brtc	.+6      	; 0x1f9c <__divmodsi4+0xc>
    1f96:	00 94       	com	r0
    1f98:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <__negsi2>
    1f9c:	57 fd       	sbrc	r21, 7
    1f9e:	07 d0       	rcall	.+14     	; 0x1fae <__divmodsi4_neg2>
    1fa0:	0e 94 1e 10 	call	0x203c	; 0x203c <__udivmodsi4>
    1fa4:	07 fc       	sbrc	r0, 7
    1fa6:	03 d0       	rcall	.+6      	; 0x1fae <__divmodsi4_neg2>
    1fa8:	4e f4       	brtc	.+18     	; 0x1fbc <__divmodsi4_exit>
    1faa:	0c 94 df 0f 	jmp	0x1fbe	; 0x1fbe <__negsi2>

00001fae <__divmodsi4_neg2>:
    1fae:	50 95       	com	r21
    1fb0:	40 95       	com	r20
    1fb2:	30 95       	com	r19
    1fb4:	21 95       	neg	r18
    1fb6:	3f 4f       	sbci	r19, 0xFF	; 255
    1fb8:	4f 4f       	sbci	r20, 0xFF	; 255
    1fba:	5f 4f       	sbci	r21, 0xFF	; 255

00001fbc <__divmodsi4_exit>:
    1fbc:	08 95       	ret

00001fbe <__negsi2>:
    1fbe:	90 95       	com	r25
    1fc0:	80 95       	com	r24
    1fc2:	70 95       	com	r23
    1fc4:	61 95       	neg	r22
    1fc6:	7f 4f       	sbci	r23, 0xFF	; 255
    1fc8:	8f 4f       	sbci	r24, 0xFF	; 255
    1fca:	9f 4f       	sbci	r25, 0xFF	; 255
    1fcc:	08 95       	ret

00001fce <__prologue_saves__>:
    1fce:	2f 92       	push	r2
    1fd0:	3f 92       	push	r3
    1fd2:	4f 92       	push	r4
    1fd4:	5f 92       	push	r5
    1fd6:	6f 92       	push	r6
    1fd8:	7f 92       	push	r7
    1fda:	8f 92       	push	r8
    1fdc:	9f 92       	push	r9
    1fde:	af 92       	push	r10
    1fe0:	bf 92       	push	r11
    1fe2:	cf 92       	push	r12
    1fe4:	df 92       	push	r13
    1fe6:	ef 92       	push	r14
    1fe8:	ff 92       	push	r15
    1fea:	0f 93       	push	r16
    1fec:	1f 93       	push	r17
    1fee:	cf 93       	push	r28
    1ff0:	df 93       	push	r29
    1ff2:	cd b7       	in	r28, 0x3d	; 61
    1ff4:	de b7       	in	r29, 0x3e	; 62
    1ff6:	ca 1b       	sub	r28, r26
    1ff8:	db 0b       	sbc	r29, r27
    1ffa:	0f b6       	in	r0, 0x3f	; 63
    1ffc:	f8 94       	cli
    1ffe:	de bf       	out	0x3e, r29	; 62
    2000:	0f be       	out	0x3f, r0	; 63
    2002:	cd bf       	out	0x3d, r28	; 61
    2004:	09 94       	ijmp

00002006 <__epilogue_restores__>:
    2006:	2a 88       	ldd	r2, Y+18	; 0x12
    2008:	39 88       	ldd	r3, Y+17	; 0x11
    200a:	48 88       	ldd	r4, Y+16	; 0x10
    200c:	5f 84       	ldd	r5, Y+15	; 0x0f
    200e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2010:	7d 84       	ldd	r7, Y+13	; 0x0d
    2012:	8c 84       	ldd	r8, Y+12	; 0x0c
    2014:	9b 84       	ldd	r9, Y+11	; 0x0b
    2016:	aa 84       	ldd	r10, Y+10	; 0x0a
    2018:	b9 84       	ldd	r11, Y+9	; 0x09
    201a:	c8 84       	ldd	r12, Y+8	; 0x08
    201c:	df 80       	ldd	r13, Y+7	; 0x07
    201e:	ee 80       	ldd	r14, Y+6	; 0x06
    2020:	fd 80       	ldd	r15, Y+5	; 0x05
    2022:	0c 81       	ldd	r16, Y+4	; 0x04
    2024:	1b 81       	ldd	r17, Y+3	; 0x03
    2026:	aa 81       	ldd	r26, Y+2	; 0x02
    2028:	b9 81       	ldd	r27, Y+1	; 0x01
    202a:	ce 0f       	add	r28, r30
    202c:	d1 1d       	adc	r29, r1
    202e:	0f b6       	in	r0, 0x3f	; 63
    2030:	f8 94       	cli
    2032:	de bf       	out	0x3e, r29	; 62
    2034:	0f be       	out	0x3f, r0	; 63
    2036:	cd bf       	out	0x3d, r28	; 61
    2038:	ed 01       	movw	r28, r26
    203a:	08 95       	ret

0000203c <__udivmodsi4>:
    203c:	a1 e2       	ldi	r26, 0x21	; 33
    203e:	1a 2e       	mov	r1, r26
    2040:	aa 1b       	sub	r26, r26
    2042:	bb 1b       	sub	r27, r27
    2044:	fd 01       	movw	r30, r26
    2046:	0d c0       	rjmp	.+26     	; 0x2062 <__udivmodsi4_ep>

00002048 <__udivmodsi4_loop>:
    2048:	aa 1f       	adc	r26, r26
    204a:	bb 1f       	adc	r27, r27
    204c:	ee 1f       	adc	r30, r30
    204e:	ff 1f       	adc	r31, r31
    2050:	a2 17       	cp	r26, r18
    2052:	b3 07       	cpc	r27, r19
    2054:	e4 07       	cpc	r30, r20
    2056:	f5 07       	cpc	r31, r21
    2058:	20 f0       	brcs	.+8      	; 0x2062 <__udivmodsi4_ep>
    205a:	a2 1b       	sub	r26, r18
    205c:	b3 0b       	sbc	r27, r19
    205e:	e4 0b       	sbc	r30, r20
    2060:	f5 0b       	sbc	r31, r21

00002062 <__udivmodsi4_ep>:
    2062:	66 1f       	adc	r22, r22
    2064:	77 1f       	adc	r23, r23
    2066:	88 1f       	adc	r24, r24
    2068:	99 1f       	adc	r25, r25
    206a:	1a 94       	dec	r1
    206c:	69 f7       	brne	.-38     	; 0x2048 <__udivmodsi4_loop>
    206e:	60 95       	com	r22
    2070:	70 95       	com	r23
    2072:	80 95       	com	r24
    2074:	90 95       	com	r25
    2076:	9b 01       	movw	r18, r22
    2078:	ac 01       	movw	r20, r24
    207a:	bd 01       	movw	r22, r26
    207c:	cf 01       	movw	r24, r30
    207e:	08 95       	ret

00002080 <__ftoa_engine>:
    2080:	28 30       	cpi	r18, 0x08	; 8
    2082:	08 f0       	brcs	.+2      	; 0x2086 <__ftoa_engine+0x6>
    2084:	27 e0       	ldi	r18, 0x07	; 7
    2086:	33 27       	eor	r19, r19
    2088:	da 01       	movw	r26, r20
    208a:	99 0f       	add	r25, r25
    208c:	31 1d       	adc	r19, r1
    208e:	87 fd       	sbrc	r24, 7
    2090:	91 60       	ori	r25, 0x01	; 1
    2092:	00 96       	adiw	r24, 0x00	; 0
    2094:	61 05       	cpc	r22, r1
    2096:	71 05       	cpc	r23, r1
    2098:	39 f4       	brne	.+14     	; 0x20a8 <__ftoa_engine+0x28>
    209a:	32 60       	ori	r19, 0x02	; 2
    209c:	2e 5f       	subi	r18, 0xFE	; 254
    209e:	3d 93       	st	X+, r19
    20a0:	30 e3       	ldi	r19, 0x30	; 48
    20a2:	2a 95       	dec	r18
    20a4:	e1 f7       	brne	.-8      	; 0x209e <__ftoa_engine+0x1e>
    20a6:	08 95       	ret
    20a8:	9f 3f       	cpi	r25, 0xFF	; 255
    20aa:	30 f0       	brcs	.+12     	; 0x20b8 <__ftoa_engine+0x38>
    20ac:	80 38       	cpi	r24, 0x80	; 128
    20ae:	71 05       	cpc	r23, r1
    20b0:	61 05       	cpc	r22, r1
    20b2:	09 f0       	breq	.+2      	; 0x20b6 <__ftoa_engine+0x36>
    20b4:	3c 5f       	subi	r19, 0xFC	; 252
    20b6:	3c 5f       	subi	r19, 0xFC	; 252
    20b8:	3d 93       	st	X+, r19
    20ba:	91 30       	cpi	r25, 0x01	; 1
    20bc:	08 f0       	brcs	.+2      	; 0x20c0 <__ftoa_engine+0x40>
    20be:	80 68       	ori	r24, 0x80	; 128
    20c0:	91 1d       	adc	r25, r1
    20c2:	df 93       	push	r29
    20c4:	cf 93       	push	r28
    20c6:	1f 93       	push	r17
    20c8:	0f 93       	push	r16
    20ca:	ff 92       	push	r15
    20cc:	ef 92       	push	r14
    20ce:	19 2f       	mov	r17, r25
    20d0:	98 7f       	andi	r25, 0xF8	; 248
    20d2:	96 95       	lsr	r25
    20d4:	e9 2f       	mov	r30, r25
    20d6:	96 95       	lsr	r25
    20d8:	96 95       	lsr	r25
    20da:	e9 0f       	add	r30, r25
    20dc:	ff 27       	eor	r31, r31
    20de:	ea 54       	subi	r30, 0x4A	; 74
    20e0:	ff 4f       	sbci	r31, 0xFF	; 255
    20e2:	99 27       	eor	r25, r25
    20e4:	33 27       	eor	r19, r19
    20e6:	ee 24       	eor	r14, r14
    20e8:	ff 24       	eor	r15, r15
    20ea:	a7 01       	movw	r20, r14
    20ec:	e7 01       	movw	r28, r14
    20ee:	05 90       	lpm	r0, Z+
    20f0:	08 94       	sec
    20f2:	07 94       	ror	r0
    20f4:	28 f4       	brcc	.+10     	; 0x2100 <__ftoa_engine+0x80>
    20f6:	36 0f       	add	r19, r22
    20f8:	e7 1e       	adc	r14, r23
    20fa:	f8 1e       	adc	r15, r24
    20fc:	49 1f       	adc	r20, r25
    20fe:	51 1d       	adc	r21, r1
    2100:	66 0f       	add	r22, r22
    2102:	77 1f       	adc	r23, r23
    2104:	88 1f       	adc	r24, r24
    2106:	99 1f       	adc	r25, r25
    2108:	06 94       	lsr	r0
    210a:	a1 f7       	brne	.-24     	; 0x20f4 <__ftoa_engine+0x74>
    210c:	05 90       	lpm	r0, Z+
    210e:	07 94       	ror	r0
    2110:	28 f4       	brcc	.+10     	; 0x211c <__ftoa_engine+0x9c>
    2112:	e7 0e       	add	r14, r23
    2114:	f8 1e       	adc	r15, r24
    2116:	49 1f       	adc	r20, r25
    2118:	56 1f       	adc	r21, r22
    211a:	c1 1d       	adc	r28, r1
    211c:	77 0f       	add	r23, r23
    211e:	88 1f       	adc	r24, r24
    2120:	99 1f       	adc	r25, r25
    2122:	66 1f       	adc	r22, r22
    2124:	06 94       	lsr	r0
    2126:	a1 f7       	brne	.-24     	; 0x2110 <__ftoa_engine+0x90>
    2128:	05 90       	lpm	r0, Z+
    212a:	07 94       	ror	r0
    212c:	28 f4       	brcc	.+10     	; 0x2138 <__ftoa_engine+0xb8>
    212e:	f8 0e       	add	r15, r24
    2130:	49 1f       	adc	r20, r25
    2132:	56 1f       	adc	r21, r22
    2134:	c7 1f       	adc	r28, r23
    2136:	d1 1d       	adc	r29, r1
    2138:	88 0f       	add	r24, r24
    213a:	99 1f       	adc	r25, r25
    213c:	66 1f       	adc	r22, r22
    213e:	77 1f       	adc	r23, r23
    2140:	06 94       	lsr	r0
    2142:	a1 f7       	brne	.-24     	; 0x212c <__ftoa_engine+0xac>
    2144:	05 90       	lpm	r0, Z+
    2146:	07 94       	ror	r0
    2148:	20 f4       	brcc	.+8      	; 0x2152 <__ftoa_engine+0xd2>
    214a:	49 0f       	add	r20, r25
    214c:	56 1f       	adc	r21, r22
    214e:	c7 1f       	adc	r28, r23
    2150:	d8 1f       	adc	r29, r24
    2152:	99 0f       	add	r25, r25
    2154:	66 1f       	adc	r22, r22
    2156:	77 1f       	adc	r23, r23
    2158:	88 1f       	adc	r24, r24
    215a:	06 94       	lsr	r0
    215c:	a9 f7       	brne	.-22     	; 0x2148 <__ftoa_engine+0xc8>
    215e:	84 91       	lpm	r24, Z
    2160:	10 95       	com	r17
    2162:	17 70       	andi	r17, 0x07	; 7
    2164:	41 f0       	breq	.+16     	; 0x2176 <__ftoa_engine+0xf6>
    2166:	d6 95       	lsr	r29
    2168:	c7 95       	ror	r28
    216a:	57 95       	ror	r21
    216c:	47 95       	ror	r20
    216e:	f7 94       	ror	r15
    2170:	e7 94       	ror	r14
    2172:	1a 95       	dec	r17
    2174:	c1 f7       	brne	.-16     	; 0x2166 <__ftoa_engine+0xe6>
    2176:	ec e5       	ldi	r30, 0x5C	; 92
    2178:	f0 e0       	ldi	r31, 0x00	; 0
    217a:	68 94       	set
    217c:	15 90       	lpm	r1, Z+
    217e:	15 91       	lpm	r17, Z+
    2180:	35 91       	lpm	r19, Z+
    2182:	65 91       	lpm	r22, Z+
    2184:	95 91       	lpm	r25, Z+
    2186:	05 90       	lpm	r0, Z+
    2188:	7f e2       	ldi	r23, 0x2F	; 47
    218a:	73 95       	inc	r23
    218c:	e1 18       	sub	r14, r1
    218e:	f1 0a       	sbc	r15, r17
    2190:	43 0b       	sbc	r20, r19
    2192:	56 0b       	sbc	r21, r22
    2194:	c9 0b       	sbc	r28, r25
    2196:	d0 09       	sbc	r29, r0
    2198:	c0 f7       	brcc	.-16     	; 0x218a <__ftoa_engine+0x10a>
    219a:	e1 0c       	add	r14, r1
    219c:	f1 1e       	adc	r15, r17
    219e:	43 1f       	adc	r20, r19
    21a0:	56 1f       	adc	r21, r22
    21a2:	c9 1f       	adc	r28, r25
    21a4:	d0 1d       	adc	r29, r0
    21a6:	7e f4       	brtc	.+30     	; 0x21c6 <__ftoa_engine+0x146>
    21a8:	70 33       	cpi	r23, 0x30	; 48
    21aa:	11 f4       	brne	.+4      	; 0x21b0 <__ftoa_engine+0x130>
    21ac:	8a 95       	dec	r24
    21ae:	e6 cf       	rjmp	.-52     	; 0x217c <__ftoa_engine+0xfc>
    21b0:	e8 94       	clt
    21b2:	01 50       	subi	r16, 0x01	; 1
    21b4:	30 f0       	brcs	.+12     	; 0x21c2 <__ftoa_engine+0x142>
    21b6:	08 0f       	add	r16, r24
    21b8:	0a f4       	brpl	.+2      	; 0x21bc <__ftoa_engine+0x13c>
    21ba:	00 27       	eor	r16, r16
    21bc:	02 17       	cp	r16, r18
    21be:	08 f4       	brcc	.+2      	; 0x21c2 <__ftoa_engine+0x142>
    21c0:	20 2f       	mov	r18, r16
    21c2:	23 95       	inc	r18
    21c4:	02 2f       	mov	r16, r18
    21c6:	7a 33       	cpi	r23, 0x3A	; 58
    21c8:	28 f0       	brcs	.+10     	; 0x21d4 <__ftoa_engine+0x154>
    21ca:	79 e3       	ldi	r23, 0x39	; 57
    21cc:	7d 93       	st	X+, r23
    21ce:	2a 95       	dec	r18
    21d0:	e9 f7       	brne	.-6      	; 0x21cc <__ftoa_engine+0x14c>
    21d2:	10 c0       	rjmp	.+32     	; 0x21f4 <__ftoa_engine+0x174>
    21d4:	7d 93       	st	X+, r23
    21d6:	2a 95       	dec	r18
    21d8:	89 f6       	brne	.-94     	; 0x217c <__ftoa_engine+0xfc>
    21da:	06 94       	lsr	r0
    21dc:	97 95       	ror	r25
    21de:	67 95       	ror	r22
    21e0:	37 95       	ror	r19
    21e2:	17 95       	ror	r17
    21e4:	17 94       	ror	r1
    21e6:	e1 18       	sub	r14, r1
    21e8:	f1 0a       	sbc	r15, r17
    21ea:	43 0b       	sbc	r20, r19
    21ec:	56 0b       	sbc	r21, r22
    21ee:	c9 0b       	sbc	r28, r25
    21f0:	d0 09       	sbc	r29, r0
    21f2:	98 f0       	brcs	.+38     	; 0x221a <__ftoa_engine+0x19a>
    21f4:	23 95       	inc	r18
    21f6:	7e 91       	ld	r23, -X
    21f8:	73 95       	inc	r23
    21fa:	7a 33       	cpi	r23, 0x3A	; 58
    21fc:	08 f0       	brcs	.+2      	; 0x2200 <__ftoa_engine+0x180>
    21fe:	70 e3       	ldi	r23, 0x30	; 48
    2200:	7c 93       	st	X, r23
    2202:	20 13       	cpse	r18, r16
    2204:	b8 f7       	brcc	.-18     	; 0x21f4 <__ftoa_engine+0x174>
    2206:	7e 91       	ld	r23, -X
    2208:	70 61       	ori	r23, 0x10	; 16
    220a:	7d 93       	st	X+, r23
    220c:	30 f0       	brcs	.+12     	; 0x221a <__ftoa_engine+0x19a>
    220e:	83 95       	inc	r24
    2210:	71 e3       	ldi	r23, 0x31	; 49
    2212:	7d 93       	st	X+, r23
    2214:	70 e3       	ldi	r23, 0x30	; 48
    2216:	2a 95       	dec	r18
    2218:	e1 f7       	brne	.-8      	; 0x2212 <__ftoa_engine+0x192>
    221a:	11 24       	eor	r1, r1
    221c:	ef 90       	pop	r14
    221e:	ff 90       	pop	r15
    2220:	0f 91       	pop	r16
    2222:	1f 91       	pop	r17
    2224:	cf 91       	pop	r28
    2226:	df 91       	pop	r29
    2228:	99 27       	eor	r25, r25
    222a:	87 fd       	sbrc	r24, 7
    222c:	90 95       	com	r25
    222e:	08 95       	ret

00002230 <strnlen_P>:
    2230:	fc 01       	movw	r30, r24
    2232:	05 90       	lpm	r0, Z+
    2234:	61 50       	subi	r22, 0x01	; 1
    2236:	70 40       	sbci	r23, 0x00	; 0
    2238:	01 10       	cpse	r0, r1
    223a:	d8 f7       	brcc	.-10     	; 0x2232 <strnlen_P+0x2>
    223c:	80 95       	com	r24
    223e:	90 95       	com	r25
    2240:	8e 0f       	add	r24, r30
    2242:	9f 1f       	adc	r25, r31
    2244:	08 95       	ret

00002246 <strnlen>:
    2246:	fc 01       	movw	r30, r24
    2248:	61 50       	subi	r22, 0x01	; 1
    224a:	70 40       	sbci	r23, 0x00	; 0
    224c:	01 90       	ld	r0, Z+
    224e:	01 10       	cpse	r0, r1
    2250:	d8 f7       	brcc	.-10     	; 0x2248 <strnlen+0x2>
    2252:	80 95       	com	r24
    2254:	90 95       	com	r25
    2256:	8e 0f       	add	r24, r30
    2258:	9f 1f       	adc	r25, r31
    225a:	08 95       	ret

0000225c <fputc>:
    225c:	0f 93       	push	r16
    225e:	1f 93       	push	r17
    2260:	cf 93       	push	r28
    2262:	df 93       	push	r29
    2264:	fb 01       	movw	r30, r22
    2266:	23 81       	ldd	r18, Z+3	; 0x03
    2268:	21 fd       	sbrc	r18, 1
    226a:	03 c0       	rjmp	.+6      	; 0x2272 <fputc+0x16>
    226c:	8f ef       	ldi	r24, 0xFF	; 255
    226e:	9f ef       	ldi	r25, 0xFF	; 255
    2270:	2c c0       	rjmp	.+88     	; 0x22ca <fputc+0x6e>
    2272:	22 ff       	sbrs	r18, 2
    2274:	16 c0       	rjmp	.+44     	; 0x22a2 <fputc+0x46>
    2276:	46 81       	ldd	r20, Z+6	; 0x06
    2278:	57 81       	ldd	r21, Z+7	; 0x07
    227a:	24 81       	ldd	r18, Z+4	; 0x04
    227c:	35 81       	ldd	r19, Z+5	; 0x05
    227e:	42 17       	cp	r20, r18
    2280:	53 07       	cpc	r21, r19
    2282:	44 f4       	brge	.+16     	; 0x2294 <fputc+0x38>
    2284:	a0 81       	ld	r26, Z
    2286:	b1 81       	ldd	r27, Z+1	; 0x01
    2288:	9d 01       	movw	r18, r26
    228a:	2f 5f       	subi	r18, 0xFF	; 255
    228c:	3f 4f       	sbci	r19, 0xFF	; 255
    228e:	31 83       	std	Z+1, r19	; 0x01
    2290:	20 83       	st	Z, r18
    2292:	8c 93       	st	X, r24
    2294:	26 81       	ldd	r18, Z+6	; 0x06
    2296:	37 81       	ldd	r19, Z+7	; 0x07
    2298:	2f 5f       	subi	r18, 0xFF	; 255
    229a:	3f 4f       	sbci	r19, 0xFF	; 255
    229c:	37 83       	std	Z+7, r19	; 0x07
    229e:	26 83       	std	Z+6, r18	; 0x06
    22a0:	14 c0       	rjmp	.+40     	; 0x22ca <fputc+0x6e>
    22a2:	8b 01       	movw	r16, r22
    22a4:	ec 01       	movw	r28, r24
    22a6:	fb 01       	movw	r30, r22
    22a8:	00 84       	ldd	r0, Z+8	; 0x08
    22aa:	f1 85       	ldd	r31, Z+9	; 0x09
    22ac:	e0 2d       	mov	r30, r0
    22ae:	09 95       	icall
    22b0:	89 2b       	or	r24, r25
    22b2:	e1 f6       	brne	.-72     	; 0x226c <fputc+0x10>
    22b4:	d8 01       	movw	r26, r16
    22b6:	16 96       	adiw	r26, 0x06	; 6
    22b8:	8d 91       	ld	r24, X+
    22ba:	9c 91       	ld	r25, X
    22bc:	17 97       	sbiw	r26, 0x07	; 7
    22be:	01 96       	adiw	r24, 0x01	; 1
    22c0:	17 96       	adiw	r26, 0x07	; 7
    22c2:	9c 93       	st	X, r25
    22c4:	8e 93       	st	-X, r24
    22c6:	16 97       	sbiw	r26, 0x06	; 6
    22c8:	ce 01       	movw	r24, r28
    22ca:	df 91       	pop	r29
    22cc:	cf 91       	pop	r28
    22ce:	1f 91       	pop	r17
    22d0:	0f 91       	pop	r16
    22d2:	08 95       	ret

000022d4 <sprintf>:
    22d4:	ae e0       	ldi	r26, 0x0E	; 14
    22d6:	b0 e0       	ldi	r27, 0x00	; 0
    22d8:	e0 e7       	ldi	r30, 0x70	; 112
    22da:	f1 e1       	ldi	r31, 0x11	; 17
    22dc:	0c 94 f5 0f 	jmp	0x1fea	; 0x1fea <__prologue_saves__+0x1c>
    22e0:	0d 89       	ldd	r16, Y+21	; 0x15
    22e2:	1e 89       	ldd	r17, Y+22	; 0x16
    22e4:	86 e0       	ldi	r24, 0x06	; 6
    22e6:	8c 83       	std	Y+4, r24	; 0x04
    22e8:	1a 83       	std	Y+2, r17	; 0x02
    22ea:	09 83       	std	Y+1, r16	; 0x01
    22ec:	8f ef       	ldi	r24, 0xFF	; 255
    22ee:	9f e7       	ldi	r25, 0x7F	; 127
    22f0:	9e 83       	std	Y+6, r25	; 0x06
    22f2:	8d 83       	std	Y+5, r24	; 0x05
    22f4:	ae 01       	movw	r20, r28
    22f6:	47 5e       	subi	r20, 0xE7	; 231
    22f8:	5f 4f       	sbci	r21, 0xFF	; 255
    22fa:	6f 89       	ldd	r22, Y+23	; 0x17
    22fc:	78 8d       	ldd	r23, Y+24	; 0x18
    22fe:	ce 01       	movw	r24, r28
    2300:	01 96       	adiw	r24, 0x01	; 1
    2302:	0e 94 4b 0c 	call	0x1896	; 0x1896 <vfprintf>
    2306:	ef 81       	ldd	r30, Y+7	; 0x07
    2308:	f8 85       	ldd	r31, Y+8	; 0x08
    230a:	e0 0f       	add	r30, r16
    230c:	f1 1f       	adc	r31, r17
    230e:	10 82       	st	Z, r1
    2310:	2e 96       	adiw	r28, 0x0e	; 14
    2312:	e4 e0       	ldi	r30, 0x04	; 4
    2314:	0c 94 11 10 	jmp	0x2022	; 0x2022 <__epilogue_restores__+0x1c>

00002318 <__ultoa_invert>:
    2318:	fa 01       	movw	r30, r20
    231a:	aa 27       	eor	r26, r26
    231c:	28 30       	cpi	r18, 0x08	; 8
    231e:	51 f1       	breq	.+84     	; 0x2374 <__ultoa_invert+0x5c>
    2320:	20 31       	cpi	r18, 0x10	; 16
    2322:	81 f1       	breq	.+96     	; 0x2384 <__ultoa_invert+0x6c>
    2324:	e8 94       	clt
    2326:	6f 93       	push	r22
    2328:	6e 7f       	andi	r22, 0xFE	; 254
    232a:	6e 5f       	subi	r22, 0xFE	; 254
    232c:	7f 4f       	sbci	r23, 0xFF	; 255
    232e:	8f 4f       	sbci	r24, 0xFF	; 255
    2330:	9f 4f       	sbci	r25, 0xFF	; 255
    2332:	af 4f       	sbci	r26, 0xFF	; 255
    2334:	b1 e0       	ldi	r27, 0x01	; 1
    2336:	3e d0       	rcall	.+124    	; 0x23b4 <__ultoa_invert+0x9c>
    2338:	b4 e0       	ldi	r27, 0x04	; 4
    233a:	3c d0       	rcall	.+120    	; 0x23b4 <__ultoa_invert+0x9c>
    233c:	67 0f       	add	r22, r23
    233e:	78 1f       	adc	r23, r24
    2340:	89 1f       	adc	r24, r25
    2342:	9a 1f       	adc	r25, r26
    2344:	a1 1d       	adc	r26, r1
    2346:	68 0f       	add	r22, r24
    2348:	79 1f       	adc	r23, r25
    234a:	8a 1f       	adc	r24, r26
    234c:	91 1d       	adc	r25, r1
    234e:	a1 1d       	adc	r26, r1
    2350:	6a 0f       	add	r22, r26
    2352:	71 1d       	adc	r23, r1
    2354:	81 1d       	adc	r24, r1
    2356:	91 1d       	adc	r25, r1
    2358:	a1 1d       	adc	r26, r1
    235a:	20 d0       	rcall	.+64     	; 0x239c <__ultoa_invert+0x84>
    235c:	09 f4       	brne	.+2      	; 0x2360 <__ultoa_invert+0x48>
    235e:	68 94       	set
    2360:	3f 91       	pop	r19
    2362:	2a e0       	ldi	r18, 0x0A	; 10
    2364:	26 9f       	mul	r18, r22
    2366:	11 24       	eor	r1, r1
    2368:	30 19       	sub	r19, r0
    236a:	30 5d       	subi	r19, 0xD0	; 208
    236c:	31 93       	st	Z+, r19
    236e:	de f6       	brtc	.-74     	; 0x2326 <__ultoa_invert+0xe>
    2370:	cf 01       	movw	r24, r30
    2372:	08 95       	ret
    2374:	46 2f       	mov	r20, r22
    2376:	47 70       	andi	r20, 0x07	; 7
    2378:	40 5d       	subi	r20, 0xD0	; 208
    237a:	41 93       	st	Z+, r20
    237c:	b3 e0       	ldi	r27, 0x03	; 3
    237e:	0f d0       	rcall	.+30     	; 0x239e <__ultoa_invert+0x86>
    2380:	c9 f7       	brne	.-14     	; 0x2374 <__ultoa_invert+0x5c>
    2382:	f6 cf       	rjmp	.-20     	; 0x2370 <__ultoa_invert+0x58>
    2384:	46 2f       	mov	r20, r22
    2386:	4f 70       	andi	r20, 0x0F	; 15
    2388:	40 5d       	subi	r20, 0xD0	; 208
    238a:	4a 33       	cpi	r20, 0x3A	; 58
    238c:	18 f0       	brcs	.+6      	; 0x2394 <__ultoa_invert+0x7c>
    238e:	49 5d       	subi	r20, 0xD9	; 217
    2390:	31 fd       	sbrc	r19, 1
    2392:	40 52       	subi	r20, 0x20	; 32
    2394:	41 93       	st	Z+, r20
    2396:	02 d0       	rcall	.+4      	; 0x239c <__ultoa_invert+0x84>
    2398:	a9 f7       	brne	.-22     	; 0x2384 <__ultoa_invert+0x6c>
    239a:	ea cf       	rjmp	.-44     	; 0x2370 <__ultoa_invert+0x58>
    239c:	b4 e0       	ldi	r27, 0x04	; 4
    239e:	a6 95       	lsr	r26
    23a0:	97 95       	ror	r25
    23a2:	87 95       	ror	r24
    23a4:	77 95       	ror	r23
    23a6:	67 95       	ror	r22
    23a8:	ba 95       	dec	r27
    23aa:	c9 f7       	brne	.-14     	; 0x239e <__ultoa_invert+0x86>
    23ac:	00 97       	sbiw	r24, 0x00	; 0
    23ae:	61 05       	cpc	r22, r1
    23b0:	71 05       	cpc	r23, r1
    23b2:	08 95       	ret
    23b4:	9b 01       	movw	r18, r22
    23b6:	ac 01       	movw	r20, r24
    23b8:	0a 2e       	mov	r0, r26
    23ba:	06 94       	lsr	r0
    23bc:	57 95       	ror	r21
    23be:	47 95       	ror	r20
    23c0:	37 95       	ror	r19
    23c2:	27 95       	ror	r18
    23c4:	ba 95       	dec	r27
    23c6:	c9 f7       	brne	.-14     	; 0x23ba <__ultoa_invert+0xa2>
    23c8:	62 0f       	add	r22, r18
    23ca:	73 1f       	adc	r23, r19
    23cc:	84 1f       	adc	r24, r20
    23ce:	95 1f       	adc	r25, r21
    23d0:	a0 1d       	adc	r26, r0
    23d2:	08 95       	ret

000023d4 <eeprom_read_byte>:
    23d4:	e1 99       	sbic	0x1c, 1	; 28
    23d6:	fe cf       	rjmp	.-4      	; 0x23d4 <eeprom_read_byte>
    23d8:	9f bb       	out	0x1f, r25	; 31
    23da:	8e bb       	out	0x1e, r24	; 30
    23dc:	e0 9a       	sbi	0x1c, 0	; 28
    23de:	99 27       	eor	r25, r25
    23e0:	8d b3       	in	r24, 0x1d	; 29
    23e2:	08 95       	ret

000023e4 <eeprom_read_word>:
    23e4:	a8 e1       	ldi	r26, 0x18	; 24
    23e6:	b0 e0       	ldi	r27, 0x00	; 0
    23e8:	42 e0       	ldi	r20, 0x02	; 2
    23ea:	50 e0       	ldi	r21, 0x00	; 0
    23ec:	0c 94 0c 12 	jmp	0x2418	; 0x2418 <eeprom_read_blraw>

000023f0 <eeprom_write_byte>:
    23f0:	26 2f       	mov	r18, r22

000023f2 <eeprom_write_r18>:
    23f2:	e1 99       	sbic	0x1c, 1	; 28
    23f4:	fe cf       	rjmp	.-4      	; 0x23f2 <eeprom_write_r18>
    23f6:	9f bb       	out	0x1f, r25	; 31
    23f8:	8e bb       	out	0x1e, r24	; 30
    23fa:	2d bb       	out	0x1d, r18	; 29
    23fc:	0f b6       	in	r0, 0x3f	; 63
    23fe:	f8 94       	cli
    2400:	e2 9a       	sbi	0x1c, 2	; 28
    2402:	e1 9a       	sbi	0x1c, 1	; 28
    2404:	0f be       	out	0x3f, r0	; 63
    2406:	01 96       	adiw	r24, 0x01	; 1
    2408:	08 95       	ret

0000240a <eeprom_write_word>:
    240a:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <eeprom_write_byte>
    240e:	27 2f       	mov	r18, r23
    2410:	0c 94 f9 11 	jmp	0x23f2	; 0x23f2 <eeprom_write_r18>

00002414 <eeprom_read_block>:
    2414:	dc 01       	movw	r26, r24
    2416:	cb 01       	movw	r24, r22

00002418 <eeprom_read_blraw>:
    2418:	fc 01       	movw	r30, r24
    241a:	e1 99       	sbic	0x1c, 1	; 28
    241c:	fe cf       	rjmp	.-4      	; 0x241a <eeprom_read_blraw+0x2>
    241e:	06 c0       	rjmp	.+12     	; 0x242c <eeprom_read_blraw+0x14>
    2420:	ff bb       	out	0x1f, r31	; 31
    2422:	ee bb       	out	0x1e, r30	; 30
    2424:	e0 9a       	sbi	0x1c, 0	; 28
    2426:	31 96       	adiw	r30, 0x01	; 1
    2428:	0d b2       	in	r0, 0x1d	; 29
    242a:	0d 92       	st	X+, r0
    242c:	41 50       	subi	r20, 0x01	; 1
    242e:	50 40       	sbci	r21, 0x00	; 0
    2430:	b8 f7       	brcc	.-18     	; 0x2420 <eeprom_read_blraw+0x8>
    2432:	08 95       	ret

00002434 <_exit>:
    2434:	f8 94       	cli

00002436 <__stop_program>:
    2436:	ff cf       	rjmp	.-2      	; 0x2436 <__stop_program>
